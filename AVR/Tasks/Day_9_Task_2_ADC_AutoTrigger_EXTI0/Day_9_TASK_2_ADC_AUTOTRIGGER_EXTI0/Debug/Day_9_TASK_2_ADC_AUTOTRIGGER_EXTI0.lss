
Day_9_TASK_2_ADC_AUTOTRIGGER_EXTI0.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000038aa  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000012a  00800060  000038aa  0000393e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000c  0080018a  0080018a  00003a68  2**0
                  ALLOC
  3 .stab         00003798  00000000  00000000  00003a68  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001c3e  00000000  00000000  00007200  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001a0  00000000  00000000  00008e3e  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000001f2  00000000  00000000  00008fde  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000240b  00000000  00000000  000091d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001386  00000000  00000000  0000b5db  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000011d6  00000000  00000000  0000c961  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001c0  00000000  00000000  0000db38  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002f6  00000000  00000000  0000dcf8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000096e  00000000  00000000  0000dfee  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000e95c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 82 08 	jmp	0x1104	; 0x1104 <__vector_1>
       8:	0c 94 af 08 	jmp	0x115e	; 0x115e <__vector_2>
       c:	0c 94 dc 08 	jmp	0x11b8	; 0x11b8 <__vector_3>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 82 0e 	jmp	0x1d04	; 0x1d04 <__vector_16>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ea ea       	ldi	r30, 0xAA	; 170
      68:	f8 e3       	ldi	r31, 0x38	; 56
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	aa 38       	cpi	r26, 0x8A	; 138
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	aa e8       	ldi	r26, 0x8A	; 138
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a6 39       	cpi	r26, 0x96	; 150
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 46 1a 	call	0x348c	; 0x348c <main>
      8a:	0c 94 53 1c 	jmp	0x38a6	; 0x38a6 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 1c 1c 	jmp	0x3838	; 0x3838 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a1 e7       	ldi	r26, 0x71	; 113
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 38 1c 	jmp	0x3870	; 0x3870 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 28 1c 	jmp	0x3850	; 0x3850 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 44 1c 	jmp	0x3888	; 0x3888 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 28 1c 	jmp	0x3850	; 0x3850 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 44 1c 	jmp	0x3888	; 0x3888 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 1c 1c 	jmp	0x3838	; 0x3838 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	81 e7       	ldi	r24, 0x71	; 113
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 38 1c 	jmp	0x3870	; 0x3870 <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 24 1c 	jmp	0x3848	; 0x3848 <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	61 e7       	ldi	r22, 0x71	; 113
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 40 1c 	jmp	0x3880	; 0x3880 <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 28 1c 	jmp	0x3850	; 0x3850 <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 44 1c 	jmp	0x3888	; 0x3888 <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 28 1c 	jmp	0x3850	; 0x3850 <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 44 1c 	jmp	0x3888	; 0x3888 <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 28 1c 	jmp	0x3850	; 0x3850 <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 44 1c 	jmp	0x3888	; 0x3888 <__epilogue_restores__+0x18>

000008aa <__fixsfsi>:
     8aa:	ac e0       	ldi	r26, 0x0C	; 12
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 2c 1c 	jmp	0x3858	; 0x3858 <__prologue_saves__+0x20>
     8b6:	69 83       	std	Y+1, r22	; 0x01
     8b8:	7a 83       	std	Y+2, r23	; 0x02
     8ba:	8b 83       	std	Y+3, r24	; 0x03
     8bc:	9c 83       	std	Y+4, r25	; 0x04
     8be:	ce 01       	movw	r24, r28
     8c0:	01 96       	adiw	r24, 0x01	; 1
     8c2:	be 01       	movw	r22, r28
     8c4:	6b 5f       	subi	r22, 0xFB	; 251
     8c6:	7f 4f       	sbci	r23, 0xFF	; 255
     8c8:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     8cc:	8d 81       	ldd	r24, Y+5	; 0x05
     8ce:	82 30       	cpi	r24, 0x02	; 2
     8d0:	61 f1       	breq	.+88     	; 0x92a <__fixsfsi+0x80>
     8d2:	82 30       	cpi	r24, 0x02	; 2
     8d4:	50 f1       	brcs	.+84     	; 0x92a <__fixsfsi+0x80>
     8d6:	84 30       	cpi	r24, 0x04	; 4
     8d8:	21 f4       	brne	.+8      	; 0x8e2 <__fixsfsi+0x38>
     8da:	8e 81       	ldd	r24, Y+6	; 0x06
     8dc:	88 23       	and	r24, r24
     8de:	51 f1       	breq	.+84     	; 0x934 <__fixsfsi+0x8a>
     8e0:	2e c0       	rjmp	.+92     	; 0x93e <__fixsfsi+0x94>
     8e2:	2f 81       	ldd	r18, Y+7	; 0x07
     8e4:	38 85       	ldd	r19, Y+8	; 0x08
     8e6:	37 fd       	sbrc	r19, 7
     8e8:	20 c0       	rjmp	.+64     	; 0x92a <__fixsfsi+0x80>
     8ea:	6e 81       	ldd	r22, Y+6	; 0x06
     8ec:	2f 31       	cpi	r18, 0x1F	; 31
     8ee:	31 05       	cpc	r19, r1
     8f0:	1c f0       	brlt	.+6      	; 0x8f8 <__fixsfsi+0x4e>
     8f2:	66 23       	and	r22, r22
     8f4:	f9 f0       	breq	.+62     	; 0x934 <__fixsfsi+0x8a>
     8f6:	23 c0       	rjmp	.+70     	; 0x93e <__fixsfsi+0x94>
     8f8:	8e e1       	ldi	r24, 0x1E	; 30
     8fa:	90 e0       	ldi	r25, 0x00	; 0
     8fc:	82 1b       	sub	r24, r18
     8fe:	93 0b       	sbc	r25, r19
     900:	29 85       	ldd	r18, Y+9	; 0x09
     902:	3a 85       	ldd	r19, Y+10	; 0x0a
     904:	4b 85       	ldd	r20, Y+11	; 0x0b
     906:	5c 85       	ldd	r21, Y+12	; 0x0c
     908:	04 c0       	rjmp	.+8      	; 0x912 <__fixsfsi+0x68>
     90a:	56 95       	lsr	r21
     90c:	47 95       	ror	r20
     90e:	37 95       	ror	r19
     910:	27 95       	ror	r18
     912:	8a 95       	dec	r24
     914:	d2 f7       	brpl	.-12     	; 0x90a <__fixsfsi+0x60>
     916:	66 23       	and	r22, r22
     918:	b1 f0       	breq	.+44     	; 0x946 <__fixsfsi+0x9c>
     91a:	50 95       	com	r21
     91c:	40 95       	com	r20
     91e:	30 95       	com	r19
     920:	21 95       	neg	r18
     922:	3f 4f       	sbci	r19, 0xFF	; 255
     924:	4f 4f       	sbci	r20, 0xFF	; 255
     926:	5f 4f       	sbci	r21, 0xFF	; 255
     928:	0e c0       	rjmp	.+28     	; 0x946 <__fixsfsi+0x9c>
     92a:	20 e0       	ldi	r18, 0x00	; 0
     92c:	30 e0       	ldi	r19, 0x00	; 0
     92e:	40 e0       	ldi	r20, 0x00	; 0
     930:	50 e0       	ldi	r21, 0x00	; 0
     932:	09 c0       	rjmp	.+18     	; 0x946 <__fixsfsi+0x9c>
     934:	2f ef       	ldi	r18, 0xFF	; 255
     936:	3f ef       	ldi	r19, 0xFF	; 255
     938:	4f ef       	ldi	r20, 0xFF	; 255
     93a:	5f e7       	ldi	r21, 0x7F	; 127
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__fixsfsi+0x9c>
     93e:	20 e0       	ldi	r18, 0x00	; 0
     940:	30 e0       	ldi	r19, 0x00	; 0
     942:	40 e0       	ldi	r20, 0x00	; 0
     944:	50 e8       	ldi	r21, 0x80	; 128
     946:	b9 01       	movw	r22, r18
     948:	ca 01       	movw	r24, r20
     94a:	2c 96       	adiw	r28, 0x0c	; 12
     94c:	e2 e0       	ldi	r30, 0x02	; 2
     94e:	0c 94 48 1c 	jmp	0x3890	; 0x3890 <__epilogue_restores__+0x20>

00000952 <__floatunsisf>:
     952:	a8 e0       	ldi	r26, 0x08	; 8
     954:	b0 e0       	ldi	r27, 0x00	; 0
     956:	ef ea       	ldi	r30, 0xAF	; 175
     958:	f4 e0       	ldi	r31, 0x04	; 4
     95a:	0c 94 24 1c 	jmp	0x3848	; 0x3848 <__prologue_saves__+0x10>
     95e:	7b 01       	movw	r14, r22
     960:	8c 01       	movw	r16, r24
     962:	61 15       	cp	r22, r1
     964:	71 05       	cpc	r23, r1
     966:	81 05       	cpc	r24, r1
     968:	91 05       	cpc	r25, r1
     96a:	19 f4       	brne	.+6      	; 0x972 <__floatunsisf+0x20>
     96c:	82 e0       	ldi	r24, 0x02	; 2
     96e:	89 83       	std	Y+1, r24	; 0x01
     970:	60 c0       	rjmp	.+192    	; 0xa32 <__floatunsisf+0xe0>
     972:	83 e0       	ldi	r24, 0x03	; 3
     974:	89 83       	std	Y+1, r24	; 0x01
     976:	8e e1       	ldi	r24, 0x1E	; 30
     978:	c8 2e       	mov	r12, r24
     97a:	d1 2c       	mov	r13, r1
     97c:	dc 82       	std	Y+4, r13	; 0x04
     97e:	cb 82       	std	Y+3, r12	; 0x03
     980:	ed 82       	std	Y+5, r14	; 0x05
     982:	fe 82       	std	Y+6, r15	; 0x06
     984:	0f 83       	std	Y+7, r16	; 0x07
     986:	18 87       	std	Y+8, r17	; 0x08
     988:	c8 01       	movw	r24, r16
     98a:	b7 01       	movw	r22, r14
     98c:	0e 94 22 05 	call	0xa44	; 0xa44 <__clzsi2>
     990:	fc 01       	movw	r30, r24
     992:	31 97       	sbiw	r30, 0x01	; 1
     994:	f7 ff       	sbrs	r31, 7
     996:	3b c0       	rjmp	.+118    	; 0xa0e <__floatunsisf+0xbc>
     998:	22 27       	eor	r18, r18
     99a:	33 27       	eor	r19, r19
     99c:	2e 1b       	sub	r18, r30
     99e:	3f 0b       	sbc	r19, r31
     9a0:	57 01       	movw	r10, r14
     9a2:	68 01       	movw	r12, r16
     9a4:	02 2e       	mov	r0, r18
     9a6:	04 c0       	rjmp	.+8      	; 0x9b0 <__floatunsisf+0x5e>
     9a8:	d6 94       	lsr	r13
     9aa:	c7 94       	ror	r12
     9ac:	b7 94       	ror	r11
     9ae:	a7 94       	ror	r10
     9b0:	0a 94       	dec	r0
     9b2:	d2 f7       	brpl	.-12     	; 0x9a8 <__floatunsisf+0x56>
     9b4:	40 e0       	ldi	r20, 0x00	; 0
     9b6:	50 e0       	ldi	r21, 0x00	; 0
     9b8:	60 e0       	ldi	r22, 0x00	; 0
     9ba:	70 e0       	ldi	r23, 0x00	; 0
     9bc:	81 e0       	ldi	r24, 0x01	; 1
     9be:	90 e0       	ldi	r25, 0x00	; 0
     9c0:	a0 e0       	ldi	r26, 0x00	; 0
     9c2:	b0 e0       	ldi	r27, 0x00	; 0
     9c4:	04 c0       	rjmp	.+8      	; 0x9ce <__floatunsisf+0x7c>
     9c6:	88 0f       	add	r24, r24
     9c8:	99 1f       	adc	r25, r25
     9ca:	aa 1f       	adc	r26, r26
     9cc:	bb 1f       	adc	r27, r27
     9ce:	2a 95       	dec	r18
     9d0:	d2 f7       	brpl	.-12     	; 0x9c6 <__floatunsisf+0x74>
     9d2:	01 97       	sbiw	r24, 0x01	; 1
     9d4:	a1 09       	sbc	r26, r1
     9d6:	b1 09       	sbc	r27, r1
     9d8:	8e 21       	and	r24, r14
     9da:	9f 21       	and	r25, r15
     9dc:	a0 23       	and	r26, r16
     9de:	b1 23       	and	r27, r17
     9e0:	00 97       	sbiw	r24, 0x00	; 0
     9e2:	a1 05       	cpc	r26, r1
     9e4:	b1 05       	cpc	r27, r1
     9e6:	21 f0       	breq	.+8      	; 0x9f0 <__floatunsisf+0x9e>
     9e8:	41 e0       	ldi	r20, 0x01	; 1
     9ea:	50 e0       	ldi	r21, 0x00	; 0
     9ec:	60 e0       	ldi	r22, 0x00	; 0
     9ee:	70 e0       	ldi	r23, 0x00	; 0
     9f0:	4a 29       	or	r20, r10
     9f2:	5b 29       	or	r21, r11
     9f4:	6c 29       	or	r22, r12
     9f6:	7d 29       	or	r23, r13
     9f8:	4d 83       	std	Y+5, r20	; 0x05
     9fa:	5e 83       	std	Y+6, r21	; 0x06
     9fc:	6f 83       	std	Y+7, r22	; 0x07
     9fe:	78 87       	std	Y+8, r23	; 0x08
     a00:	8e e1       	ldi	r24, 0x1E	; 30
     a02:	90 e0       	ldi	r25, 0x00	; 0
     a04:	8e 1b       	sub	r24, r30
     a06:	9f 0b       	sbc	r25, r31
     a08:	9c 83       	std	Y+4, r25	; 0x04
     a0a:	8b 83       	std	Y+3, r24	; 0x03
     a0c:	12 c0       	rjmp	.+36     	; 0xa32 <__floatunsisf+0xe0>
     a0e:	30 97       	sbiw	r30, 0x00	; 0
     a10:	81 f0       	breq	.+32     	; 0xa32 <__floatunsisf+0xe0>
     a12:	0e 2e       	mov	r0, r30
     a14:	04 c0       	rjmp	.+8      	; 0xa1e <__floatunsisf+0xcc>
     a16:	ee 0c       	add	r14, r14
     a18:	ff 1c       	adc	r15, r15
     a1a:	00 1f       	adc	r16, r16
     a1c:	11 1f       	adc	r17, r17
     a1e:	0a 94       	dec	r0
     a20:	d2 f7       	brpl	.-12     	; 0xa16 <__floatunsisf+0xc4>
     a22:	ed 82       	std	Y+5, r14	; 0x05
     a24:	fe 82       	std	Y+6, r15	; 0x06
     a26:	0f 83       	std	Y+7, r16	; 0x07
     a28:	18 87       	std	Y+8, r17	; 0x08
     a2a:	ce 1a       	sub	r12, r30
     a2c:	df 0a       	sbc	r13, r31
     a2e:	dc 82       	std	Y+4, r13	; 0x04
     a30:	cb 82       	std	Y+3, r12	; 0x03
     a32:	1a 82       	std	Y+2, r1	; 0x02
     a34:	ce 01       	movw	r24, r28
     a36:	01 96       	adiw	r24, 0x01	; 1
     a38:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     a3c:	28 96       	adiw	r28, 0x08	; 8
     a3e:	ea e0       	ldi	r30, 0x0A	; 10
     a40:	0c 94 40 1c 	jmp	0x3880	; 0x3880 <__epilogue_restores__+0x10>

00000a44 <__clzsi2>:
     a44:	ef 92       	push	r14
     a46:	ff 92       	push	r15
     a48:	0f 93       	push	r16
     a4a:	1f 93       	push	r17
     a4c:	7b 01       	movw	r14, r22
     a4e:	8c 01       	movw	r16, r24
     a50:	80 e0       	ldi	r24, 0x00	; 0
     a52:	e8 16       	cp	r14, r24
     a54:	80 e0       	ldi	r24, 0x00	; 0
     a56:	f8 06       	cpc	r15, r24
     a58:	81 e0       	ldi	r24, 0x01	; 1
     a5a:	08 07       	cpc	r16, r24
     a5c:	80 e0       	ldi	r24, 0x00	; 0
     a5e:	18 07       	cpc	r17, r24
     a60:	88 f4       	brcc	.+34     	; 0xa84 <__clzsi2+0x40>
     a62:	8f ef       	ldi	r24, 0xFF	; 255
     a64:	e8 16       	cp	r14, r24
     a66:	f1 04       	cpc	r15, r1
     a68:	01 05       	cpc	r16, r1
     a6a:	11 05       	cpc	r17, r1
     a6c:	31 f0       	breq	.+12     	; 0xa7a <__clzsi2+0x36>
     a6e:	28 f0       	brcs	.+10     	; 0xa7a <__clzsi2+0x36>
     a70:	88 e0       	ldi	r24, 0x08	; 8
     a72:	90 e0       	ldi	r25, 0x00	; 0
     a74:	a0 e0       	ldi	r26, 0x00	; 0
     a76:	b0 e0       	ldi	r27, 0x00	; 0
     a78:	17 c0       	rjmp	.+46     	; 0xaa8 <__clzsi2+0x64>
     a7a:	80 e0       	ldi	r24, 0x00	; 0
     a7c:	90 e0       	ldi	r25, 0x00	; 0
     a7e:	a0 e0       	ldi	r26, 0x00	; 0
     a80:	b0 e0       	ldi	r27, 0x00	; 0
     a82:	12 c0       	rjmp	.+36     	; 0xaa8 <__clzsi2+0x64>
     a84:	80 e0       	ldi	r24, 0x00	; 0
     a86:	e8 16       	cp	r14, r24
     a88:	80 e0       	ldi	r24, 0x00	; 0
     a8a:	f8 06       	cpc	r15, r24
     a8c:	80 e0       	ldi	r24, 0x00	; 0
     a8e:	08 07       	cpc	r16, r24
     a90:	81 e0       	ldi	r24, 0x01	; 1
     a92:	18 07       	cpc	r17, r24
     a94:	28 f0       	brcs	.+10     	; 0xaa0 <__clzsi2+0x5c>
     a96:	88 e1       	ldi	r24, 0x18	; 24
     a98:	90 e0       	ldi	r25, 0x00	; 0
     a9a:	a0 e0       	ldi	r26, 0x00	; 0
     a9c:	b0 e0       	ldi	r27, 0x00	; 0
     a9e:	04 c0       	rjmp	.+8      	; 0xaa8 <__clzsi2+0x64>
     aa0:	80 e1       	ldi	r24, 0x10	; 16
     aa2:	90 e0       	ldi	r25, 0x00	; 0
     aa4:	a0 e0       	ldi	r26, 0x00	; 0
     aa6:	b0 e0       	ldi	r27, 0x00	; 0
     aa8:	20 e2       	ldi	r18, 0x20	; 32
     aaa:	30 e0       	ldi	r19, 0x00	; 0
     aac:	40 e0       	ldi	r20, 0x00	; 0
     aae:	50 e0       	ldi	r21, 0x00	; 0
     ab0:	28 1b       	sub	r18, r24
     ab2:	39 0b       	sbc	r19, r25
     ab4:	4a 0b       	sbc	r20, r26
     ab6:	5b 0b       	sbc	r21, r27
     ab8:	04 c0       	rjmp	.+8      	; 0xac2 <__clzsi2+0x7e>
     aba:	16 95       	lsr	r17
     abc:	07 95       	ror	r16
     abe:	f7 94       	ror	r15
     ac0:	e7 94       	ror	r14
     ac2:	8a 95       	dec	r24
     ac4:	d2 f7       	brpl	.-12     	; 0xaba <__clzsi2+0x76>
     ac6:	f7 01       	movw	r30, r14
     ac8:	e7 58       	subi	r30, 0x87	; 135
     aca:	ff 4f       	sbci	r31, 0xFF	; 255
     acc:	80 81       	ld	r24, Z
     ace:	28 1b       	sub	r18, r24
     ad0:	31 09       	sbc	r19, r1
     ad2:	41 09       	sbc	r20, r1
     ad4:	51 09       	sbc	r21, r1
     ad6:	c9 01       	movw	r24, r18
     ad8:	1f 91       	pop	r17
     ada:	0f 91       	pop	r16
     adc:	ff 90       	pop	r15
     ade:	ef 90       	pop	r14
     ae0:	08 95       	ret

00000ae2 <__pack_f>:
     ae2:	df 92       	push	r13
     ae4:	ef 92       	push	r14
     ae6:	ff 92       	push	r15
     ae8:	0f 93       	push	r16
     aea:	1f 93       	push	r17
     aec:	fc 01       	movw	r30, r24
     aee:	e4 80       	ldd	r14, Z+4	; 0x04
     af0:	f5 80       	ldd	r15, Z+5	; 0x05
     af2:	06 81       	ldd	r16, Z+6	; 0x06
     af4:	17 81       	ldd	r17, Z+7	; 0x07
     af6:	d1 80       	ldd	r13, Z+1	; 0x01
     af8:	80 81       	ld	r24, Z
     afa:	82 30       	cpi	r24, 0x02	; 2
     afc:	48 f4       	brcc	.+18     	; 0xb10 <__pack_f+0x2e>
     afe:	80 e0       	ldi	r24, 0x00	; 0
     b00:	90 e0       	ldi	r25, 0x00	; 0
     b02:	a0 e1       	ldi	r26, 0x10	; 16
     b04:	b0 e0       	ldi	r27, 0x00	; 0
     b06:	e8 2a       	or	r14, r24
     b08:	f9 2a       	or	r15, r25
     b0a:	0a 2b       	or	r16, r26
     b0c:	1b 2b       	or	r17, r27
     b0e:	a5 c0       	rjmp	.+330    	; 0xc5a <__pack_f+0x178>
     b10:	84 30       	cpi	r24, 0x04	; 4
     b12:	09 f4       	brne	.+2      	; 0xb16 <__pack_f+0x34>
     b14:	9f c0       	rjmp	.+318    	; 0xc54 <__pack_f+0x172>
     b16:	82 30       	cpi	r24, 0x02	; 2
     b18:	21 f4       	brne	.+8      	; 0xb22 <__pack_f+0x40>
     b1a:	ee 24       	eor	r14, r14
     b1c:	ff 24       	eor	r15, r15
     b1e:	87 01       	movw	r16, r14
     b20:	05 c0       	rjmp	.+10     	; 0xb2c <__pack_f+0x4a>
     b22:	e1 14       	cp	r14, r1
     b24:	f1 04       	cpc	r15, r1
     b26:	01 05       	cpc	r16, r1
     b28:	11 05       	cpc	r17, r1
     b2a:	19 f4       	brne	.+6      	; 0xb32 <__pack_f+0x50>
     b2c:	e0 e0       	ldi	r30, 0x00	; 0
     b2e:	f0 e0       	ldi	r31, 0x00	; 0
     b30:	96 c0       	rjmp	.+300    	; 0xc5e <__pack_f+0x17c>
     b32:	62 81       	ldd	r22, Z+2	; 0x02
     b34:	73 81       	ldd	r23, Z+3	; 0x03
     b36:	9f ef       	ldi	r25, 0xFF	; 255
     b38:	62 38       	cpi	r22, 0x82	; 130
     b3a:	79 07       	cpc	r23, r25
     b3c:	0c f0       	brlt	.+2      	; 0xb40 <__pack_f+0x5e>
     b3e:	5b c0       	rjmp	.+182    	; 0xbf6 <__pack_f+0x114>
     b40:	22 e8       	ldi	r18, 0x82	; 130
     b42:	3f ef       	ldi	r19, 0xFF	; 255
     b44:	26 1b       	sub	r18, r22
     b46:	37 0b       	sbc	r19, r23
     b48:	2a 31       	cpi	r18, 0x1A	; 26
     b4a:	31 05       	cpc	r19, r1
     b4c:	2c f0       	brlt	.+10     	; 0xb58 <__pack_f+0x76>
     b4e:	20 e0       	ldi	r18, 0x00	; 0
     b50:	30 e0       	ldi	r19, 0x00	; 0
     b52:	40 e0       	ldi	r20, 0x00	; 0
     b54:	50 e0       	ldi	r21, 0x00	; 0
     b56:	2a c0       	rjmp	.+84     	; 0xbac <__pack_f+0xca>
     b58:	b8 01       	movw	r22, r16
     b5a:	a7 01       	movw	r20, r14
     b5c:	02 2e       	mov	r0, r18
     b5e:	04 c0       	rjmp	.+8      	; 0xb68 <__pack_f+0x86>
     b60:	76 95       	lsr	r23
     b62:	67 95       	ror	r22
     b64:	57 95       	ror	r21
     b66:	47 95       	ror	r20
     b68:	0a 94       	dec	r0
     b6a:	d2 f7       	brpl	.-12     	; 0xb60 <__pack_f+0x7e>
     b6c:	81 e0       	ldi	r24, 0x01	; 1
     b6e:	90 e0       	ldi	r25, 0x00	; 0
     b70:	a0 e0       	ldi	r26, 0x00	; 0
     b72:	b0 e0       	ldi	r27, 0x00	; 0
     b74:	04 c0       	rjmp	.+8      	; 0xb7e <__pack_f+0x9c>
     b76:	88 0f       	add	r24, r24
     b78:	99 1f       	adc	r25, r25
     b7a:	aa 1f       	adc	r26, r26
     b7c:	bb 1f       	adc	r27, r27
     b7e:	2a 95       	dec	r18
     b80:	d2 f7       	brpl	.-12     	; 0xb76 <__pack_f+0x94>
     b82:	01 97       	sbiw	r24, 0x01	; 1
     b84:	a1 09       	sbc	r26, r1
     b86:	b1 09       	sbc	r27, r1
     b88:	8e 21       	and	r24, r14
     b8a:	9f 21       	and	r25, r15
     b8c:	a0 23       	and	r26, r16
     b8e:	b1 23       	and	r27, r17
     b90:	00 97       	sbiw	r24, 0x00	; 0
     b92:	a1 05       	cpc	r26, r1
     b94:	b1 05       	cpc	r27, r1
     b96:	21 f0       	breq	.+8      	; 0xba0 <__pack_f+0xbe>
     b98:	81 e0       	ldi	r24, 0x01	; 1
     b9a:	90 e0       	ldi	r25, 0x00	; 0
     b9c:	a0 e0       	ldi	r26, 0x00	; 0
     b9e:	b0 e0       	ldi	r27, 0x00	; 0
     ba0:	9a 01       	movw	r18, r20
     ba2:	ab 01       	movw	r20, r22
     ba4:	28 2b       	or	r18, r24
     ba6:	39 2b       	or	r19, r25
     ba8:	4a 2b       	or	r20, r26
     baa:	5b 2b       	or	r21, r27
     bac:	da 01       	movw	r26, r20
     bae:	c9 01       	movw	r24, r18
     bb0:	8f 77       	andi	r24, 0x7F	; 127
     bb2:	90 70       	andi	r25, 0x00	; 0
     bb4:	a0 70       	andi	r26, 0x00	; 0
     bb6:	b0 70       	andi	r27, 0x00	; 0
     bb8:	80 34       	cpi	r24, 0x40	; 64
     bba:	91 05       	cpc	r25, r1
     bbc:	a1 05       	cpc	r26, r1
     bbe:	b1 05       	cpc	r27, r1
     bc0:	39 f4       	brne	.+14     	; 0xbd0 <__pack_f+0xee>
     bc2:	27 ff       	sbrs	r18, 7
     bc4:	09 c0       	rjmp	.+18     	; 0xbd8 <__pack_f+0xf6>
     bc6:	20 5c       	subi	r18, 0xC0	; 192
     bc8:	3f 4f       	sbci	r19, 0xFF	; 255
     bca:	4f 4f       	sbci	r20, 0xFF	; 255
     bcc:	5f 4f       	sbci	r21, 0xFF	; 255
     bce:	04 c0       	rjmp	.+8      	; 0xbd8 <__pack_f+0xf6>
     bd0:	21 5c       	subi	r18, 0xC1	; 193
     bd2:	3f 4f       	sbci	r19, 0xFF	; 255
     bd4:	4f 4f       	sbci	r20, 0xFF	; 255
     bd6:	5f 4f       	sbci	r21, 0xFF	; 255
     bd8:	e0 e0       	ldi	r30, 0x00	; 0
     bda:	f0 e0       	ldi	r31, 0x00	; 0
     bdc:	20 30       	cpi	r18, 0x00	; 0
     bde:	a0 e0       	ldi	r26, 0x00	; 0
     be0:	3a 07       	cpc	r19, r26
     be2:	a0 e0       	ldi	r26, 0x00	; 0
     be4:	4a 07       	cpc	r20, r26
     be6:	a0 e4       	ldi	r26, 0x40	; 64
     be8:	5a 07       	cpc	r21, r26
     bea:	10 f0       	brcs	.+4      	; 0xbf0 <__pack_f+0x10e>
     bec:	e1 e0       	ldi	r30, 0x01	; 1
     bee:	f0 e0       	ldi	r31, 0x00	; 0
     bf0:	79 01       	movw	r14, r18
     bf2:	8a 01       	movw	r16, r20
     bf4:	27 c0       	rjmp	.+78     	; 0xc44 <__pack_f+0x162>
     bf6:	60 38       	cpi	r22, 0x80	; 128
     bf8:	71 05       	cpc	r23, r1
     bfa:	64 f5       	brge	.+88     	; 0xc54 <__pack_f+0x172>
     bfc:	fb 01       	movw	r30, r22
     bfe:	e1 58       	subi	r30, 0x81	; 129
     c00:	ff 4f       	sbci	r31, 0xFF	; 255
     c02:	d8 01       	movw	r26, r16
     c04:	c7 01       	movw	r24, r14
     c06:	8f 77       	andi	r24, 0x7F	; 127
     c08:	90 70       	andi	r25, 0x00	; 0
     c0a:	a0 70       	andi	r26, 0x00	; 0
     c0c:	b0 70       	andi	r27, 0x00	; 0
     c0e:	80 34       	cpi	r24, 0x40	; 64
     c10:	91 05       	cpc	r25, r1
     c12:	a1 05       	cpc	r26, r1
     c14:	b1 05       	cpc	r27, r1
     c16:	39 f4       	brne	.+14     	; 0xc26 <__pack_f+0x144>
     c18:	e7 fe       	sbrs	r14, 7
     c1a:	0d c0       	rjmp	.+26     	; 0xc36 <__pack_f+0x154>
     c1c:	80 e4       	ldi	r24, 0x40	; 64
     c1e:	90 e0       	ldi	r25, 0x00	; 0
     c20:	a0 e0       	ldi	r26, 0x00	; 0
     c22:	b0 e0       	ldi	r27, 0x00	; 0
     c24:	04 c0       	rjmp	.+8      	; 0xc2e <__pack_f+0x14c>
     c26:	8f e3       	ldi	r24, 0x3F	; 63
     c28:	90 e0       	ldi	r25, 0x00	; 0
     c2a:	a0 e0       	ldi	r26, 0x00	; 0
     c2c:	b0 e0       	ldi	r27, 0x00	; 0
     c2e:	e8 0e       	add	r14, r24
     c30:	f9 1e       	adc	r15, r25
     c32:	0a 1f       	adc	r16, r26
     c34:	1b 1f       	adc	r17, r27
     c36:	17 ff       	sbrs	r17, 7
     c38:	05 c0       	rjmp	.+10     	; 0xc44 <__pack_f+0x162>
     c3a:	16 95       	lsr	r17
     c3c:	07 95       	ror	r16
     c3e:	f7 94       	ror	r15
     c40:	e7 94       	ror	r14
     c42:	31 96       	adiw	r30, 0x01	; 1
     c44:	87 e0       	ldi	r24, 0x07	; 7
     c46:	16 95       	lsr	r17
     c48:	07 95       	ror	r16
     c4a:	f7 94       	ror	r15
     c4c:	e7 94       	ror	r14
     c4e:	8a 95       	dec	r24
     c50:	d1 f7       	brne	.-12     	; 0xc46 <__pack_f+0x164>
     c52:	05 c0       	rjmp	.+10     	; 0xc5e <__pack_f+0x17c>
     c54:	ee 24       	eor	r14, r14
     c56:	ff 24       	eor	r15, r15
     c58:	87 01       	movw	r16, r14
     c5a:	ef ef       	ldi	r30, 0xFF	; 255
     c5c:	f0 e0       	ldi	r31, 0x00	; 0
     c5e:	6e 2f       	mov	r22, r30
     c60:	67 95       	ror	r22
     c62:	66 27       	eor	r22, r22
     c64:	67 95       	ror	r22
     c66:	90 2f       	mov	r25, r16
     c68:	9f 77       	andi	r25, 0x7F	; 127
     c6a:	d7 94       	ror	r13
     c6c:	dd 24       	eor	r13, r13
     c6e:	d7 94       	ror	r13
     c70:	8e 2f       	mov	r24, r30
     c72:	86 95       	lsr	r24
     c74:	49 2f       	mov	r20, r25
     c76:	46 2b       	or	r20, r22
     c78:	58 2f       	mov	r21, r24
     c7a:	5d 29       	or	r21, r13
     c7c:	b7 01       	movw	r22, r14
     c7e:	ca 01       	movw	r24, r20
     c80:	1f 91       	pop	r17
     c82:	0f 91       	pop	r16
     c84:	ff 90       	pop	r15
     c86:	ef 90       	pop	r14
     c88:	df 90       	pop	r13
     c8a:	08 95       	ret

00000c8c <__unpack_f>:
     c8c:	fc 01       	movw	r30, r24
     c8e:	db 01       	movw	r26, r22
     c90:	40 81       	ld	r20, Z
     c92:	51 81       	ldd	r21, Z+1	; 0x01
     c94:	22 81       	ldd	r18, Z+2	; 0x02
     c96:	62 2f       	mov	r22, r18
     c98:	6f 77       	andi	r22, 0x7F	; 127
     c9a:	70 e0       	ldi	r23, 0x00	; 0
     c9c:	22 1f       	adc	r18, r18
     c9e:	22 27       	eor	r18, r18
     ca0:	22 1f       	adc	r18, r18
     ca2:	93 81       	ldd	r25, Z+3	; 0x03
     ca4:	89 2f       	mov	r24, r25
     ca6:	88 0f       	add	r24, r24
     ca8:	82 2b       	or	r24, r18
     caa:	28 2f       	mov	r18, r24
     cac:	30 e0       	ldi	r19, 0x00	; 0
     cae:	99 1f       	adc	r25, r25
     cb0:	99 27       	eor	r25, r25
     cb2:	99 1f       	adc	r25, r25
     cb4:	11 96       	adiw	r26, 0x01	; 1
     cb6:	9c 93       	st	X, r25
     cb8:	11 97       	sbiw	r26, 0x01	; 1
     cba:	21 15       	cp	r18, r1
     cbc:	31 05       	cpc	r19, r1
     cbe:	a9 f5       	brne	.+106    	; 0xd2a <__unpack_f+0x9e>
     cc0:	41 15       	cp	r20, r1
     cc2:	51 05       	cpc	r21, r1
     cc4:	61 05       	cpc	r22, r1
     cc6:	71 05       	cpc	r23, r1
     cc8:	11 f4       	brne	.+4      	; 0xcce <__unpack_f+0x42>
     cca:	82 e0       	ldi	r24, 0x02	; 2
     ccc:	37 c0       	rjmp	.+110    	; 0xd3c <__unpack_f+0xb0>
     cce:	82 e8       	ldi	r24, 0x82	; 130
     cd0:	9f ef       	ldi	r25, 0xFF	; 255
     cd2:	13 96       	adiw	r26, 0x03	; 3
     cd4:	9c 93       	st	X, r25
     cd6:	8e 93       	st	-X, r24
     cd8:	12 97       	sbiw	r26, 0x02	; 2
     cda:	9a 01       	movw	r18, r20
     cdc:	ab 01       	movw	r20, r22
     cde:	67 e0       	ldi	r22, 0x07	; 7
     ce0:	22 0f       	add	r18, r18
     ce2:	33 1f       	adc	r19, r19
     ce4:	44 1f       	adc	r20, r20
     ce6:	55 1f       	adc	r21, r21
     ce8:	6a 95       	dec	r22
     cea:	d1 f7       	brne	.-12     	; 0xce0 <__unpack_f+0x54>
     cec:	83 e0       	ldi	r24, 0x03	; 3
     cee:	8c 93       	st	X, r24
     cf0:	0d c0       	rjmp	.+26     	; 0xd0c <__unpack_f+0x80>
     cf2:	22 0f       	add	r18, r18
     cf4:	33 1f       	adc	r19, r19
     cf6:	44 1f       	adc	r20, r20
     cf8:	55 1f       	adc	r21, r21
     cfa:	12 96       	adiw	r26, 0x02	; 2
     cfc:	8d 91       	ld	r24, X+
     cfe:	9c 91       	ld	r25, X
     d00:	13 97       	sbiw	r26, 0x03	; 3
     d02:	01 97       	sbiw	r24, 0x01	; 1
     d04:	13 96       	adiw	r26, 0x03	; 3
     d06:	9c 93       	st	X, r25
     d08:	8e 93       	st	-X, r24
     d0a:	12 97       	sbiw	r26, 0x02	; 2
     d0c:	20 30       	cpi	r18, 0x00	; 0
     d0e:	80 e0       	ldi	r24, 0x00	; 0
     d10:	38 07       	cpc	r19, r24
     d12:	80 e0       	ldi	r24, 0x00	; 0
     d14:	48 07       	cpc	r20, r24
     d16:	80 e4       	ldi	r24, 0x40	; 64
     d18:	58 07       	cpc	r21, r24
     d1a:	58 f3       	brcs	.-42     	; 0xcf2 <__unpack_f+0x66>
     d1c:	14 96       	adiw	r26, 0x04	; 4
     d1e:	2d 93       	st	X+, r18
     d20:	3d 93       	st	X+, r19
     d22:	4d 93       	st	X+, r20
     d24:	5c 93       	st	X, r21
     d26:	17 97       	sbiw	r26, 0x07	; 7
     d28:	08 95       	ret
     d2a:	2f 3f       	cpi	r18, 0xFF	; 255
     d2c:	31 05       	cpc	r19, r1
     d2e:	79 f4       	brne	.+30     	; 0xd4e <__unpack_f+0xc2>
     d30:	41 15       	cp	r20, r1
     d32:	51 05       	cpc	r21, r1
     d34:	61 05       	cpc	r22, r1
     d36:	71 05       	cpc	r23, r1
     d38:	19 f4       	brne	.+6      	; 0xd40 <__unpack_f+0xb4>
     d3a:	84 e0       	ldi	r24, 0x04	; 4
     d3c:	8c 93       	st	X, r24
     d3e:	08 95       	ret
     d40:	64 ff       	sbrs	r22, 4
     d42:	03 c0       	rjmp	.+6      	; 0xd4a <__unpack_f+0xbe>
     d44:	81 e0       	ldi	r24, 0x01	; 1
     d46:	8c 93       	st	X, r24
     d48:	12 c0       	rjmp	.+36     	; 0xd6e <__unpack_f+0xe2>
     d4a:	1c 92       	st	X, r1
     d4c:	10 c0       	rjmp	.+32     	; 0xd6e <__unpack_f+0xe2>
     d4e:	2f 57       	subi	r18, 0x7F	; 127
     d50:	30 40       	sbci	r19, 0x00	; 0
     d52:	13 96       	adiw	r26, 0x03	; 3
     d54:	3c 93       	st	X, r19
     d56:	2e 93       	st	-X, r18
     d58:	12 97       	sbiw	r26, 0x02	; 2
     d5a:	83 e0       	ldi	r24, 0x03	; 3
     d5c:	8c 93       	st	X, r24
     d5e:	87 e0       	ldi	r24, 0x07	; 7
     d60:	44 0f       	add	r20, r20
     d62:	55 1f       	adc	r21, r21
     d64:	66 1f       	adc	r22, r22
     d66:	77 1f       	adc	r23, r23
     d68:	8a 95       	dec	r24
     d6a:	d1 f7       	brne	.-12     	; 0xd60 <__unpack_f+0xd4>
     d6c:	70 64       	ori	r23, 0x40	; 64
     d6e:	14 96       	adiw	r26, 0x04	; 4
     d70:	4d 93       	st	X+, r20
     d72:	5d 93       	st	X+, r21
     d74:	6d 93       	st	X+, r22
     d76:	7c 93       	st	X, r23
     d78:	17 97       	sbiw	r26, 0x07	; 7
     d7a:	08 95       	ret

00000d7c <__fpcmp_parts_f>:
     d7c:	1f 93       	push	r17
     d7e:	dc 01       	movw	r26, r24
     d80:	fb 01       	movw	r30, r22
     d82:	9c 91       	ld	r25, X
     d84:	92 30       	cpi	r25, 0x02	; 2
     d86:	08 f4       	brcc	.+2      	; 0xd8a <__fpcmp_parts_f+0xe>
     d88:	47 c0       	rjmp	.+142    	; 0xe18 <__fpcmp_parts_f+0x9c>
     d8a:	80 81       	ld	r24, Z
     d8c:	82 30       	cpi	r24, 0x02	; 2
     d8e:	08 f4       	brcc	.+2      	; 0xd92 <__fpcmp_parts_f+0x16>
     d90:	43 c0       	rjmp	.+134    	; 0xe18 <__fpcmp_parts_f+0x9c>
     d92:	94 30       	cpi	r25, 0x04	; 4
     d94:	51 f4       	brne	.+20     	; 0xdaa <__fpcmp_parts_f+0x2e>
     d96:	11 96       	adiw	r26, 0x01	; 1
     d98:	1c 91       	ld	r17, X
     d9a:	84 30       	cpi	r24, 0x04	; 4
     d9c:	99 f5       	brne	.+102    	; 0xe04 <__fpcmp_parts_f+0x88>
     d9e:	81 81       	ldd	r24, Z+1	; 0x01
     da0:	68 2f       	mov	r22, r24
     da2:	70 e0       	ldi	r23, 0x00	; 0
     da4:	61 1b       	sub	r22, r17
     da6:	71 09       	sbc	r23, r1
     da8:	3f c0       	rjmp	.+126    	; 0xe28 <__fpcmp_parts_f+0xac>
     daa:	84 30       	cpi	r24, 0x04	; 4
     dac:	21 f0       	breq	.+8      	; 0xdb6 <__fpcmp_parts_f+0x3a>
     dae:	92 30       	cpi	r25, 0x02	; 2
     db0:	31 f4       	brne	.+12     	; 0xdbe <__fpcmp_parts_f+0x42>
     db2:	82 30       	cpi	r24, 0x02	; 2
     db4:	b9 f1       	breq	.+110    	; 0xe24 <__fpcmp_parts_f+0xa8>
     db6:	81 81       	ldd	r24, Z+1	; 0x01
     db8:	88 23       	and	r24, r24
     dba:	89 f1       	breq	.+98     	; 0xe1e <__fpcmp_parts_f+0xa2>
     dbc:	2d c0       	rjmp	.+90     	; 0xe18 <__fpcmp_parts_f+0x9c>
     dbe:	11 96       	adiw	r26, 0x01	; 1
     dc0:	1c 91       	ld	r17, X
     dc2:	11 97       	sbiw	r26, 0x01	; 1
     dc4:	82 30       	cpi	r24, 0x02	; 2
     dc6:	f1 f0       	breq	.+60     	; 0xe04 <__fpcmp_parts_f+0x88>
     dc8:	81 81       	ldd	r24, Z+1	; 0x01
     dca:	18 17       	cp	r17, r24
     dcc:	d9 f4       	brne	.+54     	; 0xe04 <__fpcmp_parts_f+0x88>
     dce:	12 96       	adiw	r26, 0x02	; 2
     dd0:	2d 91       	ld	r18, X+
     dd2:	3c 91       	ld	r19, X
     dd4:	13 97       	sbiw	r26, 0x03	; 3
     dd6:	82 81       	ldd	r24, Z+2	; 0x02
     dd8:	93 81       	ldd	r25, Z+3	; 0x03
     dda:	82 17       	cp	r24, r18
     ddc:	93 07       	cpc	r25, r19
     dde:	94 f0       	brlt	.+36     	; 0xe04 <__fpcmp_parts_f+0x88>
     de0:	28 17       	cp	r18, r24
     de2:	39 07       	cpc	r19, r25
     de4:	bc f0       	brlt	.+46     	; 0xe14 <__fpcmp_parts_f+0x98>
     de6:	14 96       	adiw	r26, 0x04	; 4
     de8:	8d 91       	ld	r24, X+
     dea:	9d 91       	ld	r25, X+
     dec:	0d 90       	ld	r0, X+
     dee:	bc 91       	ld	r27, X
     df0:	a0 2d       	mov	r26, r0
     df2:	24 81       	ldd	r18, Z+4	; 0x04
     df4:	35 81       	ldd	r19, Z+5	; 0x05
     df6:	46 81       	ldd	r20, Z+6	; 0x06
     df8:	57 81       	ldd	r21, Z+7	; 0x07
     dfa:	28 17       	cp	r18, r24
     dfc:	39 07       	cpc	r19, r25
     dfe:	4a 07       	cpc	r20, r26
     e00:	5b 07       	cpc	r21, r27
     e02:	18 f4       	brcc	.+6      	; 0xe0a <__fpcmp_parts_f+0x8e>
     e04:	11 23       	and	r17, r17
     e06:	41 f0       	breq	.+16     	; 0xe18 <__fpcmp_parts_f+0x9c>
     e08:	0a c0       	rjmp	.+20     	; 0xe1e <__fpcmp_parts_f+0xa2>
     e0a:	82 17       	cp	r24, r18
     e0c:	93 07       	cpc	r25, r19
     e0e:	a4 07       	cpc	r26, r20
     e10:	b5 07       	cpc	r27, r21
     e12:	40 f4       	brcc	.+16     	; 0xe24 <__fpcmp_parts_f+0xa8>
     e14:	11 23       	and	r17, r17
     e16:	19 f0       	breq	.+6      	; 0xe1e <__fpcmp_parts_f+0xa2>
     e18:	61 e0       	ldi	r22, 0x01	; 1
     e1a:	70 e0       	ldi	r23, 0x00	; 0
     e1c:	05 c0       	rjmp	.+10     	; 0xe28 <__fpcmp_parts_f+0xac>
     e1e:	6f ef       	ldi	r22, 0xFF	; 255
     e20:	7f ef       	ldi	r23, 0xFF	; 255
     e22:	02 c0       	rjmp	.+4      	; 0xe28 <__fpcmp_parts_f+0xac>
     e24:	60 e0       	ldi	r22, 0x00	; 0
     e26:	70 e0       	ldi	r23, 0x00	; 0
     e28:	cb 01       	movw	r24, r22
     e2a:	1f 91       	pop	r17
     e2c:	08 95       	ret

00000e2e <GIE_VoidEnable>:

#include "GIE_interface.h"
#include "GIE_register.h"

void GIE_VoidEnable (void)
{
     e2e:	df 93       	push	r29
     e30:	cf 93       	push	r28
     e32:	cd b7       	in	r28, 0x3d	; 61
     e34:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(GIE_SREG,GIE_SREG_I);
     e36:	af e5       	ldi	r26, 0x5F	; 95
     e38:	b0 e0       	ldi	r27, 0x00	; 0
     e3a:	ef e5       	ldi	r30, 0x5F	; 95
     e3c:	f0 e0       	ldi	r31, 0x00	; 0
     e3e:	80 81       	ld	r24, Z
     e40:	80 68       	ori	r24, 0x80	; 128
     e42:	8c 93       	st	X, r24
}
     e44:	cf 91       	pop	r28
     e46:	df 91       	pop	r29
     e48:	08 95       	ret

00000e4a <GIE_VoidDisable>:

void GIE_VoidDisable (void)
{
     e4a:	df 93       	push	r29
     e4c:	cf 93       	push	r28
     e4e:	cd b7       	in	r28, 0x3d	; 61
     e50:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(GIE_SREG,GIE_SREG_I);
     e52:	af e5       	ldi	r26, 0x5F	; 95
     e54:	b0 e0       	ldi	r27, 0x00	; 0
     e56:	ef e5       	ldi	r30, 0x5F	; 95
     e58:	f0 e0       	ldi	r31, 0x00	; 0
     e5a:	80 81       	ld	r24, Z
     e5c:	8f 77       	andi	r24, 0x7F	; 127
     e5e:	8c 93       	st	X, r24
}
     e60:	cf 91       	pop	r28
     e62:	df 91       	pop	r29
     e64:	08 95       	ret

00000e66 <EXTI0_VoidInit>:


static void (*GPTF[3])(void);

void EXTI0_VoidInit(void)
{
     e66:	df 93       	push	r29
     e68:	cf 93       	push	r28
     e6a:	cd b7       	in	r28, 0x3d	; 61
     e6c:	de b7       	in	r29, 0x3e	; 62
	/*Set INT0 pin to input and enable the internal Pull up*/
	DIO_VoidSetPinDirection(EXTI0_PORT,EXTI0_PIN,DIO_INPUT);
     e6e:	84 e0       	ldi	r24, 0x04	; 4
     e70:	62 e0       	ldi	r22, 0x02	; 2
     e72:	40 e0       	ldi	r20, 0x00	; 0
     e74:	0e 94 8d 09 	call	0x131a	; 0x131a <DIO_VoidSetPinDirection>
	DIO_VoidSetPinVal(EXTI0_PORT, EXTI0_PIN, DIO_HIGH);
     e78:	84 e0       	ldi	r24, 0x04	; 4
     e7a:	62 e0       	ldi	r22, 0x02	; 2
     e7c:	41 e0       	ldi	r20, 0x01	; 1
     e7e:	0e 94 97 0a 	call	0x152e	; 0x152e <DIO_VoidSetPinVal>
	/*set INT0 bit in GICR --> enable external interrupt of pin 0*/
	SET_BIT(EXTI_GICR, EXTI_INT0);
     e82:	ab e5       	ldi	r26, 0x5B	; 91
     e84:	b0 e0       	ldi	r27, 0x00	; 0
     e86:	eb e5       	ldi	r30, 0x5B	; 91
     e88:	f0 e0       	ldi	r31, 0x00	; 0
     e8a:	80 81       	ld	r24, Z
     e8c:	80 64       	ori	r24, 0x40	; 64
     e8e:	8c 93       	st	X, r24
#elif EXTI0_TriggerMode == EXTI_OnChangeEdge
	CLR_BIT(EXTI_MCUCR, EXTI_ISC00);
	CLR_BIT(EXTI_MCUCR, EXTI_ISC01);

#elif EXTI0_TriggerMode == EXTI_FallingEdge
	CLR_BIT(EXTI_MCUCR, EXTI_ISC00);
     e90:	a5 e5       	ldi	r26, 0x55	; 85
     e92:	b0 e0       	ldi	r27, 0x00	; 0
     e94:	e5 e5       	ldi	r30, 0x55	; 85
     e96:	f0 e0       	ldi	r31, 0x00	; 0
     e98:	80 81       	ld	r24, Z
     e9a:	8e 7f       	andi	r24, 0xFE	; 254
     e9c:	8c 93       	st	X, r24
	SET_BIT(EXTI_MCUCR, EXTI_ISC01);
     e9e:	a5 e5       	ldi	r26, 0x55	; 85
     ea0:	b0 e0       	ldi	r27, 0x00	; 0
     ea2:	e5 e5       	ldi	r30, 0x55	; 85
     ea4:	f0 e0       	ldi	r31, 0x00	; 0
     ea6:	80 81       	ld	r24, Z
     ea8:	82 60       	ori	r24, 0x02	; 2
     eaa:	8c 93       	st	X, r24

#elif EXTI0_TriggerMode == EXTI_RisingEdge
	SET_BIT(EXTI_MCUCR, EXTI_ISC00);
	SET_BIT(EXTI_MCUCR, EXTI_ISC01);
#endif
}
     eac:	cf 91       	pop	r28
     eae:	df 91       	pop	r29
     eb0:	08 95       	ret

00000eb2 <EXTI1_VoidInit>:

void EXTI1_VoidInit(void)
{
     eb2:	df 93       	push	r29
     eb4:	cf 93       	push	r28
     eb6:	cd b7       	in	r28, 0x3d	; 61
     eb8:	de b7       	in	r29, 0x3e	; 62
	/*Set INT1 pin to input and enable the internal Pull up*/
	DIO_VoidSetPinDirection(EXTI1_PORT,EXTI1_PIN,DIO_INPUT);
     eba:	84 e0       	ldi	r24, 0x04	; 4
     ebc:	63 e0       	ldi	r22, 0x03	; 3
     ebe:	40 e0       	ldi	r20, 0x00	; 0
     ec0:	0e 94 8d 09 	call	0x131a	; 0x131a <DIO_VoidSetPinDirection>
	DIO_VoidSetPinVal(EXTI1_PORT, EXTI1_PIN, DIO_HIGH);
     ec4:	84 e0       	ldi	r24, 0x04	; 4
     ec6:	63 e0       	ldi	r22, 0x03	; 3
     ec8:	41 e0       	ldi	r20, 0x01	; 1
     eca:	0e 94 97 0a 	call	0x152e	; 0x152e <DIO_VoidSetPinVal>
	/*set INT1 bit in GICR --> enable external interrupt of pin 1*/
	SET_BIT(EXTI_GICR, EXTI_INT1);
     ece:	ab e5       	ldi	r26, 0x5B	; 91
     ed0:	b0 e0       	ldi	r27, 0x00	; 0
     ed2:	eb e5       	ldi	r30, 0x5B	; 91
     ed4:	f0 e0       	ldi	r31, 0x00	; 0
     ed6:	80 81       	ld	r24, Z
     ed8:	80 68       	ori	r24, 0x80	; 128
     eda:	8c 93       	st	X, r24
	CLR_BIT(EXTI_MCUCR, EXTI_ISC11);
#elif EXTI1_TriggerMode == EXTI_FallingEdge
	CLR_BIT(EXTI_MCUCR, EXTI_ISC10);
	SET_BIT(EXTI_MCUCR, EXTI_ISC11);
#elif EXTI1_TriggerMode == EXTI_RisingEdge
	SET_BIT(EXTI_MCUCR, EXTI_ISC10);
     edc:	a5 e5       	ldi	r26, 0x55	; 85
     ede:	b0 e0       	ldi	r27, 0x00	; 0
     ee0:	e5 e5       	ldi	r30, 0x55	; 85
     ee2:	f0 e0       	ldi	r31, 0x00	; 0
     ee4:	80 81       	ld	r24, Z
     ee6:	84 60       	ori	r24, 0x04	; 4
     ee8:	8c 93       	st	X, r24
	SET_BIT(EXTI_MCUCR, EXTI_ISC11);
     eea:	a5 e5       	ldi	r26, 0x55	; 85
     eec:	b0 e0       	ldi	r27, 0x00	; 0
     eee:	e5 e5       	ldi	r30, 0x55	; 85
     ef0:	f0 e0       	ldi	r31, 0x00	; 0
     ef2:	80 81       	ld	r24, Z
     ef4:	88 60       	ori	r24, 0x08	; 8
     ef6:	8c 93       	st	X, r24
#endif
}
     ef8:	cf 91       	pop	r28
     efa:	df 91       	pop	r29
     efc:	08 95       	ret

00000efe <EXTI2_VoidInit>:

void EXTI2_VoidInit(void)
{
     efe:	df 93       	push	r29
     f00:	cf 93       	push	r28
     f02:	cd b7       	in	r28, 0x3d	; 61
     f04:	de b7       	in	r29, 0x3e	; 62
	/*Set INT1 pin to input and enable the internal Pull up*/
	DIO_VoidSetPinDirection(EXTI2_PORT,EXTI2_PIN,DIO_INPUT);
     f06:	81 e0       	ldi	r24, 0x01	; 1
     f08:	62 e0       	ldi	r22, 0x02	; 2
     f0a:	40 e0       	ldi	r20, 0x00	; 0
     f0c:	0e 94 8d 09 	call	0x131a	; 0x131a <DIO_VoidSetPinDirection>
	DIO_VoidSetPinVal(EXTI1_PORT, EXTI2_PIN, DIO_HIGH);
     f10:	84 e0       	ldi	r24, 0x04	; 4
     f12:	62 e0       	ldi	r22, 0x02	; 2
     f14:	41 e0       	ldi	r20, 0x01	; 1
     f16:	0e 94 97 0a 	call	0x152e	; 0x152e <DIO_VoidSetPinVal>
	/*set INT1 bit in GICR --> enable external interrupt of pin 1*/
	SET_BIT(EXTI_GICR, EXTI_INT2);
     f1a:	ab e5       	ldi	r26, 0x5B	; 91
     f1c:	b0 e0       	ldi	r27, 0x00	; 0
     f1e:	eb e5       	ldi	r30, 0x5B	; 91
     f20:	f0 e0       	ldi	r31, 0x00	; 0
     f22:	80 81       	ld	r24, Z
     f24:	80 62       	ori	r24, 0x20	; 32
     f26:	8c 93       	st	X, r24

#if EXTI2_TriggerMode == EXTI_FallingEdge
	CLR_BIT(EXTI_MCUCR, EXTI_ISC2);
#elif EXTI2_TriggerMode == EXTI_RisingEdge
	SET_BIT(EXTI_MCUCR, EXTI_ISC2);
     f28:	a5 e5       	ldi	r26, 0x55	; 85
     f2a:	b0 e0       	ldi	r27, 0x00	; 0
     f2c:	e5 e5       	ldi	r30, 0x55	; 85
     f2e:	f0 e0       	ldi	r31, 0x00	; 0
     f30:	80 81       	ld	r24, Z
     f32:	80 64       	ori	r24, 0x40	; 64
     f34:	8c 93       	st	X, r24
#endif
}
     f36:	cf 91       	pop	r28
     f38:	df 91       	pop	r29
     f3a:	08 95       	ret

00000f3c <EXT_VoidInit>:

void EXT_VoidInit(u8 Local_INT_number, u8 Local_ControlState)
{
     f3c:	df 93       	push	r29
     f3e:	cf 93       	push	r28
     f40:	00 d0       	rcall	.+0      	; 0xf42 <EXT_VoidInit+0x6>
     f42:	00 d0       	rcall	.+0      	; 0xf44 <EXT_VoidInit+0x8>
     f44:	cd b7       	in	r28, 0x3d	; 61
     f46:	de b7       	in	r29, 0x3e	; 62
     f48:	89 83       	std	Y+1, r24	; 0x01
     f4a:	6a 83       	std	Y+2, r22	; 0x02
	switch(Local_INT_number)
     f4c:	89 81       	ldd	r24, Y+1	; 0x01
     f4e:	28 2f       	mov	r18, r24
     f50:	30 e0       	ldi	r19, 0x00	; 0
     f52:	3c 83       	std	Y+4, r19	; 0x04
     f54:	2b 83       	std	Y+3, r18	; 0x03
     f56:	8b 81       	ldd	r24, Y+3	; 0x03
     f58:	9c 81       	ldd	r25, Y+4	; 0x04
     f5a:	86 30       	cpi	r24, 0x06	; 6
     f5c:	91 05       	cpc	r25, r1
     f5e:	59 f0       	breq	.+22     	; 0xf76 <EXT_VoidInit+0x3a>
     f60:	2b 81       	ldd	r18, Y+3	; 0x03
     f62:	3c 81       	ldd	r19, Y+4	; 0x04
     f64:	27 30       	cpi	r18, 0x07	; 7
     f66:	31 05       	cpc	r19, r1
     f68:	e1 f0       	breq	.+56     	; 0xfa2 <EXT_VoidInit+0x66>
     f6a:	8b 81       	ldd	r24, Y+3	; 0x03
     f6c:	9c 81       	ldd	r25, Y+4	; 0x04
     f6e:	85 30       	cpi	r24, 0x05	; 5
     f70:	91 05       	cpc	r25, r1
     f72:	69 f1       	breq	.+90     	; 0xfce <EXT_VoidInit+0x92>
     f74:	41 c0       	rjmp	.+130    	; 0xff8 <EXT_VoidInit+0xbc>
	{
	case EXTI_INT0:
		/*Set INT0 pin to input and enable the internal Pull up*/
		DIO_VoidSetPinDirection(EXTI0_PORT,EXTI0_PIN,DIO_INPUT);
     f76:	84 e0       	ldi	r24, 0x04	; 4
     f78:	62 e0       	ldi	r22, 0x02	; 2
     f7a:	40 e0       	ldi	r20, 0x00	; 0
     f7c:	0e 94 8d 09 	call	0x131a	; 0x131a <DIO_VoidSetPinDirection>
		DIO_VoidSetPinVal(EXTI0_PORT, EXTI0_PIN, DIO_HIGH);
     f80:	84 e0       	ldi	r24, 0x04	; 4
     f82:	62 e0       	ldi	r22, 0x02	; 2
     f84:	41 e0       	ldi	r20, 0x01	; 1
     f86:	0e 94 97 0a 	call	0x152e	; 0x152e <DIO_VoidSetPinVal>
		/*set INT0 bit in GICR --> enable external interrupt of pin 0*/
		SET_BIT(EXTI_GICR, EXTI_INT0);
     f8a:	ab e5       	ldi	r26, 0x5B	; 91
     f8c:	b0 e0       	ldi	r27, 0x00	; 0
     f8e:	eb e5       	ldi	r30, 0x5B	; 91
     f90:	f0 e0       	ldi	r31, 0x00	; 0
     f92:	80 81       	ld	r24, Z
     f94:	80 64       	ori	r24, 0x40	; 64
     f96:	8c 93       	st	X, r24
		EXT_VoidSetSenceControl(Local_INT_number,Local_ControlState);
     f98:	89 81       	ldd	r24, Y+1	; 0x01
     f9a:	6a 81       	ldd	r22, Y+2	; 0x02
     f9c:	0e 94 03 08 	call	0x1006	; 0x1006 <EXT_VoidSetSenceControl>
     fa0:	2b c0       	rjmp	.+86     	; 0xff8 <EXT_VoidInit+0xbc>
		break;
	case EXTI_INT1:
		/*Set INT1 pin to input and enable the internal Pull up*/
		DIO_VoidSetPinDirection(EXTI1_PORT,EXTI1_PIN,DIO_INPUT);
     fa2:	84 e0       	ldi	r24, 0x04	; 4
     fa4:	63 e0       	ldi	r22, 0x03	; 3
     fa6:	40 e0       	ldi	r20, 0x00	; 0
     fa8:	0e 94 8d 09 	call	0x131a	; 0x131a <DIO_VoidSetPinDirection>
		DIO_VoidSetPinVal(EXTI1_PORT, EXTI1_PIN, DIO_HIGH);
     fac:	84 e0       	ldi	r24, 0x04	; 4
     fae:	63 e0       	ldi	r22, 0x03	; 3
     fb0:	41 e0       	ldi	r20, 0x01	; 1
     fb2:	0e 94 97 0a 	call	0x152e	; 0x152e <DIO_VoidSetPinVal>
		/*set INT1 bit in GICR --> enable external interrupt of pin 1*/
		SET_BIT(EXTI_GICR, EXTI_INT1);
     fb6:	ab e5       	ldi	r26, 0x5B	; 91
     fb8:	b0 e0       	ldi	r27, 0x00	; 0
     fba:	eb e5       	ldi	r30, 0x5B	; 91
     fbc:	f0 e0       	ldi	r31, 0x00	; 0
     fbe:	80 81       	ld	r24, Z
     fc0:	80 68       	ori	r24, 0x80	; 128
     fc2:	8c 93       	st	X, r24
		EXT_VoidSetSenceControl(Local_INT_number,Local_ControlState);
     fc4:	89 81       	ldd	r24, Y+1	; 0x01
     fc6:	6a 81       	ldd	r22, Y+2	; 0x02
     fc8:	0e 94 03 08 	call	0x1006	; 0x1006 <EXT_VoidSetSenceControl>
     fcc:	15 c0       	rjmp	.+42     	; 0xff8 <EXT_VoidInit+0xbc>
		break;
	case EXTI_INT2:
		/*Set INT1 pin to input and enable the internal Pull up*/
		DIO_VoidSetPinDirection(EXTI2_PORT,EXTI2_PIN,DIO_INPUT);
     fce:	81 e0       	ldi	r24, 0x01	; 1
     fd0:	62 e0       	ldi	r22, 0x02	; 2
     fd2:	40 e0       	ldi	r20, 0x00	; 0
     fd4:	0e 94 8d 09 	call	0x131a	; 0x131a <DIO_VoidSetPinDirection>
		DIO_VoidSetPinVal(EXTI1_PORT, EXTI2_PIN, DIO_HIGH);
     fd8:	84 e0       	ldi	r24, 0x04	; 4
     fda:	62 e0       	ldi	r22, 0x02	; 2
     fdc:	41 e0       	ldi	r20, 0x01	; 1
     fde:	0e 94 97 0a 	call	0x152e	; 0x152e <DIO_VoidSetPinVal>
		/*set INT1 bit in GICR --> enable external interrupt of pin 1*/
		SET_BIT(EXTI_GICR, EXTI_INT2);
     fe2:	ab e5       	ldi	r26, 0x5B	; 91
     fe4:	b0 e0       	ldi	r27, 0x00	; 0
     fe6:	eb e5       	ldi	r30, 0x5B	; 91
     fe8:	f0 e0       	ldi	r31, 0x00	; 0
     fea:	80 81       	ld	r24, Z
     fec:	80 62       	ori	r24, 0x20	; 32
     fee:	8c 93       	st	X, r24
		EXT_VoidSetSenceControl(Local_INT_number,Local_ControlState);
     ff0:	89 81       	ldd	r24, Y+1	; 0x01
     ff2:	6a 81       	ldd	r22, Y+2	; 0x02
     ff4:	0e 94 03 08 	call	0x1006	; 0x1006 <EXT_VoidSetSenceControl>
		break;

	}
}
     ff8:	0f 90       	pop	r0
     ffa:	0f 90       	pop	r0
     ffc:	0f 90       	pop	r0
     ffe:	0f 90       	pop	r0
    1000:	cf 91       	pop	r28
    1002:	df 91       	pop	r29
    1004:	08 95       	ret

00001006 <EXT_VoidSetSenceControl>:

void EXT_VoidSetSenceControl(u8 Local_INT_number, u8 Local_ControlState)
{
    1006:	df 93       	push	r29
    1008:	cf 93       	push	r28
    100a:	00 d0       	rcall	.+0      	; 0x100c <EXT_VoidSetSenceControl+0x6>
    100c:	00 d0       	rcall	.+0      	; 0x100e <EXT_VoidSetSenceControl+0x8>
    100e:	cd b7       	in	r28, 0x3d	; 61
    1010:	de b7       	in	r29, 0x3e	; 62
    1012:	89 83       	std	Y+1, r24	; 0x01
    1014:	6a 83       	std	Y+2, r22	; 0x02
	switch(Local_INT_number)
    1016:	89 81       	ldd	r24, Y+1	; 0x01
    1018:	28 2f       	mov	r18, r24
    101a:	30 e0       	ldi	r19, 0x00	; 0
    101c:	3c 83       	std	Y+4, r19	; 0x04
    101e:	2b 83       	std	Y+3, r18	; 0x03
    1020:	8b 81       	ldd	r24, Y+3	; 0x03
    1022:	9c 81       	ldd	r25, Y+4	; 0x04
    1024:	86 30       	cpi	r24, 0x06	; 6
    1026:	91 05       	cpc	r25, r1
    1028:	59 f0       	breq	.+22     	; 0x1040 <EXT_VoidSetSenceControl+0x3a>
    102a:	2b 81       	ldd	r18, Y+3	; 0x03
    102c:	3c 81       	ldd	r19, Y+4	; 0x04
    102e:	27 30       	cpi	r18, 0x07	; 7
    1030:	31 05       	cpc	r19, r1
    1032:	a9 f0       	breq	.+42     	; 0x105e <EXT_VoidSetSenceControl+0x58>
    1034:	8b 81       	ldd	r24, Y+3	; 0x03
    1036:	9c 81       	ldd	r25, Y+4	; 0x04
    1038:	85 30       	cpi	r24, 0x05	; 5
    103a:	91 05       	cpc	r25, r1
    103c:	f9 f0       	breq	.+62     	; 0x107c <EXT_VoidSetSenceControl+0x76>
    103e:	25 c0       	rjmp	.+74     	; 0x108a <EXT_VoidSetSenceControl+0x84>
			SET_BIT(EXTI_MCUCR, EXTI_ISC00);
			CLR_BIT(EXTI_MCUCR, EXTI_ISC01);
		}
		else if(EXTI0_TriggerMode == EXTI_FallingEdge)
		{
			CLR_BIT(EXTI_MCUCR, EXTI_ISC00);
    1040:	a5 e5       	ldi	r26, 0x55	; 85
    1042:	b0 e0       	ldi	r27, 0x00	; 0
    1044:	e5 e5       	ldi	r30, 0x55	; 85
    1046:	f0 e0       	ldi	r31, 0x00	; 0
    1048:	80 81       	ld	r24, Z
    104a:	8e 7f       	andi	r24, 0xFE	; 254
    104c:	8c 93       	st	X, r24
			SET_BIT(EXTI_MCUCR, EXTI_ISC01);
    104e:	a5 e5       	ldi	r26, 0x55	; 85
    1050:	b0 e0       	ldi	r27, 0x00	; 0
    1052:	e5 e5       	ldi	r30, 0x55	; 85
    1054:	f0 e0       	ldi	r31, 0x00	; 0
    1056:	80 81       	ld	r24, Z
    1058:	82 60       	ori	r24, 0x02	; 2
    105a:	8c 93       	st	X, r24
    105c:	16 c0       	rjmp	.+44     	; 0x108a <EXT_VoidSetSenceControl+0x84>
			CLR_BIT(EXTI_MCUCR, EXTI_ISC11);
		}

		else if(EXTI0_TriggerMode == EXTI_FallingEdge)
		{
			CLR_BIT(EXTI_MCUCR, EXTI_ISC10);
    105e:	a5 e5       	ldi	r26, 0x55	; 85
    1060:	b0 e0       	ldi	r27, 0x00	; 0
    1062:	e5 e5       	ldi	r30, 0x55	; 85
    1064:	f0 e0       	ldi	r31, 0x00	; 0
    1066:	80 81       	ld	r24, Z
    1068:	8b 7f       	andi	r24, 0xFB	; 251
    106a:	8c 93       	st	X, r24
			SET_BIT(EXTI_MCUCR, EXTI_ISC11);
    106c:	a5 e5       	ldi	r26, 0x55	; 85
    106e:	b0 e0       	ldi	r27, 0x00	; 0
    1070:	e5 e5       	ldi	r30, 0x55	; 85
    1072:	f0 e0       	ldi	r31, 0x00	; 0
    1074:	80 81       	ld	r24, Z
    1076:	88 60       	ori	r24, 0x08	; 8
    1078:	8c 93       	st	X, r24
    107a:	07 c0       	rjmp	.+14     	; 0x108a <EXT_VoidSetSenceControl+0x84>
		{
			CLR_BIT(EXTI_MCUCR, EXTI_ISC2);
		}
		else if(EXTI2_TriggerMode == EXTI_RisingEdge)
		{
			SET_BIT(EXTI_MCUCR, EXTI_ISC2);
    107c:	a5 e5       	ldi	r26, 0x55	; 85
    107e:	b0 e0       	ldi	r27, 0x00	; 0
    1080:	e5 e5       	ldi	r30, 0x55	; 85
    1082:	f0 e0       	ldi	r31, 0x00	; 0
    1084:	80 81       	ld	r24, Z
    1086:	80 64       	ori	r24, 0x40	; 64
    1088:	8c 93       	st	X, r24
		}
		break;
	}
}
    108a:	0f 90       	pop	r0
    108c:	0f 90       	pop	r0
    108e:	0f 90       	pop	r0
    1090:	0f 90       	pop	r0
    1092:	cf 91       	pop	r28
    1094:	df 91       	pop	r29
    1096:	08 95       	ret

00001098 <EXT0_CallBackFunction>:

void EXT0_CallBackFunction(void(*PTF)(void))
{
    1098:	df 93       	push	r29
    109a:	cf 93       	push	r28
    109c:	00 d0       	rcall	.+0      	; 0x109e <EXT0_CallBackFunction+0x6>
    109e:	cd b7       	in	r28, 0x3d	; 61
    10a0:	de b7       	in	r29, 0x3e	; 62
    10a2:	9a 83       	std	Y+2, r25	; 0x02
    10a4:	89 83       	std	Y+1, r24	; 0x01
	GPTF[0] = PTF;
    10a6:	89 81       	ldd	r24, Y+1	; 0x01
    10a8:	9a 81       	ldd	r25, Y+2	; 0x02
    10aa:	90 93 8b 01 	sts	0x018B, r25
    10ae:	80 93 8a 01 	sts	0x018A, r24
}
    10b2:	0f 90       	pop	r0
    10b4:	0f 90       	pop	r0
    10b6:	cf 91       	pop	r28
    10b8:	df 91       	pop	r29
    10ba:	08 95       	ret

000010bc <EXT1_CallBackFunction>:
void EXT1_CallBackFunction(void(*PTF)(void))
{
    10bc:	df 93       	push	r29
    10be:	cf 93       	push	r28
    10c0:	00 d0       	rcall	.+0      	; 0x10c2 <EXT1_CallBackFunction+0x6>
    10c2:	cd b7       	in	r28, 0x3d	; 61
    10c4:	de b7       	in	r29, 0x3e	; 62
    10c6:	9a 83       	std	Y+2, r25	; 0x02
    10c8:	89 83       	std	Y+1, r24	; 0x01
	GPTF[1] = PTF;
    10ca:	89 81       	ldd	r24, Y+1	; 0x01
    10cc:	9a 81       	ldd	r25, Y+2	; 0x02
    10ce:	90 93 8d 01 	sts	0x018D, r25
    10d2:	80 93 8c 01 	sts	0x018C, r24
}
    10d6:	0f 90       	pop	r0
    10d8:	0f 90       	pop	r0
    10da:	cf 91       	pop	r28
    10dc:	df 91       	pop	r29
    10de:	08 95       	ret

000010e0 <EXT2_CallBackFunction>:
void EXT2_CallBackFunction(void(*PTF)(void))
{
    10e0:	df 93       	push	r29
    10e2:	cf 93       	push	r28
    10e4:	00 d0       	rcall	.+0      	; 0x10e6 <EXT2_CallBackFunction+0x6>
    10e6:	cd b7       	in	r28, 0x3d	; 61
    10e8:	de b7       	in	r29, 0x3e	; 62
    10ea:	9a 83       	std	Y+2, r25	; 0x02
    10ec:	89 83       	std	Y+1, r24	; 0x01
	GPTF[2] = PTF;
    10ee:	89 81       	ldd	r24, Y+1	; 0x01
    10f0:	9a 81       	ldd	r25, Y+2	; 0x02
    10f2:	90 93 8f 01 	sts	0x018F, r25
    10f6:	80 93 8e 01 	sts	0x018E, r24
}
    10fa:	0f 90       	pop	r0
    10fc:	0f 90       	pop	r0
    10fe:	cf 91       	pop	r28
    1100:	df 91       	pop	r29
    1102:	08 95       	ret

00001104 <__vector_1>:
void __vector_1(void)
{
    1104:	1f 92       	push	r1
    1106:	0f 92       	push	r0
    1108:	0f b6       	in	r0, 0x3f	; 63
    110a:	0f 92       	push	r0
    110c:	11 24       	eor	r1, r1
    110e:	2f 93       	push	r18
    1110:	3f 93       	push	r19
    1112:	4f 93       	push	r20
    1114:	5f 93       	push	r21
    1116:	6f 93       	push	r22
    1118:	7f 93       	push	r23
    111a:	8f 93       	push	r24
    111c:	9f 93       	push	r25
    111e:	af 93       	push	r26
    1120:	bf 93       	push	r27
    1122:	ef 93       	push	r30
    1124:	ff 93       	push	r31
    1126:	df 93       	push	r29
    1128:	cf 93       	push	r28
    112a:	cd b7       	in	r28, 0x3d	; 61
    112c:	de b7       	in	r29, 0x3e	; 62
	GPTF[0]();
    112e:	e0 91 8a 01 	lds	r30, 0x018A
    1132:	f0 91 8b 01 	lds	r31, 0x018B
    1136:	09 95       	icall
}
    1138:	cf 91       	pop	r28
    113a:	df 91       	pop	r29
    113c:	ff 91       	pop	r31
    113e:	ef 91       	pop	r30
    1140:	bf 91       	pop	r27
    1142:	af 91       	pop	r26
    1144:	9f 91       	pop	r25
    1146:	8f 91       	pop	r24
    1148:	7f 91       	pop	r23
    114a:	6f 91       	pop	r22
    114c:	5f 91       	pop	r21
    114e:	4f 91       	pop	r20
    1150:	3f 91       	pop	r19
    1152:	2f 91       	pop	r18
    1154:	0f 90       	pop	r0
    1156:	0f be       	out	0x3f, r0	; 63
    1158:	0f 90       	pop	r0
    115a:	1f 90       	pop	r1
    115c:	18 95       	reti

0000115e <__vector_2>:
void __vector_2(void)
{
    115e:	1f 92       	push	r1
    1160:	0f 92       	push	r0
    1162:	0f b6       	in	r0, 0x3f	; 63
    1164:	0f 92       	push	r0
    1166:	11 24       	eor	r1, r1
    1168:	2f 93       	push	r18
    116a:	3f 93       	push	r19
    116c:	4f 93       	push	r20
    116e:	5f 93       	push	r21
    1170:	6f 93       	push	r22
    1172:	7f 93       	push	r23
    1174:	8f 93       	push	r24
    1176:	9f 93       	push	r25
    1178:	af 93       	push	r26
    117a:	bf 93       	push	r27
    117c:	ef 93       	push	r30
    117e:	ff 93       	push	r31
    1180:	df 93       	push	r29
    1182:	cf 93       	push	r28
    1184:	cd b7       	in	r28, 0x3d	; 61
    1186:	de b7       	in	r29, 0x3e	; 62
	GPTF[1]();
    1188:	e0 91 8c 01 	lds	r30, 0x018C
    118c:	f0 91 8d 01 	lds	r31, 0x018D
    1190:	09 95       	icall
}
    1192:	cf 91       	pop	r28
    1194:	df 91       	pop	r29
    1196:	ff 91       	pop	r31
    1198:	ef 91       	pop	r30
    119a:	bf 91       	pop	r27
    119c:	af 91       	pop	r26
    119e:	9f 91       	pop	r25
    11a0:	8f 91       	pop	r24
    11a2:	7f 91       	pop	r23
    11a4:	6f 91       	pop	r22
    11a6:	5f 91       	pop	r21
    11a8:	4f 91       	pop	r20
    11aa:	3f 91       	pop	r19
    11ac:	2f 91       	pop	r18
    11ae:	0f 90       	pop	r0
    11b0:	0f be       	out	0x3f, r0	; 63
    11b2:	0f 90       	pop	r0
    11b4:	1f 90       	pop	r1
    11b6:	18 95       	reti

000011b8 <__vector_3>:
void __vector_3(void)
{
    11b8:	1f 92       	push	r1
    11ba:	0f 92       	push	r0
    11bc:	0f b6       	in	r0, 0x3f	; 63
    11be:	0f 92       	push	r0
    11c0:	11 24       	eor	r1, r1
    11c2:	2f 93       	push	r18
    11c4:	3f 93       	push	r19
    11c6:	4f 93       	push	r20
    11c8:	5f 93       	push	r21
    11ca:	6f 93       	push	r22
    11cc:	7f 93       	push	r23
    11ce:	8f 93       	push	r24
    11d0:	9f 93       	push	r25
    11d2:	af 93       	push	r26
    11d4:	bf 93       	push	r27
    11d6:	ef 93       	push	r30
    11d8:	ff 93       	push	r31
    11da:	df 93       	push	r29
    11dc:	cf 93       	push	r28
    11de:	cd b7       	in	r28, 0x3d	; 61
    11e0:	de b7       	in	r29, 0x3e	; 62
	GPTF[2]();
    11e2:	e0 91 8e 01 	lds	r30, 0x018E
    11e6:	f0 91 8f 01 	lds	r31, 0x018F
    11ea:	09 95       	icall
}
    11ec:	cf 91       	pop	r28
    11ee:	df 91       	pop	r29
    11f0:	ff 91       	pop	r31
    11f2:	ef 91       	pop	r30
    11f4:	bf 91       	pop	r27
    11f6:	af 91       	pop	r26
    11f8:	9f 91       	pop	r25
    11fa:	8f 91       	pop	r24
    11fc:	7f 91       	pop	r23
    11fe:	6f 91       	pop	r22
    1200:	5f 91       	pop	r21
    1202:	4f 91       	pop	r20
    1204:	3f 91       	pop	r19
    1206:	2f 91       	pop	r18
    1208:	0f 90       	pop	r0
    120a:	0f be       	out	0x3f, r0	; 63
    120c:	0f 90       	pop	r0
    120e:	1f 90       	pop	r1
    1210:	18 95       	reti

00001212 <DIO_VoidSetPortDirection>:
#include "../../LIB/Bit_math.h"

#include "DIO_interface.h"

void DIO_VoidSetPortDirection(u8 Copy_u8PortID, u8 Copy_u8PortDir)
{
    1212:	df 93       	push	r29
    1214:	cf 93       	push	r28
    1216:	00 d0       	rcall	.+0      	; 0x1218 <DIO_VoidSetPortDirection+0x6>
    1218:	00 d0       	rcall	.+0      	; 0x121a <DIO_VoidSetPortDirection+0x8>
    121a:	cd b7       	in	r28, 0x3d	; 61
    121c:	de b7       	in	r29, 0x3e	; 62
    121e:	89 83       	std	Y+1, r24	; 0x01
    1220:	6a 83       	std	Y+2, r22	; 0x02
	switch (Copy_u8PortID) {
    1222:	89 81       	ldd	r24, Y+1	; 0x01
    1224:	28 2f       	mov	r18, r24
    1226:	30 e0       	ldi	r19, 0x00	; 0
    1228:	3c 83       	std	Y+4, r19	; 0x04
    122a:	2b 83       	std	Y+3, r18	; 0x03
    122c:	8b 81       	ldd	r24, Y+3	; 0x03
    122e:	9c 81       	ldd	r25, Y+4	; 0x04
    1230:	82 30       	cpi	r24, 0x02	; 2
    1232:	91 05       	cpc	r25, r1
    1234:	d9 f0       	breq	.+54     	; 0x126c <DIO_VoidSetPortDirection+0x5a>
    1236:	2b 81       	ldd	r18, Y+3	; 0x03
    1238:	3c 81       	ldd	r19, Y+4	; 0x04
    123a:	23 30       	cpi	r18, 0x03	; 3
    123c:	31 05       	cpc	r19, r1
    123e:	34 f4       	brge	.+12     	; 0x124c <DIO_VoidSetPortDirection+0x3a>
    1240:	8b 81       	ldd	r24, Y+3	; 0x03
    1242:	9c 81       	ldd	r25, Y+4	; 0x04
    1244:	81 30       	cpi	r24, 0x01	; 1
    1246:	91 05       	cpc	r25, r1
    1248:	61 f0       	breq	.+24     	; 0x1262 <DIO_VoidSetPortDirection+0x50>
    124a:	1e c0       	rjmp	.+60     	; 0x1288 <DIO_VoidSetPortDirection+0x76>
    124c:	2b 81       	ldd	r18, Y+3	; 0x03
    124e:	3c 81       	ldd	r19, Y+4	; 0x04
    1250:	23 30       	cpi	r18, 0x03	; 3
    1252:	31 05       	cpc	r19, r1
    1254:	81 f0       	breq	.+32     	; 0x1276 <DIO_VoidSetPortDirection+0x64>
    1256:	8b 81       	ldd	r24, Y+3	; 0x03
    1258:	9c 81       	ldd	r25, Y+4	; 0x04
    125a:	84 30       	cpi	r24, 0x04	; 4
    125c:	91 05       	cpc	r25, r1
    125e:	81 f0       	breq	.+32     	; 0x1280 <DIO_VoidSetPortDirection+0x6e>
    1260:	13 c0       	rjmp	.+38     	; 0x1288 <DIO_VoidSetPortDirection+0x76>
	case PORT_A:
		DIO_DDRA = Copy_u8PortDir;
    1262:	ea e3       	ldi	r30, 0x3A	; 58
    1264:	f0 e0       	ldi	r31, 0x00	; 0
    1266:	8a 81       	ldd	r24, Y+2	; 0x02
    1268:	80 83       	st	Z, r24
    126a:	0e c0       	rjmp	.+28     	; 0x1288 <DIO_VoidSetPortDirection+0x76>
		break;
	case PORT_B:
		DIO_DDRB = Copy_u8PortDir;
    126c:	e7 e3       	ldi	r30, 0x37	; 55
    126e:	f0 e0       	ldi	r31, 0x00	; 0
    1270:	8a 81       	ldd	r24, Y+2	; 0x02
    1272:	80 83       	st	Z, r24
    1274:	09 c0       	rjmp	.+18     	; 0x1288 <DIO_VoidSetPortDirection+0x76>
		break;
	case PORT_C:
		DIO_DDRC = Copy_u8PortDir;
    1276:	e4 e3       	ldi	r30, 0x34	; 52
    1278:	f0 e0       	ldi	r31, 0x00	; 0
    127a:	8a 81       	ldd	r24, Y+2	; 0x02
    127c:	80 83       	st	Z, r24
    127e:	04 c0       	rjmp	.+8      	; 0x1288 <DIO_VoidSetPortDirection+0x76>
		break;
	case PORT_D:
		DIO_DDRD = Copy_u8PortDir;
    1280:	e1 e3       	ldi	r30, 0x31	; 49
    1282:	f0 e0       	ldi	r31, 0x00	; 0
    1284:	8a 81       	ldd	r24, Y+2	; 0x02
    1286:	80 83       	st	Z, r24
		break;
	}
}
    1288:	0f 90       	pop	r0
    128a:	0f 90       	pop	r0
    128c:	0f 90       	pop	r0
    128e:	0f 90       	pop	r0
    1290:	cf 91       	pop	r28
    1292:	df 91       	pop	r29
    1294:	08 95       	ret

00001296 <DIO_VoidSetPortValue>:
void DIO_VoidSetPortValue(u8 Copy_u8PortID, u8 Copy_u8PortVal)
{
    1296:	df 93       	push	r29
    1298:	cf 93       	push	r28
    129a:	00 d0       	rcall	.+0      	; 0x129c <DIO_VoidSetPortValue+0x6>
    129c:	00 d0       	rcall	.+0      	; 0x129e <DIO_VoidSetPortValue+0x8>
    129e:	cd b7       	in	r28, 0x3d	; 61
    12a0:	de b7       	in	r29, 0x3e	; 62
    12a2:	89 83       	std	Y+1, r24	; 0x01
    12a4:	6a 83       	std	Y+2, r22	; 0x02
	switch (Copy_u8PortID) {
    12a6:	89 81       	ldd	r24, Y+1	; 0x01
    12a8:	28 2f       	mov	r18, r24
    12aa:	30 e0       	ldi	r19, 0x00	; 0
    12ac:	3c 83       	std	Y+4, r19	; 0x04
    12ae:	2b 83       	std	Y+3, r18	; 0x03
    12b0:	8b 81       	ldd	r24, Y+3	; 0x03
    12b2:	9c 81       	ldd	r25, Y+4	; 0x04
    12b4:	82 30       	cpi	r24, 0x02	; 2
    12b6:	91 05       	cpc	r25, r1
    12b8:	d9 f0       	breq	.+54     	; 0x12f0 <DIO_VoidSetPortValue+0x5a>
    12ba:	2b 81       	ldd	r18, Y+3	; 0x03
    12bc:	3c 81       	ldd	r19, Y+4	; 0x04
    12be:	23 30       	cpi	r18, 0x03	; 3
    12c0:	31 05       	cpc	r19, r1
    12c2:	34 f4       	brge	.+12     	; 0x12d0 <DIO_VoidSetPortValue+0x3a>
    12c4:	8b 81       	ldd	r24, Y+3	; 0x03
    12c6:	9c 81       	ldd	r25, Y+4	; 0x04
    12c8:	81 30       	cpi	r24, 0x01	; 1
    12ca:	91 05       	cpc	r25, r1
    12cc:	61 f0       	breq	.+24     	; 0x12e6 <DIO_VoidSetPortValue+0x50>
    12ce:	1e c0       	rjmp	.+60     	; 0x130c <DIO_VoidSetPortValue+0x76>
    12d0:	2b 81       	ldd	r18, Y+3	; 0x03
    12d2:	3c 81       	ldd	r19, Y+4	; 0x04
    12d4:	23 30       	cpi	r18, 0x03	; 3
    12d6:	31 05       	cpc	r19, r1
    12d8:	81 f0       	breq	.+32     	; 0x12fa <DIO_VoidSetPortValue+0x64>
    12da:	8b 81       	ldd	r24, Y+3	; 0x03
    12dc:	9c 81       	ldd	r25, Y+4	; 0x04
    12de:	84 30       	cpi	r24, 0x04	; 4
    12e0:	91 05       	cpc	r25, r1
    12e2:	81 f0       	breq	.+32     	; 0x1304 <DIO_VoidSetPortValue+0x6e>
    12e4:	13 c0       	rjmp	.+38     	; 0x130c <DIO_VoidSetPortValue+0x76>
	case PORT_A:
		DIO_PORTA = Copy_u8PortVal;
    12e6:	eb e3       	ldi	r30, 0x3B	; 59
    12e8:	f0 e0       	ldi	r31, 0x00	; 0
    12ea:	8a 81       	ldd	r24, Y+2	; 0x02
    12ec:	80 83       	st	Z, r24
    12ee:	0e c0       	rjmp	.+28     	; 0x130c <DIO_VoidSetPortValue+0x76>
		break;
	case PORT_B:
		DIO_PORTB = Copy_u8PortVal;
    12f0:	e8 e3       	ldi	r30, 0x38	; 56
    12f2:	f0 e0       	ldi	r31, 0x00	; 0
    12f4:	8a 81       	ldd	r24, Y+2	; 0x02
    12f6:	80 83       	st	Z, r24
    12f8:	09 c0       	rjmp	.+18     	; 0x130c <DIO_VoidSetPortValue+0x76>
		break;
	case PORT_C:
		DIO_PORTC = Copy_u8PortVal;
    12fa:	e5 e3       	ldi	r30, 0x35	; 53
    12fc:	f0 e0       	ldi	r31, 0x00	; 0
    12fe:	8a 81       	ldd	r24, Y+2	; 0x02
    1300:	80 83       	st	Z, r24
    1302:	04 c0       	rjmp	.+8      	; 0x130c <DIO_VoidSetPortValue+0x76>
		break;
	case PORT_D:
		DIO_PORTD = Copy_u8PortVal;
    1304:	e2 e3       	ldi	r30, 0x32	; 50
    1306:	f0 e0       	ldi	r31, 0x00	; 0
    1308:	8a 81       	ldd	r24, Y+2	; 0x02
    130a:	80 83       	st	Z, r24
		break;
	}
}
    130c:	0f 90       	pop	r0
    130e:	0f 90       	pop	r0
    1310:	0f 90       	pop	r0
    1312:	0f 90       	pop	r0
    1314:	cf 91       	pop	r28
    1316:	df 91       	pop	r29
    1318:	08 95       	ret

0000131a <DIO_VoidSetPinDirection>:
void DIO_VoidSetPinDirection(u8 Copy_u8PortID, u8 Copy_u8PinNo, u8 Copy_u8PinDir)
{
    131a:	df 93       	push	r29
    131c:	cf 93       	push	r28
    131e:	cd b7       	in	r28, 0x3d	; 61
    1320:	de b7       	in	r29, 0x3e	; 62
    1322:	27 97       	sbiw	r28, 0x07	; 7
    1324:	0f b6       	in	r0, 0x3f	; 63
    1326:	f8 94       	cli
    1328:	de bf       	out	0x3e, r29	; 62
    132a:	0f be       	out	0x3f, r0	; 63
    132c:	cd bf       	out	0x3d, r28	; 61
    132e:	89 83       	std	Y+1, r24	; 0x01
    1330:	6a 83       	std	Y+2, r22	; 0x02
    1332:	4b 83       	std	Y+3, r20	; 0x03
	if(Copy_u8PortID <= PORT_D && Copy_u8PinNo <= PIN_7)
    1334:	89 81       	ldd	r24, Y+1	; 0x01
    1336:	85 30       	cpi	r24, 0x05	; 5
    1338:	08 f0       	brcs	.+2      	; 0x133c <DIO_VoidSetPinDirection+0x22>
    133a:	f0 c0       	rjmp	.+480    	; 0x151c <DIO_VoidSetPinDirection+0x202>
    133c:	8a 81       	ldd	r24, Y+2	; 0x02
    133e:	88 30       	cpi	r24, 0x08	; 8
    1340:	08 f0       	brcs	.+2      	; 0x1344 <DIO_VoidSetPinDirection+0x2a>
    1342:	ec c0       	rjmp	.+472    	; 0x151c <DIO_VoidSetPinDirection+0x202>
	{
		if(Copy_u8PinDir == DIO_INPUT)
    1344:	8b 81       	ldd	r24, Y+3	; 0x03
    1346:	88 23       	and	r24, r24
    1348:	09 f0       	breq	.+2      	; 0x134c <DIO_VoidSetPinDirection+0x32>
    134a:	75 c0       	rjmp	.+234    	; 0x1436 <DIO_VoidSetPinDirection+0x11c>
		{
			switch (Copy_u8PortID) {
    134c:	89 81       	ldd	r24, Y+1	; 0x01
    134e:	28 2f       	mov	r18, r24
    1350:	30 e0       	ldi	r19, 0x00	; 0
    1352:	3f 83       	std	Y+7, r19	; 0x07
    1354:	2e 83       	std	Y+6, r18	; 0x06
    1356:	8e 81       	ldd	r24, Y+6	; 0x06
    1358:	9f 81       	ldd	r25, Y+7	; 0x07
    135a:	82 30       	cpi	r24, 0x02	; 2
    135c:	91 05       	cpc	r25, r1
    135e:	61 f1       	breq	.+88     	; 0x13b8 <DIO_VoidSetPinDirection+0x9e>
    1360:	2e 81       	ldd	r18, Y+6	; 0x06
    1362:	3f 81       	ldd	r19, Y+7	; 0x07
    1364:	23 30       	cpi	r18, 0x03	; 3
    1366:	31 05       	cpc	r19, r1
    1368:	34 f4       	brge	.+12     	; 0x1376 <DIO_VoidSetPinDirection+0x5c>
    136a:	8e 81       	ldd	r24, Y+6	; 0x06
    136c:	9f 81       	ldd	r25, Y+7	; 0x07
    136e:	81 30       	cpi	r24, 0x01	; 1
    1370:	91 05       	cpc	r25, r1
    1372:	69 f0       	breq	.+26     	; 0x138e <DIO_VoidSetPinDirection+0x74>
    1374:	d3 c0       	rjmp	.+422    	; 0x151c <DIO_VoidSetPinDirection+0x202>
    1376:	2e 81       	ldd	r18, Y+6	; 0x06
    1378:	3f 81       	ldd	r19, Y+7	; 0x07
    137a:	23 30       	cpi	r18, 0x03	; 3
    137c:	31 05       	cpc	r19, r1
    137e:	89 f1       	breq	.+98     	; 0x13e2 <DIO_VoidSetPinDirection+0xc8>
    1380:	8e 81       	ldd	r24, Y+6	; 0x06
    1382:	9f 81       	ldd	r25, Y+7	; 0x07
    1384:	84 30       	cpi	r24, 0x04	; 4
    1386:	91 05       	cpc	r25, r1
    1388:	09 f4       	brne	.+2      	; 0x138c <DIO_VoidSetPinDirection+0x72>
    138a:	40 c0       	rjmp	.+128    	; 0x140c <DIO_VoidSetPinDirection+0xf2>
    138c:	c7 c0       	rjmp	.+398    	; 0x151c <DIO_VoidSetPinDirection+0x202>
			case PORT_A:
				CLR_BIT(DIO_DDRA,Copy_u8PinNo);
    138e:	aa e3       	ldi	r26, 0x3A	; 58
    1390:	b0 e0       	ldi	r27, 0x00	; 0
    1392:	ea e3       	ldi	r30, 0x3A	; 58
    1394:	f0 e0       	ldi	r31, 0x00	; 0
    1396:	80 81       	ld	r24, Z
    1398:	48 2f       	mov	r20, r24
    139a:	8a 81       	ldd	r24, Y+2	; 0x02
    139c:	28 2f       	mov	r18, r24
    139e:	30 e0       	ldi	r19, 0x00	; 0
    13a0:	81 e0       	ldi	r24, 0x01	; 1
    13a2:	90 e0       	ldi	r25, 0x00	; 0
    13a4:	02 2e       	mov	r0, r18
    13a6:	02 c0       	rjmp	.+4      	; 0x13ac <DIO_VoidSetPinDirection+0x92>
    13a8:	88 0f       	add	r24, r24
    13aa:	99 1f       	adc	r25, r25
    13ac:	0a 94       	dec	r0
    13ae:	e2 f7       	brpl	.-8      	; 0x13a8 <DIO_VoidSetPinDirection+0x8e>
    13b0:	80 95       	com	r24
    13b2:	84 23       	and	r24, r20
    13b4:	8c 93       	st	X, r24
    13b6:	b2 c0       	rjmp	.+356    	; 0x151c <DIO_VoidSetPinDirection+0x202>
				break;
			case PORT_B:
				CLR_BIT(DIO_DDRB,Copy_u8PinNo);
    13b8:	a7 e3       	ldi	r26, 0x37	; 55
    13ba:	b0 e0       	ldi	r27, 0x00	; 0
    13bc:	e7 e3       	ldi	r30, 0x37	; 55
    13be:	f0 e0       	ldi	r31, 0x00	; 0
    13c0:	80 81       	ld	r24, Z
    13c2:	48 2f       	mov	r20, r24
    13c4:	8a 81       	ldd	r24, Y+2	; 0x02
    13c6:	28 2f       	mov	r18, r24
    13c8:	30 e0       	ldi	r19, 0x00	; 0
    13ca:	81 e0       	ldi	r24, 0x01	; 1
    13cc:	90 e0       	ldi	r25, 0x00	; 0
    13ce:	02 2e       	mov	r0, r18
    13d0:	02 c0       	rjmp	.+4      	; 0x13d6 <DIO_VoidSetPinDirection+0xbc>
    13d2:	88 0f       	add	r24, r24
    13d4:	99 1f       	adc	r25, r25
    13d6:	0a 94       	dec	r0
    13d8:	e2 f7       	brpl	.-8      	; 0x13d2 <DIO_VoidSetPinDirection+0xb8>
    13da:	80 95       	com	r24
    13dc:	84 23       	and	r24, r20
    13de:	8c 93       	st	X, r24
    13e0:	9d c0       	rjmp	.+314    	; 0x151c <DIO_VoidSetPinDirection+0x202>
				break;
			case PORT_C:
				CLR_BIT(DIO_DDRC,Copy_u8PinNo);
    13e2:	a4 e3       	ldi	r26, 0x34	; 52
    13e4:	b0 e0       	ldi	r27, 0x00	; 0
    13e6:	e4 e3       	ldi	r30, 0x34	; 52
    13e8:	f0 e0       	ldi	r31, 0x00	; 0
    13ea:	80 81       	ld	r24, Z
    13ec:	48 2f       	mov	r20, r24
    13ee:	8a 81       	ldd	r24, Y+2	; 0x02
    13f0:	28 2f       	mov	r18, r24
    13f2:	30 e0       	ldi	r19, 0x00	; 0
    13f4:	81 e0       	ldi	r24, 0x01	; 1
    13f6:	90 e0       	ldi	r25, 0x00	; 0
    13f8:	02 2e       	mov	r0, r18
    13fa:	02 c0       	rjmp	.+4      	; 0x1400 <DIO_VoidSetPinDirection+0xe6>
    13fc:	88 0f       	add	r24, r24
    13fe:	99 1f       	adc	r25, r25
    1400:	0a 94       	dec	r0
    1402:	e2 f7       	brpl	.-8      	; 0x13fc <DIO_VoidSetPinDirection+0xe2>
    1404:	80 95       	com	r24
    1406:	84 23       	and	r24, r20
    1408:	8c 93       	st	X, r24
    140a:	88 c0       	rjmp	.+272    	; 0x151c <DIO_VoidSetPinDirection+0x202>
				break;
			case PORT_D:
				CLR_BIT(DIO_DDRD,Copy_u8PinNo);
    140c:	a1 e3       	ldi	r26, 0x31	; 49
    140e:	b0 e0       	ldi	r27, 0x00	; 0
    1410:	e1 e3       	ldi	r30, 0x31	; 49
    1412:	f0 e0       	ldi	r31, 0x00	; 0
    1414:	80 81       	ld	r24, Z
    1416:	48 2f       	mov	r20, r24
    1418:	8a 81       	ldd	r24, Y+2	; 0x02
    141a:	28 2f       	mov	r18, r24
    141c:	30 e0       	ldi	r19, 0x00	; 0
    141e:	81 e0       	ldi	r24, 0x01	; 1
    1420:	90 e0       	ldi	r25, 0x00	; 0
    1422:	02 2e       	mov	r0, r18
    1424:	02 c0       	rjmp	.+4      	; 0x142a <DIO_VoidSetPinDirection+0x110>
    1426:	88 0f       	add	r24, r24
    1428:	99 1f       	adc	r25, r25
    142a:	0a 94       	dec	r0
    142c:	e2 f7       	brpl	.-8      	; 0x1426 <DIO_VoidSetPinDirection+0x10c>
    142e:	80 95       	com	r24
    1430:	84 23       	and	r24, r20
    1432:	8c 93       	st	X, r24
    1434:	73 c0       	rjmp	.+230    	; 0x151c <DIO_VoidSetPinDirection+0x202>
				break;
			}
		}
		else if(Copy_u8PinDir == DIO_OUTPUT)
    1436:	8b 81       	ldd	r24, Y+3	; 0x03
    1438:	81 30       	cpi	r24, 0x01	; 1
    143a:	09 f0       	breq	.+2      	; 0x143e <DIO_VoidSetPinDirection+0x124>
    143c:	6f c0       	rjmp	.+222    	; 0x151c <DIO_VoidSetPinDirection+0x202>
		{
			switch (Copy_u8PortID) {
    143e:	89 81       	ldd	r24, Y+1	; 0x01
    1440:	28 2f       	mov	r18, r24
    1442:	30 e0       	ldi	r19, 0x00	; 0
    1444:	3d 83       	std	Y+5, r19	; 0x05
    1446:	2c 83       	std	Y+4, r18	; 0x04
    1448:	8c 81       	ldd	r24, Y+4	; 0x04
    144a:	9d 81       	ldd	r25, Y+5	; 0x05
    144c:	82 30       	cpi	r24, 0x02	; 2
    144e:	91 05       	cpc	r25, r1
    1450:	51 f1       	breq	.+84     	; 0x14a6 <DIO_VoidSetPinDirection+0x18c>
    1452:	2c 81       	ldd	r18, Y+4	; 0x04
    1454:	3d 81       	ldd	r19, Y+5	; 0x05
    1456:	23 30       	cpi	r18, 0x03	; 3
    1458:	31 05       	cpc	r19, r1
    145a:	34 f4       	brge	.+12     	; 0x1468 <DIO_VoidSetPinDirection+0x14e>
    145c:	8c 81       	ldd	r24, Y+4	; 0x04
    145e:	9d 81       	ldd	r25, Y+5	; 0x05
    1460:	81 30       	cpi	r24, 0x01	; 1
    1462:	91 05       	cpc	r25, r1
    1464:	61 f0       	breq	.+24     	; 0x147e <DIO_VoidSetPinDirection+0x164>
    1466:	5a c0       	rjmp	.+180    	; 0x151c <DIO_VoidSetPinDirection+0x202>
    1468:	2c 81       	ldd	r18, Y+4	; 0x04
    146a:	3d 81       	ldd	r19, Y+5	; 0x05
    146c:	23 30       	cpi	r18, 0x03	; 3
    146e:	31 05       	cpc	r19, r1
    1470:	71 f1       	breq	.+92     	; 0x14ce <DIO_VoidSetPinDirection+0x1b4>
    1472:	8c 81       	ldd	r24, Y+4	; 0x04
    1474:	9d 81       	ldd	r25, Y+5	; 0x05
    1476:	84 30       	cpi	r24, 0x04	; 4
    1478:	91 05       	cpc	r25, r1
    147a:	e9 f1       	breq	.+122    	; 0x14f6 <DIO_VoidSetPinDirection+0x1dc>
    147c:	4f c0       	rjmp	.+158    	; 0x151c <DIO_VoidSetPinDirection+0x202>
			case PORT_A:
				SET_BIT(DIO_DDRA,Copy_u8PinNo);
    147e:	aa e3       	ldi	r26, 0x3A	; 58
    1480:	b0 e0       	ldi	r27, 0x00	; 0
    1482:	ea e3       	ldi	r30, 0x3A	; 58
    1484:	f0 e0       	ldi	r31, 0x00	; 0
    1486:	80 81       	ld	r24, Z
    1488:	48 2f       	mov	r20, r24
    148a:	8a 81       	ldd	r24, Y+2	; 0x02
    148c:	28 2f       	mov	r18, r24
    148e:	30 e0       	ldi	r19, 0x00	; 0
    1490:	81 e0       	ldi	r24, 0x01	; 1
    1492:	90 e0       	ldi	r25, 0x00	; 0
    1494:	02 2e       	mov	r0, r18
    1496:	02 c0       	rjmp	.+4      	; 0x149c <DIO_VoidSetPinDirection+0x182>
    1498:	88 0f       	add	r24, r24
    149a:	99 1f       	adc	r25, r25
    149c:	0a 94       	dec	r0
    149e:	e2 f7       	brpl	.-8      	; 0x1498 <DIO_VoidSetPinDirection+0x17e>
    14a0:	84 2b       	or	r24, r20
    14a2:	8c 93       	st	X, r24
    14a4:	3b c0       	rjmp	.+118    	; 0x151c <DIO_VoidSetPinDirection+0x202>
				break;
			case PORT_B:
				SET_BIT(DIO_DDRB,Copy_u8PinNo);
    14a6:	a7 e3       	ldi	r26, 0x37	; 55
    14a8:	b0 e0       	ldi	r27, 0x00	; 0
    14aa:	e7 e3       	ldi	r30, 0x37	; 55
    14ac:	f0 e0       	ldi	r31, 0x00	; 0
    14ae:	80 81       	ld	r24, Z
    14b0:	48 2f       	mov	r20, r24
    14b2:	8a 81       	ldd	r24, Y+2	; 0x02
    14b4:	28 2f       	mov	r18, r24
    14b6:	30 e0       	ldi	r19, 0x00	; 0
    14b8:	81 e0       	ldi	r24, 0x01	; 1
    14ba:	90 e0       	ldi	r25, 0x00	; 0
    14bc:	02 2e       	mov	r0, r18
    14be:	02 c0       	rjmp	.+4      	; 0x14c4 <DIO_VoidSetPinDirection+0x1aa>
    14c0:	88 0f       	add	r24, r24
    14c2:	99 1f       	adc	r25, r25
    14c4:	0a 94       	dec	r0
    14c6:	e2 f7       	brpl	.-8      	; 0x14c0 <DIO_VoidSetPinDirection+0x1a6>
    14c8:	84 2b       	or	r24, r20
    14ca:	8c 93       	st	X, r24
    14cc:	27 c0       	rjmp	.+78     	; 0x151c <DIO_VoidSetPinDirection+0x202>
				break;
			case PORT_C:
				SET_BIT(DIO_DDRC,Copy_u8PinNo);
    14ce:	a4 e3       	ldi	r26, 0x34	; 52
    14d0:	b0 e0       	ldi	r27, 0x00	; 0
    14d2:	e4 e3       	ldi	r30, 0x34	; 52
    14d4:	f0 e0       	ldi	r31, 0x00	; 0
    14d6:	80 81       	ld	r24, Z
    14d8:	48 2f       	mov	r20, r24
    14da:	8a 81       	ldd	r24, Y+2	; 0x02
    14dc:	28 2f       	mov	r18, r24
    14de:	30 e0       	ldi	r19, 0x00	; 0
    14e0:	81 e0       	ldi	r24, 0x01	; 1
    14e2:	90 e0       	ldi	r25, 0x00	; 0
    14e4:	02 2e       	mov	r0, r18
    14e6:	02 c0       	rjmp	.+4      	; 0x14ec <DIO_VoidSetPinDirection+0x1d2>
    14e8:	88 0f       	add	r24, r24
    14ea:	99 1f       	adc	r25, r25
    14ec:	0a 94       	dec	r0
    14ee:	e2 f7       	brpl	.-8      	; 0x14e8 <DIO_VoidSetPinDirection+0x1ce>
    14f0:	84 2b       	or	r24, r20
    14f2:	8c 93       	st	X, r24
    14f4:	13 c0       	rjmp	.+38     	; 0x151c <DIO_VoidSetPinDirection+0x202>
				break;
			case PORT_D:
				SET_BIT(DIO_DDRD,Copy_u8PinNo);
    14f6:	a1 e3       	ldi	r26, 0x31	; 49
    14f8:	b0 e0       	ldi	r27, 0x00	; 0
    14fa:	e1 e3       	ldi	r30, 0x31	; 49
    14fc:	f0 e0       	ldi	r31, 0x00	; 0
    14fe:	80 81       	ld	r24, Z
    1500:	48 2f       	mov	r20, r24
    1502:	8a 81       	ldd	r24, Y+2	; 0x02
    1504:	28 2f       	mov	r18, r24
    1506:	30 e0       	ldi	r19, 0x00	; 0
    1508:	81 e0       	ldi	r24, 0x01	; 1
    150a:	90 e0       	ldi	r25, 0x00	; 0
    150c:	02 2e       	mov	r0, r18
    150e:	02 c0       	rjmp	.+4      	; 0x1514 <DIO_VoidSetPinDirection+0x1fa>
    1510:	88 0f       	add	r24, r24
    1512:	99 1f       	adc	r25, r25
    1514:	0a 94       	dec	r0
    1516:	e2 f7       	brpl	.-8      	; 0x1510 <DIO_VoidSetPinDirection+0x1f6>
    1518:	84 2b       	or	r24, r20
    151a:	8c 93       	st	X, r24
				break;
			}
		}
	}
}
    151c:	27 96       	adiw	r28, 0x07	; 7
    151e:	0f b6       	in	r0, 0x3f	; 63
    1520:	f8 94       	cli
    1522:	de bf       	out	0x3e, r29	; 62
    1524:	0f be       	out	0x3f, r0	; 63
    1526:	cd bf       	out	0x3d, r28	; 61
    1528:	cf 91       	pop	r28
    152a:	df 91       	pop	r29
    152c:	08 95       	ret

0000152e <DIO_VoidSetPinVal>:
void DIO_VoidSetPinVal(u8 Copy_u8PortID, u8 Copy_u8PinNo, u8 Copy_u8PinVal)
{
    152e:	df 93       	push	r29
    1530:	cf 93       	push	r28
    1532:	cd b7       	in	r28, 0x3d	; 61
    1534:	de b7       	in	r29, 0x3e	; 62
    1536:	27 97       	sbiw	r28, 0x07	; 7
    1538:	0f b6       	in	r0, 0x3f	; 63
    153a:	f8 94       	cli
    153c:	de bf       	out	0x3e, r29	; 62
    153e:	0f be       	out	0x3f, r0	; 63
    1540:	cd bf       	out	0x3d, r28	; 61
    1542:	89 83       	std	Y+1, r24	; 0x01
    1544:	6a 83       	std	Y+2, r22	; 0x02
    1546:	4b 83       	std	Y+3, r20	; 0x03
	if(Copy_u8PortID <= PORT_D && Copy_u8PinNo <= PIN_7)
    1548:	89 81       	ldd	r24, Y+1	; 0x01
    154a:	85 30       	cpi	r24, 0x05	; 5
    154c:	08 f0       	brcs	.+2      	; 0x1550 <DIO_VoidSetPinVal+0x22>
    154e:	f0 c0       	rjmp	.+480    	; 0x1730 <DIO_VoidSetPinVal+0x202>
    1550:	8a 81       	ldd	r24, Y+2	; 0x02
    1552:	88 30       	cpi	r24, 0x08	; 8
    1554:	08 f0       	brcs	.+2      	; 0x1558 <DIO_VoidSetPinVal+0x2a>
    1556:	ec c0       	rjmp	.+472    	; 0x1730 <DIO_VoidSetPinVal+0x202>
	{
		if(Copy_u8PinVal == DIO_LOW)
    1558:	8b 81       	ldd	r24, Y+3	; 0x03
    155a:	88 23       	and	r24, r24
    155c:	09 f0       	breq	.+2      	; 0x1560 <DIO_VoidSetPinVal+0x32>
    155e:	75 c0       	rjmp	.+234    	; 0x164a <DIO_VoidSetPinVal+0x11c>
		{
			switch (Copy_u8PortID) {
    1560:	89 81       	ldd	r24, Y+1	; 0x01
    1562:	28 2f       	mov	r18, r24
    1564:	30 e0       	ldi	r19, 0x00	; 0
    1566:	3f 83       	std	Y+7, r19	; 0x07
    1568:	2e 83       	std	Y+6, r18	; 0x06
    156a:	8e 81       	ldd	r24, Y+6	; 0x06
    156c:	9f 81       	ldd	r25, Y+7	; 0x07
    156e:	82 30       	cpi	r24, 0x02	; 2
    1570:	91 05       	cpc	r25, r1
    1572:	61 f1       	breq	.+88     	; 0x15cc <DIO_VoidSetPinVal+0x9e>
    1574:	2e 81       	ldd	r18, Y+6	; 0x06
    1576:	3f 81       	ldd	r19, Y+7	; 0x07
    1578:	23 30       	cpi	r18, 0x03	; 3
    157a:	31 05       	cpc	r19, r1
    157c:	34 f4       	brge	.+12     	; 0x158a <DIO_VoidSetPinVal+0x5c>
    157e:	8e 81       	ldd	r24, Y+6	; 0x06
    1580:	9f 81       	ldd	r25, Y+7	; 0x07
    1582:	81 30       	cpi	r24, 0x01	; 1
    1584:	91 05       	cpc	r25, r1
    1586:	69 f0       	breq	.+26     	; 0x15a2 <DIO_VoidSetPinVal+0x74>
    1588:	d3 c0       	rjmp	.+422    	; 0x1730 <DIO_VoidSetPinVal+0x202>
    158a:	2e 81       	ldd	r18, Y+6	; 0x06
    158c:	3f 81       	ldd	r19, Y+7	; 0x07
    158e:	23 30       	cpi	r18, 0x03	; 3
    1590:	31 05       	cpc	r19, r1
    1592:	89 f1       	breq	.+98     	; 0x15f6 <DIO_VoidSetPinVal+0xc8>
    1594:	8e 81       	ldd	r24, Y+6	; 0x06
    1596:	9f 81       	ldd	r25, Y+7	; 0x07
    1598:	84 30       	cpi	r24, 0x04	; 4
    159a:	91 05       	cpc	r25, r1
    159c:	09 f4       	brne	.+2      	; 0x15a0 <DIO_VoidSetPinVal+0x72>
    159e:	40 c0       	rjmp	.+128    	; 0x1620 <DIO_VoidSetPinVal+0xf2>
    15a0:	c7 c0       	rjmp	.+398    	; 0x1730 <DIO_VoidSetPinVal+0x202>
			case PORT_A:
				CLR_BIT(DIO_PORTA,Copy_u8PinNo);
    15a2:	ab e3       	ldi	r26, 0x3B	; 59
    15a4:	b0 e0       	ldi	r27, 0x00	; 0
    15a6:	eb e3       	ldi	r30, 0x3B	; 59
    15a8:	f0 e0       	ldi	r31, 0x00	; 0
    15aa:	80 81       	ld	r24, Z
    15ac:	48 2f       	mov	r20, r24
    15ae:	8a 81       	ldd	r24, Y+2	; 0x02
    15b0:	28 2f       	mov	r18, r24
    15b2:	30 e0       	ldi	r19, 0x00	; 0
    15b4:	81 e0       	ldi	r24, 0x01	; 1
    15b6:	90 e0       	ldi	r25, 0x00	; 0
    15b8:	02 2e       	mov	r0, r18
    15ba:	02 c0       	rjmp	.+4      	; 0x15c0 <DIO_VoidSetPinVal+0x92>
    15bc:	88 0f       	add	r24, r24
    15be:	99 1f       	adc	r25, r25
    15c0:	0a 94       	dec	r0
    15c2:	e2 f7       	brpl	.-8      	; 0x15bc <DIO_VoidSetPinVal+0x8e>
    15c4:	80 95       	com	r24
    15c6:	84 23       	and	r24, r20
    15c8:	8c 93       	st	X, r24
    15ca:	b2 c0       	rjmp	.+356    	; 0x1730 <DIO_VoidSetPinVal+0x202>
				break;
			case PORT_B:
				CLR_BIT(DIO_PORTB,Copy_u8PinNo);
    15cc:	a8 e3       	ldi	r26, 0x38	; 56
    15ce:	b0 e0       	ldi	r27, 0x00	; 0
    15d0:	e8 e3       	ldi	r30, 0x38	; 56
    15d2:	f0 e0       	ldi	r31, 0x00	; 0
    15d4:	80 81       	ld	r24, Z
    15d6:	48 2f       	mov	r20, r24
    15d8:	8a 81       	ldd	r24, Y+2	; 0x02
    15da:	28 2f       	mov	r18, r24
    15dc:	30 e0       	ldi	r19, 0x00	; 0
    15de:	81 e0       	ldi	r24, 0x01	; 1
    15e0:	90 e0       	ldi	r25, 0x00	; 0
    15e2:	02 2e       	mov	r0, r18
    15e4:	02 c0       	rjmp	.+4      	; 0x15ea <DIO_VoidSetPinVal+0xbc>
    15e6:	88 0f       	add	r24, r24
    15e8:	99 1f       	adc	r25, r25
    15ea:	0a 94       	dec	r0
    15ec:	e2 f7       	brpl	.-8      	; 0x15e6 <DIO_VoidSetPinVal+0xb8>
    15ee:	80 95       	com	r24
    15f0:	84 23       	and	r24, r20
    15f2:	8c 93       	st	X, r24
    15f4:	9d c0       	rjmp	.+314    	; 0x1730 <DIO_VoidSetPinVal+0x202>
				break;
			case PORT_C:
				CLR_BIT(DIO_PORTC,Copy_u8PinNo);
    15f6:	a5 e3       	ldi	r26, 0x35	; 53
    15f8:	b0 e0       	ldi	r27, 0x00	; 0
    15fa:	e5 e3       	ldi	r30, 0x35	; 53
    15fc:	f0 e0       	ldi	r31, 0x00	; 0
    15fe:	80 81       	ld	r24, Z
    1600:	48 2f       	mov	r20, r24
    1602:	8a 81       	ldd	r24, Y+2	; 0x02
    1604:	28 2f       	mov	r18, r24
    1606:	30 e0       	ldi	r19, 0x00	; 0
    1608:	81 e0       	ldi	r24, 0x01	; 1
    160a:	90 e0       	ldi	r25, 0x00	; 0
    160c:	02 2e       	mov	r0, r18
    160e:	02 c0       	rjmp	.+4      	; 0x1614 <DIO_VoidSetPinVal+0xe6>
    1610:	88 0f       	add	r24, r24
    1612:	99 1f       	adc	r25, r25
    1614:	0a 94       	dec	r0
    1616:	e2 f7       	brpl	.-8      	; 0x1610 <DIO_VoidSetPinVal+0xe2>
    1618:	80 95       	com	r24
    161a:	84 23       	and	r24, r20
    161c:	8c 93       	st	X, r24
    161e:	88 c0       	rjmp	.+272    	; 0x1730 <DIO_VoidSetPinVal+0x202>
				break;
			case PORT_D:
				CLR_BIT(DIO_PORTD,Copy_u8PinNo);
    1620:	a2 e3       	ldi	r26, 0x32	; 50
    1622:	b0 e0       	ldi	r27, 0x00	; 0
    1624:	e2 e3       	ldi	r30, 0x32	; 50
    1626:	f0 e0       	ldi	r31, 0x00	; 0
    1628:	80 81       	ld	r24, Z
    162a:	48 2f       	mov	r20, r24
    162c:	8a 81       	ldd	r24, Y+2	; 0x02
    162e:	28 2f       	mov	r18, r24
    1630:	30 e0       	ldi	r19, 0x00	; 0
    1632:	81 e0       	ldi	r24, 0x01	; 1
    1634:	90 e0       	ldi	r25, 0x00	; 0
    1636:	02 2e       	mov	r0, r18
    1638:	02 c0       	rjmp	.+4      	; 0x163e <DIO_VoidSetPinVal+0x110>
    163a:	88 0f       	add	r24, r24
    163c:	99 1f       	adc	r25, r25
    163e:	0a 94       	dec	r0
    1640:	e2 f7       	brpl	.-8      	; 0x163a <DIO_VoidSetPinVal+0x10c>
    1642:	80 95       	com	r24
    1644:	84 23       	and	r24, r20
    1646:	8c 93       	st	X, r24
    1648:	73 c0       	rjmp	.+230    	; 0x1730 <DIO_VoidSetPinVal+0x202>
				break;
			}
		}
		else if(Copy_u8PinVal == DIO_HIGH)
    164a:	8b 81       	ldd	r24, Y+3	; 0x03
    164c:	81 30       	cpi	r24, 0x01	; 1
    164e:	09 f0       	breq	.+2      	; 0x1652 <DIO_VoidSetPinVal+0x124>
    1650:	6f c0       	rjmp	.+222    	; 0x1730 <DIO_VoidSetPinVal+0x202>
		{
			switch (Copy_u8PortID) {
    1652:	89 81       	ldd	r24, Y+1	; 0x01
    1654:	28 2f       	mov	r18, r24
    1656:	30 e0       	ldi	r19, 0x00	; 0
    1658:	3d 83       	std	Y+5, r19	; 0x05
    165a:	2c 83       	std	Y+4, r18	; 0x04
    165c:	8c 81       	ldd	r24, Y+4	; 0x04
    165e:	9d 81       	ldd	r25, Y+5	; 0x05
    1660:	82 30       	cpi	r24, 0x02	; 2
    1662:	91 05       	cpc	r25, r1
    1664:	51 f1       	breq	.+84     	; 0x16ba <DIO_VoidSetPinVal+0x18c>
    1666:	2c 81       	ldd	r18, Y+4	; 0x04
    1668:	3d 81       	ldd	r19, Y+5	; 0x05
    166a:	23 30       	cpi	r18, 0x03	; 3
    166c:	31 05       	cpc	r19, r1
    166e:	34 f4       	brge	.+12     	; 0x167c <DIO_VoidSetPinVal+0x14e>
    1670:	8c 81       	ldd	r24, Y+4	; 0x04
    1672:	9d 81       	ldd	r25, Y+5	; 0x05
    1674:	81 30       	cpi	r24, 0x01	; 1
    1676:	91 05       	cpc	r25, r1
    1678:	61 f0       	breq	.+24     	; 0x1692 <DIO_VoidSetPinVal+0x164>
    167a:	5a c0       	rjmp	.+180    	; 0x1730 <DIO_VoidSetPinVal+0x202>
    167c:	2c 81       	ldd	r18, Y+4	; 0x04
    167e:	3d 81       	ldd	r19, Y+5	; 0x05
    1680:	23 30       	cpi	r18, 0x03	; 3
    1682:	31 05       	cpc	r19, r1
    1684:	71 f1       	breq	.+92     	; 0x16e2 <DIO_VoidSetPinVal+0x1b4>
    1686:	8c 81       	ldd	r24, Y+4	; 0x04
    1688:	9d 81       	ldd	r25, Y+5	; 0x05
    168a:	84 30       	cpi	r24, 0x04	; 4
    168c:	91 05       	cpc	r25, r1
    168e:	e9 f1       	breq	.+122    	; 0x170a <DIO_VoidSetPinVal+0x1dc>
    1690:	4f c0       	rjmp	.+158    	; 0x1730 <DIO_VoidSetPinVal+0x202>
			case PORT_A:
				SET_BIT(DIO_PORTA,Copy_u8PinNo);
    1692:	ab e3       	ldi	r26, 0x3B	; 59
    1694:	b0 e0       	ldi	r27, 0x00	; 0
    1696:	eb e3       	ldi	r30, 0x3B	; 59
    1698:	f0 e0       	ldi	r31, 0x00	; 0
    169a:	80 81       	ld	r24, Z
    169c:	48 2f       	mov	r20, r24
    169e:	8a 81       	ldd	r24, Y+2	; 0x02
    16a0:	28 2f       	mov	r18, r24
    16a2:	30 e0       	ldi	r19, 0x00	; 0
    16a4:	81 e0       	ldi	r24, 0x01	; 1
    16a6:	90 e0       	ldi	r25, 0x00	; 0
    16a8:	02 2e       	mov	r0, r18
    16aa:	02 c0       	rjmp	.+4      	; 0x16b0 <DIO_VoidSetPinVal+0x182>
    16ac:	88 0f       	add	r24, r24
    16ae:	99 1f       	adc	r25, r25
    16b0:	0a 94       	dec	r0
    16b2:	e2 f7       	brpl	.-8      	; 0x16ac <DIO_VoidSetPinVal+0x17e>
    16b4:	84 2b       	or	r24, r20
    16b6:	8c 93       	st	X, r24
    16b8:	3b c0       	rjmp	.+118    	; 0x1730 <DIO_VoidSetPinVal+0x202>
				break;
			case PORT_B:
				SET_BIT(DIO_PORTB,Copy_u8PinNo);
    16ba:	a8 e3       	ldi	r26, 0x38	; 56
    16bc:	b0 e0       	ldi	r27, 0x00	; 0
    16be:	e8 e3       	ldi	r30, 0x38	; 56
    16c0:	f0 e0       	ldi	r31, 0x00	; 0
    16c2:	80 81       	ld	r24, Z
    16c4:	48 2f       	mov	r20, r24
    16c6:	8a 81       	ldd	r24, Y+2	; 0x02
    16c8:	28 2f       	mov	r18, r24
    16ca:	30 e0       	ldi	r19, 0x00	; 0
    16cc:	81 e0       	ldi	r24, 0x01	; 1
    16ce:	90 e0       	ldi	r25, 0x00	; 0
    16d0:	02 2e       	mov	r0, r18
    16d2:	02 c0       	rjmp	.+4      	; 0x16d8 <DIO_VoidSetPinVal+0x1aa>
    16d4:	88 0f       	add	r24, r24
    16d6:	99 1f       	adc	r25, r25
    16d8:	0a 94       	dec	r0
    16da:	e2 f7       	brpl	.-8      	; 0x16d4 <DIO_VoidSetPinVal+0x1a6>
    16dc:	84 2b       	or	r24, r20
    16de:	8c 93       	st	X, r24
    16e0:	27 c0       	rjmp	.+78     	; 0x1730 <DIO_VoidSetPinVal+0x202>
				break;
			case PORT_C:
				SET_BIT(DIO_PORTC,Copy_u8PinNo);
    16e2:	a5 e3       	ldi	r26, 0x35	; 53
    16e4:	b0 e0       	ldi	r27, 0x00	; 0
    16e6:	e5 e3       	ldi	r30, 0x35	; 53
    16e8:	f0 e0       	ldi	r31, 0x00	; 0
    16ea:	80 81       	ld	r24, Z
    16ec:	48 2f       	mov	r20, r24
    16ee:	8a 81       	ldd	r24, Y+2	; 0x02
    16f0:	28 2f       	mov	r18, r24
    16f2:	30 e0       	ldi	r19, 0x00	; 0
    16f4:	81 e0       	ldi	r24, 0x01	; 1
    16f6:	90 e0       	ldi	r25, 0x00	; 0
    16f8:	02 2e       	mov	r0, r18
    16fa:	02 c0       	rjmp	.+4      	; 0x1700 <DIO_VoidSetPinVal+0x1d2>
    16fc:	88 0f       	add	r24, r24
    16fe:	99 1f       	adc	r25, r25
    1700:	0a 94       	dec	r0
    1702:	e2 f7       	brpl	.-8      	; 0x16fc <DIO_VoidSetPinVal+0x1ce>
    1704:	84 2b       	or	r24, r20
    1706:	8c 93       	st	X, r24
    1708:	13 c0       	rjmp	.+38     	; 0x1730 <DIO_VoidSetPinVal+0x202>
				break;
			case PORT_D:
				SET_BIT(DIO_PORTD,Copy_u8PinNo);
    170a:	a2 e3       	ldi	r26, 0x32	; 50
    170c:	b0 e0       	ldi	r27, 0x00	; 0
    170e:	e2 e3       	ldi	r30, 0x32	; 50
    1710:	f0 e0       	ldi	r31, 0x00	; 0
    1712:	80 81       	ld	r24, Z
    1714:	48 2f       	mov	r20, r24
    1716:	8a 81       	ldd	r24, Y+2	; 0x02
    1718:	28 2f       	mov	r18, r24
    171a:	30 e0       	ldi	r19, 0x00	; 0
    171c:	81 e0       	ldi	r24, 0x01	; 1
    171e:	90 e0       	ldi	r25, 0x00	; 0
    1720:	02 2e       	mov	r0, r18
    1722:	02 c0       	rjmp	.+4      	; 0x1728 <DIO_VoidSetPinVal+0x1fa>
    1724:	88 0f       	add	r24, r24
    1726:	99 1f       	adc	r25, r25
    1728:	0a 94       	dec	r0
    172a:	e2 f7       	brpl	.-8      	; 0x1724 <DIO_VoidSetPinVal+0x1f6>
    172c:	84 2b       	or	r24, r20
    172e:	8c 93       	st	X, r24
				break;
			}
		}
	}
}
    1730:	27 96       	adiw	r28, 0x07	; 7
    1732:	0f b6       	in	r0, 0x3f	; 63
    1734:	f8 94       	cli
    1736:	de bf       	out	0x3e, r29	; 62
    1738:	0f be       	out	0x3f, r0	; 63
    173a:	cd bf       	out	0x3d, r28	; 61
    173c:	cf 91       	pop	r28
    173e:	df 91       	pop	r29
    1740:	08 95       	ret

00001742 <DIO_u8SetPortValue>:
u8 DIO_u8SetPortValue(u8 Copy_u8PortID, u8 Copy_u8PinNo)
{
    1742:	df 93       	push	r29
    1744:	cf 93       	push	r28
    1746:	00 d0       	rcall	.+0      	; 0x1748 <DIO_u8SetPortValue+0x6>
    1748:	00 d0       	rcall	.+0      	; 0x174a <DIO_u8SetPortValue+0x8>
    174a:	0f 92       	push	r0
    174c:	cd b7       	in	r28, 0x3d	; 61
    174e:	de b7       	in	r29, 0x3e	; 62
    1750:	8a 83       	std	Y+2, r24	; 0x02
    1752:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_PinVal = 0;
    1754:	19 82       	std	Y+1, r1	; 0x01
	switch (Copy_u8PortID) {
    1756:	8a 81       	ldd	r24, Y+2	; 0x02
    1758:	28 2f       	mov	r18, r24
    175a:	30 e0       	ldi	r19, 0x00	; 0
    175c:	3d 83       	std	Y+5, r19	; 0x05
    175e:	2c 83       	std	Y+4, r18	; 0x04
    1760:	4c 81       	ldd	r20, Y+4	; 0x04
    1762:	5d 81       	ldd	r21, Y+5	; 0x05
    1764:	42 30       	cpi	r20, 0x02	; 2
    1766:	51 05       	cpc	r21, r1
    1768:	41 f1       	breq	.+80     	; 0x17ba <DIO_u8SetPortValue+0x78>
    176a:	8c 81       	ldd	r24, Y+4	; 0x04
    176c:	9d 81       	ldd	r25, Y+5	; 0x05
    176e:	83 30       	cpi	r24, 0x03	; 3
    1770:	91 05       	cpc	r25, r1
    1772:	34 f4       	brge	.+12     	; 0x1780 <DIO_u8SetPortValue+0x3e>
    1774:	2c 81       	ldd	r18, Y+4	; 0x04
    1776:	3d 81       	ldd	r19, Y+5	; 0x05
    1778:	21 30       	cpi	r18, 0x01	; 1
    177a:	31 05       	cpc	r19, r1
    177c:	61 f0       	breq	.+24     	; 0x1796 <DIO_u8SetPortValue+0x54>
    177e:	52 c0       	rjmp	.+164    	; 0x1824 <DIO_u8SetPortValue+0xe2>
    1780:	4c 81       	ldd	r20, Y+4	; 0x04
    1782:	5d 81       	ldd	r21, Y+5	; 0x05
    1784:	43 30       	cpi	r20, 0x03	; 3
    1786:	51 05       	cpc	r21, r1
    1788:	51 f1       	breq	.+84     	; 0x17de <DIO_u8SetPortValue+0x9c>
    178a:	8c 81       	ldd	r24, Y+4	; 0x04
    178c:	9d 81       	ldd	r25, Y+5	; 0x05
    178e:	84 30       	cpi	r24, 0x04	; 4
    1790:	91 05       	cpc	r25, r1
    1792:	b9 f1       	breq	.+110    	; 0x1802 <DIO_u8SetPortValue+0xc0>
    1794:	47 c0       	rjmp	.+142    	; 0x1824 <DIO_u8SetPortValue+0xe2>
	case PORT_A:
		Local_PinVal = GET_BIT(DIO_PORTA,Copy_u8PinNo);
    1796:	eb e3       	ldi	r30, 0x3B	; 59
    1798:	f0 e0       	ldi	r31, 0x00	; 0
    179a:	80 81       	ld	r24, Z
    179c:	28 2f       	mov	r18, r24
    179e:	30 e0       	ldi	r19, 0x00	; 0
    17a0:	8b 81       	ldd	r24, Y+3	; 0x03
    17a2:	88 2f       	mov	r24, r24
    17a4:	90 e0       	ldi	r25, 0x00	; 0
    17a6:	a9 01       	movw	r20, r18
    17a8:	02 c0       	rjmp	.+4      	; 0x17ae <DIO_u8SetPortValue+0x6c>
    17aa:	55 95       	asr	r21
    17ac:	47 95       	ror	r20
    17ae:	8a 95       	dec	r24
    17b0:	e2 f7       	brpl	.-8      	; 0x17aa <DIO_u8SetPortValue+0x68>
    17b2:	ca 01       	movw	r24, r20
    17b4:	81 70       	andi	r24, 0x01	; 1
    17b6:	89 83       	std	Y+1, r24	; 0x01
    17b8:	35 c0       	rjmp	.+106    	; 0x1824 <DIO_u8SetPortValue+0xe2>
		break;
	case PORT_B:
		Local_PinVal = GET_BIT(DIO_PORTB,Copy_u8PinNo);
    17ba:	e8 e3       	ldi	r30, 0x38	; 56
    17bc:	f0 e0       	ldi	r31, 0x00	; 0
    17be:	80 81       	ld	r24, Z
    17c0:	28 2f       	mov	r18, r24
    17c2:	30 e0       	ldi	r19, 0x00	; 0
    17c4:	8b 81       	ldd	r24, Y+3	; 0x03
    17c6:	88 2f       	mov	r24, r24
    17c8:	90 e0       	ldi	r25, 0x00	; 0
    17ca:	a9 01       	movw	r20, r18
    17cc:	02 c0       	rjmp	.+4      	; 0x17d2 <DIO_u8SetPortValue+0x90>
    17ce:	55 95       	asr	r21
    17d0:	47 95       	ror	r20
    17d2:	8a 95       	dec	r24
    17d4:	e2 f7       	brpl	.-8      	; 0x17ce <DIO_u8SetPortValue+0x8c>
    17d6:	ca 01       	movw	r24, r20
    17d8:	81 70       	andi	r24, 0x01	; 1
    17da:	89 83       	std	Y+1, r24	; 0x01
    17dc:	23 c0       	rjmp	.+70     	; 0x1824 <DIO_u8SetPortValue+0xe2>
		break;
	case PORT_C:
		Local_PinVal = GET_BIT(DIO_PORTC,Copy_u8PinNo);
    17de:	e5 e3       	ldi	r30, 0x35	; 53
    17e0:	f0 e0       	ldi	r31, 0x00	; 0
    17e2:	80 81       	ld	r24, Z
    17e4:	28 2f       	mov	r18, r24
    17e6:	30 e0       	ldi	r19, 0x00	; 0
    17e8:	8b 81       	ldd	r24, Y+3	; 0x03
    17ea:	88 2f       	mov	r24, r24
    17ec:	90 e0       	ldi	r25, 0x00	; 0
    17ee:	a9 01       	movw	r20, r18
    17f0:	02 c0       	rjmp	.+4      	; 0x17f6 <DIO_u8SetPortValue+0xb4>
    17f2:	55 95       	asr	r21
    17f4:	47 95       	ror	r20
    17f6:	8a 95       	dec	r24
    17f8:	e2 f7       	brpl	.-8      	; 0x17f2 <DIO_u8SetPortValue+0xb0>
    17fa:	ca 01       	movw	r24, r20
    17fc:	81 70       	andi	r24, 0x01	; 1
    17fe:	89 83       	std	Y+1, r24	; 0x01
    1800:	11 c0       	rjmp	.+34     	; 0x1824 <DIO_u8SetPortValue+0xe2>
		break;
	case PORT_D:
		Local_PinVal = GET_BIT(DIO_PORTD,Copy_u8PinNo);
    1802:	e2 e3       	ldi	r30, 0x32	; 50
    1804:	f0 e0       	ldi	r31, 0x00	; 0
    1806:	80 81       	ld	r24, Z
    1808:	28 2f       	mov	r18, r24
    180a:	30 e0       	ldi	r19, 0x00	; 0
    180c:	8b 81       	ldd	r24, Y+3	; 0x03
    180e:	88 2f       	mov	r24, r24
    1810:	90 e0       	ldi	r25, 0x00	; 0
    1812:	a9 01       	movw	r20, r18
    1814:	02 c0       	rjmp	.+4      	; 0x181a <DIO_u8SetPortValue+0xd8>
    1816:	55 95       	asr	r21
    1818:	47 95       	ror	r20
    181a:	8a 95       	dec	r24
    181c:	e2 f7       	brpl	.-8      	; 0x1816 <DIO_u8SetPortValue+0xd4>
    181e:	ca 01       	movw	r24, r20
    1820:	81 70       	andi	r24, 0x01	; 1
    1822:	89 83       	std	Y+1, r24	; 0x01
		break;
	}
	return Local_PinVal;
    1824:	89 81       	ldd	r24, Y+1	; 0x01
}
    1826:	0f 90       	pop	r0
    1828:	0f 90       	pop	r0
    182a:	0f 90       	pop	r0
    182c:	0f 90       	pop	r0
    182e:	0f 90       	pop	r0
    1830:	cf 91       	pop	r28
    1832:	df 91       	pop	r29
    1834:	08 95       	ret

00001836 <DIO_VoidTogPin>:
void DIO_VoidTogPin(u8 Copy_u8PortID, u8 Copy_u8PinNo)
{
    1836:	df 93       	push	r29
    1838:	cf 93       	push	r28
    183a:	00 d0       	rcall	.+0      	; 0x183c <DIO_VoidTogPin+0x6>
    183c:	00 d0       	rcall	.+0      	; 0x183e <DIO_VoidTogPin+0x8>
    183e:	cd b7       	in	r28, 0x3d	; 61
    1840:	de b7       	in	r29, 0x3e	; 62
    1842:	89 83       	std	Y+1, r24	; 0x01
    1844:	6a 83       	std	Y+2, r22	; 0x02
	switch (Copy_u8PortID) {
    1846:	89 81       	ldd	r24, Y+1	; 0x01
    1848:	28 2f       	mov	r18, r24
    184a:	30 e0       	ldi	r19, 0x00	; 0
    184c:	3c 83       	std	Y+4, r19	; 0x04
    184e:	2b 83       	std	Y+3, r18	; 0x03
    1850:	8b 81       	ldd	r24, Y+3	; 0x03
    1852:	9c 81       	ldd	r25, Y+4	; 0x04
    1854:	82 30       	cpi	r24, 0x02	; 2
    1856:	91 05       	cpc	r25, r1
    1858:	51 f1       	breq	.+84     	; 0x18ae <DIO_VoidTogPin+0x78>
    185a:	2b 81       	ldd	r18, Y+3	; 0x03
    185c:	3c 81       	ldd	r19, Y+4	; 0x04
    185e:	23 30       	cpi	r18, 0x03	; 3
    1860:	31 05       	cpc	r19, r1
    1862:	34 f4       	brge	.+12     	; 0x1870 <DIO_VoidTogPin+0x3a>
    1864:	8b 81       	ldd	r24, Y+3	; 0x03
    1866:	9c 81       	ldd	r25, Y+4	; 0x04
    1868:	81 30       	cpi	r24, 0x01	; 1
    186a:	91 05       	cpc	r25, r1
    186c:	61 f0       	breq	.+24     	; 0x1886 <DIO_VoidTogPin+0x50>
    186e:	5a c0       	rjmp	.+180    	; 0x1924 <DIO_VoidTogPin+0xee>
    1870:	2b 81       	ldd	r18, Y+3	; 0x03
    1872:	3c 81       	ldd	r19, Y+4	; 0x04
    1874:	23 30       	cpi	r18, 0x03	; 3
    1876:	31 05       	cpc	r19, r1
    1878:	71 f1       	breq	.+92     	; 0x18d6 <DIO_VoidTogPin+0xa0>
    187a:	8b 81       	ldd	r24, Y+3	; 0x03
    187c:	9c 81       	ldd	r25, Y+4	; 0x04
    187e:	84 30       	cpi	r24, 0x04	; 4
    1880:	91 05       	cpc	r25, r1
    1882:	e9 f1       	breq	.+122    	; 0x18fe <DIO_VoidTogPin+0xc8>
    1884:	4f c0       	rjmp	.+158    	; 0x1924 <DIO_VoidTogPin+0xee>
	case PORT_A:
		TOG_BIT(DIO_PORTA,Copy_u8PinNo);
    1886:	ab e3       	ldi	r26, 0x3B	; 59
    1888:	b0 e0       	ldi	r27, 0x00	; 0
    188a:	eb e3       	ldi	r30, 0x3B	; 59
    188c:	f0 e0       	ldi	r31, 0x00	; 0
    188e:	80 81       	ld	r24, Z
    1890:	48 2f       	mov	r20, r24
    1892:	8a 81       	ldd	r24, Y+2	; 0x02
    1894:	28 2f       	mov	r18, r24
    1896:	30 e0       	ldi	r19, 0x00	; 0
    1898:	81 e0       	ldi	r24, 0x01	; 1
    189a:	90 e0       	ldi	r25, 0x00	; 0
    189c:	02 2e       	mov	r0, r18
    189e:	02 c0       	rjmp	.+4      	; 0x18a4 <DIO_VoidTogPin+0x6e>
    18a0:	88 0f       	add	r24, r24
    18a2:	99 1f       	adc	r25, r25
    18a4:	0a 94       	dec	r0
    18a6:	e2 f7       	brpl	.-8      	; 0x18a0 <DIO_VoidTogPin+0x6a>
    18a8:	84 27       	eor	r24, r20
    18aa:	8c 93       	st	X, r24
    18ac:	3b c0       	rjmp	.+118    	; 0x1924 <DIO_VoidTogPin+0xee>
		break;
	case PORT_B:
		TOG_BIT(DIO_PORTB,Copy_u8PinNo);
    18ae:	a8 e3       	ldi	r26, 0x38	; 56
    18b0:	b0 e0       	ldi	r27, 0x00	; 0
    18b2:	e8 e3       	ldi	r30, 0x38	; 56
    18b4:	f0 e0       	ldi	r31, 0x00	; 0
    18b6:	80 81       	ld	r24, Z
    18b8:	48 2f       	mov	r20, r24
    18ba:	8a 81       	ldd	r24, Y+2	; 0x02
    18bc:	28 2f       	mov	r18, r24
    18be:	30 e0       	ldi	r19, 0x00	; 0
    18c0:	81 e0       	ldi	r24, 0x01	; 1
    18c2:	90 e0       	ldi	r25, 0x00	; 0
    18c4:	02 2e       	mov	r0, r18
    18c6:	02 c0       	rjmp	.+4      	; 0x18cc <DIO_VoidTogPin+0x96>
    18c8:	88 0f       	add	r24, r24
    18ca:	99 1f       	adc	r25, r25
    18cc:	0a 94       	dec	r0
    18ce:	e2 f7       	brpl	.-8      	; 0x18c8 <DIO_VoidTogPin+0x92>
    18d0:	84 27       	eor	r24, r20
    18d2:	8c 93       	st	X, r24
    18d4:	27 c0       	rjmp	.+78     	; 0x1924 <DIO_VoidTogPin+0xee>
		break;
	case PORT_C:
		TOG_BIT(DIO_PORTC,Copy_u8PinNo);
    18d6:	a5 e3       	ldi	r26, 0x35	; 53
    18d8:	b0 e0       	ldi	r27, 0x00	; 0
    18da:	e5 e3       	ldi	r30, 0x35	; 53
    18dc:	f0 e0       	ldi	r31, 0x00	; 0
    18de:	80 81       	ld	r24, Z
    18e0:	48 2f       	mov	r20, r24
    18e2:	8a 81       	ldd	r24, Y+2	; 0x02
    18e4:	28 2f       	mov	r18, r24
    18e6:	30 e0       	ldi	r19, 0x00	; 0
    18e8:	81 e0       	ldi	r24, 0x01	; 1
    18ea:	90 e0       	ldi	r25, 0x00	; 0
    18ec:	02 2e       	mov	r0, r18
    18ee:	02 c0       	rjmp	.+4      	; 0x18f4 <DIO_VoidTogPin+0xbe>
    18f0:	88 0f       	add	r24, r24
    18f2:	99 1f       	adc	r25, r25
    18f4:	0a 94       	dec	r0
    18f6:	e2 f7       	brpl	.-8      	; 0x18f0 <DIO_VoidTogPin+0xba>
    18f8:	84 27       	eor	r24, r20
    18fa:	8c 93       	st	X, r24
    18fc:	13 c0       	rjmp	.+38     	; 0x1924 <DIO_VoidTogPin+0xee>
		break;
	case PORT_D:
		TOG_BIT(DIO_PORTD,Copy_u8PinNo);
    18fe:	a2 e3       	ldi	r26, 0x32	; 50
    1900:	b0 e0       	ldi	r27, 0x00	; 0
    1902:	e2 e3       	ldi	r30, 0x32	; 50
    1904:	f0 e0       	ldi	r31, 0x00	; 0
    1906:	80 81       	ld	r24, Z
    1908:	48 2f       	mov	r20, r24
    190a:	8a 81       	ldd	r24, Y+2	; 0x02
    190c:	28 2f       	mov	r18, r24
    190e:	30 e0       	ldi	r19, 0x00	; 0
    1910:	81 e0       	ldi	r24, 0x01	; 1
    1912:	90 e0       	ldi	r25, 0x00	; 0
    1914:	02 2e       	mov	r0, r18
    1916:	02 c0       	rjmp	.+4      	; 0x191c <DIO_VoidTogPin+0xe6>
    1918:	88 0f       	add	r24, r24
    191a:	99 1f       	adc	r25, r25
    191c:	0a 94       	dec	r0
    191e:	e2 f7       	brpl	.-8      	; 0x1918 <DIO_VoidTogPin+0xe2>
    1920:	84 27       	eor	r24, r20
    1922:	8c 93       	st	X, r24
		break;
	}
}
    1924:	0f 90       	pop	r0
    1926:	0f 90       	pop	r0
    1928:	0f 90       	pop	r0
    192a:	0f 90       	pop	r0
    192c:	cf 91       	pop	r28
    192e:	df 91       	pop	r29
    1930:	08 95       	ret

00001932 <DIO_u8GetPinVal>:
u8 DIO_u8GetPinVal(u8 Copy_u8PortID, u8 Copy_u8PinNo)
{
    1932:	df 93       	push	r29
    1934:	cf 93       	push	r28
    1936:	00 d0       	rcall	.+0      	; 0x1938 <DIO_u8GetPinVal+0x6>
    1938:	00 d0       	rcall	.+0      	; 0x193a <DIO_u8GetPinVal+0x8>
    193a:	00 d0       	rcall	.+0      	; 0x193c <DIO_u8GetPinVal+0xa>
    193c:	cd b7       	in	r28, 0x3d	; 61
    193e:	de b7       	in	r29, 0x3e	; 62
    1940:	8a 83       	std	Y+2, r24	; 0x02
    1942:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_returndata = 0;
    1944:	19 82       	std	Y+1, r1	; 0x01
	if (Copy_u8PortID <= PORT_D && Copy_u8PinNo <= PIN_7)
    1946:	8a 81       	ldd	r24, Y+2	; 0x02
    1948:	85 30       	cpi	r24, 0x05	; 5
    194a:	08 f0       	brcs	.+2      	; 0x194e <DIO_u8GetPinVal+0x1c>
    194c:	6e c0       	rjmp	.+220    	; 0x1a2a <DIO_u8GetPinVal+0xf8>
    194e:	8b 81       	ldd	r24, Y+3	; 0x03
    1950:	88 30       	cpi	r24, 0x08	; 8
    1952:	08 f0       	brcs	.+2      	; 0x1956 <DIO_u8GetPinVal+0x24>
    1954:	6a c0       	rjmp	.+212    	; 0x1a2a <DIO_u8GetPinVal+0xf8>
	{
		switch (Copy_u8PortID)
    1956:	8a 81       	ldd	r24, Y+2	; 0x02
    1958:	28 2f       	mov	r18, r24
    195a:	30 e0       	ldi	r19, 0x00	; 0
    195c:	3e 83       	std	Y+6, r19	; 0x06
    195e:	2d 83       	std	Y+5, r18	; 0x05
    1960:	4d 81       	ldd	r20, Y+5	; 0x05
    1962:	5e 81       	ldd	r21, Y+6	; 0x06
    1964:	42 30       	cpi	r20, 0x02	; 2
    1966:	51 05       	cpc	r21, r1
    1968:	41 f1       	breq	.+80     	; 0x19ba <DIO_u8GetPinVal+0x88>
    196a:	8d 81       	ldd	r24, Y+5	; 0x05
    196c:	9e 81       	ldd	r25, Y+6	; 0x06
    196e:	83 30       	cpi	r24, 0x03	; 3
    1970:	91 05       	cpc	r25, r1
    1972:	34 f4       	brge	.+12     	; 0x1980 <DIO_u8GetPinVal+0x4e>
    1974:	2d 81       	ldd	r18, Y+5	; 0x05
    1976:	3e 81       	ldd	r19, Y+6	; 0x06
    1978:	21 30       	cpi	r18, 0x01	; 1
    197a:	31 05       	cpc	r19, r1
    197c:	61 f0       	breq	.+24     	; 0x1996 <DIO_u8GetPinVal+0x64>
    197e:	52 c0       	rjmp	.+164    	; 0x1a24 <DIO_u8GetPinVal+0xf2>
    1980:	4d 81       	ldd	r20, Y+5	; 0x05
    1982:	5e 81       	ldd	r21, Y+6	; 0x06
    1984:	43 30       	cpi	r20, 0x03	; 3
    1986:	51 05       	cpc	r21, r1
    1988:	51 f1       	breq	.+84     	; 0x19de <DIO_u8GetPinVal+0xac>
    198a:	8d 81       	ldd	r24, Y+5	; 0x05
    198c:	9e 81       	ldd	r25, Y+6	; 0x06
    198e:	84 30       	cpi	r24, 0x04	; 4
    1990:	91 05       	cpc	r25, r1
    1992:	b9 f1       	breq	.+110    	; 0x1a02 <DIO_u8GetPinVal+0xd0>
    1994:	47 c0       	rjmp	.+142    	; 0x1a24 <DIO_u8GetPinVal+0xf2>
		{
		case PORT_A:
			Local_returndata = GET_BIT(DIO_PINA, Copy_u8PinNo);
    1996:	e9 e3       	ldi	r30, 0x39	; 57
    1998:	f0 e0       	ldi	r31, 0x00	; 0
    199a:	80 81       	ld	r24, Z
    199c:	28 2f       	mov	r18, r24
    199e:	30 e0       	ldi	r19, 0x00	; 0
    19a0:	8b 81       	ldd	r24, Y+3	; 0x03
    19a2:	88 2f       	mov	r24, r24
    19a4:	90 e0       	ldi	r25, 0x00	; 0
    19a6:	a9 01       	movw	r20, r18
    19a8:	02 c0       	rjmp	.+4      	; 0x19ae <DIO_u8GetPinVal+0x7c>
    19aa:	55 95       	asr	r21
    19ac:	47 95       	ror	r20
    19ae:	8a 95       	dec	r24
    19b0:	e2 f7       	brpl	.-8      	; 0x19aa <DIO_u8GetPinVal+0x78>
    19b2:	ca 01       	movw	r24, r20
    19b4:	81 70       	andi	r24, 0x01	; 1
    19b6:	89 83       	std	Y+1, r24	; 0x01
    19b8:	35 c0       	rjmp	.+106    	; 0x1a24 <DIO_u8GetPinVal+0xf2>
			break;
		case PORT_B:
			Local_returndata = GET_BIT(DIO_PINB, Copy_u8PinNo);
    19ba:	e6 e3       	ldi	r30, 0x36	; 54
    19bc:	f0 e0       	ldi	r31, 0x00	; 0
    19be:	80 81       	ld	r24, Z
    19c0:	28 2f       	mov	r18, r24
    19c2:	30 e0       	ldi	r19, 0x00	; 0
    19c4:	8b 81       	ldd	r24, Y+3	; 0x03
    19c6:	88 2f       	mov	r24, r24
    19c8:	90 e0       	ldi	r25, 0x00	; 0
    19ca:	a9 01       	movw	r20, r18
    19cc:	02 c0       	rjmp	.+4      	; 0x19d2 <DIO_u8GetPinVal+0xa0>
    19ce:	55 95       	asr	r21
    19d0:	47 95       	ror	r20
    19d2:	8a 95       	dec	r24
    19d4:	e2 f7       	brpl	.-8      	; 0x19ce <DIO_u8GetPinVal+0x9c>
    19d6:	ca 01       	movw	r24, r20
    19d8:	81 70       	andi	r24, 0x01	; 1
    19da:	89 83       	std	Y+1, r24	; 0x01
    19dc:	23 c0       	rjmp	.+70     	; 0x1a24 <DIO_u8GetPinVal+0xf2>
			break;
		case PORT_C:
			Local_returndata = GET_BIT(DIO_PINC, Copy_u8PinNo);
    19de:	e3 e3       	ldi	r30, 0x33	; 51
    19e0:	f0 e0       	ldi	r31, 0x00	; 0
    19e2:	80 81       	ld	r24, Z
    19e4:	28 2f       	mov	r18, r24
    19e6:	30 e0       	ldi	r19, 0x00	; 0
    19e8:	8b 81       	ldd	r24, Y+3	; 0x03
    19ea:	88 2f       	mov	r24, r24
    19ec:	90 e0       	ldi	r25, 0x00	; 0
    19ee:	a9 01       	movw	r20, r18
    19f0:	02 c0       	rjmp	.+4      	; 0x19f6 <DIO_u8GetPinVal+0xc4>
    19f2:	55 95       	asr	r21
    19f4:	47 95       	ror	r20
    19f6:	8a 95       	dec	r24
    19f8:	e2 f7       	brpl	.-8      	; 0x19f2 <DIO_u8GetPinVal+0xc0>
    19fa:	ca 01       	movw	r24, r20
    19fc:	81 70       	andi	r24, 0x01	; 1
    19fe:	89 83       	std	Y+1, r24	; 0x01
    1a00:	11 c0       	rjmp	.+34     	; 0x1a24 <DIO_u8GetPinVal+0xf2>
			break;
		case PORT_D:
			Local_returndata = GET_BIT(DIO_PIND, Copy_u8PinNo);
    1a02:	e0 e3       	ldi	r30, 0x30	; 48
    1a04:	f0 e0       	ldi	r31, 0x00	; 0
    1a06:	80 81       	ld	r24, Z
    1a08:	28 2f       	mov	r18, r24
    1a0a:	30 e0       	ldi	r19, 0x00	; 0
    1a0c:	8b 81       	ldd	r24, Y+3	; 0x03
    1a0e:	88 2f       	mov	r24, r24
    1a10:	90 e0       	ldi	r25, 0x00	; 0
    1a12:	a9 01       	movw	r20, r18
    1a14:	02 c0       	rjmp	.+4      	; 0x1a1a <DIO_u8GetPinVal+0xe8>
    1a16:	55 95       	asr	r21
    1a18:	47 95       	ror	r20
    1a1a:	8a 95       	dec	r24
    1a1c:	e2 f7       	brpl	.-8      	; 0x1a16 <DIO_u8GetPinVal+0xe4>
    1a1e:	ca 01       	movw	r24, r20
    1a20:	81 70       	andi	r24, 0x01	; 1
    1a22:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
		return Local_returndata;
    1a24:	59 81       	ldd	r21, Y+1	; 0x01
    1a26:	5c 83       	std	Y+4, r21	; 0x04
    1a28:	02 c0       	rjmp	.+4      	; 0x1a2e <DIO_u8GetPinVal+0xfc>
	}
	else
	{
		return -1;
    1a2a:	8f ef       	ldi	r24, 0xFF	; 255
    1a2c:	8c 83       	std	Y+4, r24	; 0x04
    1a2e:	8c 81       	ldd	r24, Y+4	; 0x04
	}
}
    1a30:	26 96       	adiw	r28, 0x06	; 6
    1a32:	0f b6       	in	r0, 0x3f	; 63
    1a34:	f8 94       	cli
    1a36:	de bf       	out	0x3e, r29	; 62
    1a38:	0f be       	out	0x3f, r0	; 63
    1a3a:	cd bf       	out	0x3d, r28	; 61
    1a3c:	cf 91       	pop	r28
    1a3e:	df 91       	pop	r29
    1a40:	08 95       	ret

00001a42 <ADC_voidInit>:
#include "../DIO/DIO_interface.h"

#include "ADC_interface.h"

void ADC_voidInit()
{
    1a42:	df 93       	push	r29
    1a44:	cf 93       	push	r28
    1a46:	cd b7       	in	r28, 0x3d	; 61
    1a48:	de b7       	in	r29, 0x3e	; 62
	/*Set reference voltage to AVCC*/
	ADC_ADMUX->REFS = VOLT_SELECT;
    1a4a:	e7 e2       	ldi	r30, 0x27	; 39
    1a4c:	f0 e0       	ldi	r31, 0x00	; 0
    1a4e:	80 81       	ld	r24, Z
    1a50:	8f 73       	andi	r24, 0x3F	; 63
    1a52:	80 64       	ori	r24, 0x40	; 64
    1a54:	80 83       	st	Z, r24
	/*activate left adjust result*/
	ADC_ADMUX->ADLAR = DATA_ORG;
    1a56:	e7 e2       	ldi	r30, 0x27	; 39
    1a58:	f0 e0       	ldi	r31, 0x00	; 0
    1a5a:	80 81       	ld	r24, Z
    1a5c:	8f 7d       	andi	r24, 0xDF	; 223
    1a5e:	80 83       	st	Z, r24
	/*Select prescaler to 8 --> 011*/
	ADC_ADCSRA->ADPS = PRESALAR;
    1a60:	e6 e2       	ldi	r30, 0x26	; 38
    1a62:	f0 e0       	ldi	r31, 0x00	; 0
    1a64:	80 81       	ld	r24, Z
    1a66:	88 7f       	andi	r24, 0xF8	; 248
    1a68:	86 60       	ori	r24, 0x06	; 6
    1a6a:	80 83       	st	Z, r24
	/*Enable ADC*/
	ADC_ADCSRA->ADEN = EN;
    1a6c:	e6 e2       	ldi	r30, 0x26	; 38
    1a6e:	f0 e0       	ldi	r31, 0x00	; 0
    1a70:	80 81       	ld	r24, Z
    1a72:	80 68       	ori	r24, 0x80	; 128
    1a74:	80 83       	st	Z, r24

	/*Enable ADC Interrupt if required*/
#ifdef ISR_ENABLE
	ADC_ADCSRA->ADIE = EN;
    1a76:	e6 e2       	ldi	r30, 0x26	; 38
    1a78:	f0 e0       	ldi	r31, 0x00	; 0
    1a7a:	80 81       	ld	r24, Z
    1a7c:	88 60       	ori	r24, 0x08	; 8
    1a7e:	80 83       	st	Z, r24
#endif

#ifdef TRIGGER_ENABLE
	ADC_ADCSRA->ADATE = EN;
    1a80:	e6 e2       	ldi	r30, 0x26	; 38
    1a82:	f0 e0       	ldi	r31, 0x00	; 0
    1a84:	80 81       	ld	r24, Z
    1a86:	80 62       	ori	r24, 0x20	; 32
    1a88:	80 83       	st	Z, r24
	ADC_SFIOR->ADTS = TRIGGER_SOURCE;
    1a8a:	e0 e5       	ldi	r30, 0x50	; 80
    1a8c:	f0 e0       	ldi	r31, 0x00	; 0
    1a8e:	80 81       	ld	r24, Z
    1a90:	8f 71       	andi	r24, 0x1F	; 31
    1a92:	80 64       	ori	r24, 0x40	; 64
    1a94:	80 83       	st	Z, r24
#endif
}
    1a96:	cf 91       	pop	r28
    1a98:	df 91       	pop	r29
    1a9a:	08 95       	ret

00001a9c <ADC_voidChannelSelect>:
ADC_ERROR_RETURN ADC_voidChannelSelect(ADC_CHANNEL_NUM copy_u8ChannelSellect)
{
    1a9c:	df 93       	push	r29
    1a9e:	cf 93       	push	r28
    1aa0:	00 d0       	rcall	.+0      	; 0x1aa2 <ADC_voidChannelSelect+0x6>
    1aa2:	cd b7       	in	r28, 0x3d	; 61
    1aa4:	de b7       	in	r29, 0x3e	; 62
    1aa6:	8a 83       	std	Y+2, r24	; 0x02
	ADC_ERROR_RETURN Local_Error = OK;
    1aa8:	82 e0       	ldi	r24, 0x02	; 2
    1aaa:	89 83       	std	Y+1, r24	; 0x01
	if(copy_u8ChannelSellect <= CHANNEL_7)
    1aac:	8a 81       	ldd	r24, Y+2	; 0x02
    1aae:	88 30       	cpi	r24, 0x08	; 8
    1ab0:	80 f4       	brcc	.+32     	; 0x1ad2 <ADC_voidChannelSelect+0x36>
	{
		DIO_VoidSetPinDirection(PORT_A,copy_u8ChannelSellect,DIO_INPUT);
    1ab2:	81 e0       	ldi	r24, 0x01	; 1
    1ab4:	6a 81       	ldd	r22, Y+2	; 0x02
    1ab6:	40 e0       	ldi	r20, 0x00	; 0
    1ab8:	0e 94 8d 09 	call	0x131a	; 0x131a <DIO_VoidSetPinDirection>
		ADC_ADMUX->MUX = copy_u8ChannelSellect;
    1abc:	e7 e2       	ldi	r30, 0x27	; 39
    1abe:	f0 e0       	ldi	r31, 0x00	; 0
    1ac0:	8a 81       	ldd	r24, Y+2	; 0x02
    1ac2:	8f 71       	andi	r24, 0x1F	; 31
    1ac4:	98 2f       	mov	r25, r24
    1ac6:	9f 71       	andi	r25, 0x1F	; 31
    1ac8:	80 81       	ld	r24, Z
    1aca:	80 7e       	andi	r24, 0xE0	; 224
    1acc:	89 2b       	or	r24, r25
    1ace:	80 83       	st	Z, r24
    1ad0:	02 c0       	rjmp	.+4      	; 0x1ad6 <ADC_voidChannelSelect+0x3a>
	}
	else
	{
		Local_Error = NUM_OUT_OF_RANGE;
    1ad2:	83 e0       	ldi	r24, 0x03	; 3
    1ad4:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_Error;
    1ad6:	89 81       	ldd	r24, Y+1	; 0x01
}
    1ad8:	0f 90       	pop	r0
    1ada:	0f 90       	pop	r0
    1adc:	cf 91       	pop	r28
    1ade:	df 91       	pop	r29
    1ae0:	08 95       	ret

00001ae2 <ADC_StartConversionBoling>:

ADC_ERROR_RETURN ADC_StartConversionBoling (u16 *copy_Pu8Data)
{
    1ae2:	df 93       	push	r29
    1ae4:	cf 93       	push	r28
    1ae6:	cd b7       	in	r28, 0x3d	; 61
    1ae8:	de b7       	in	r29, 0x3e	; 62
    1aea:	27 97       	sbiw	r28, 0x07	; 7
    1aec:	0f b6       	in	r0, 0x3f	; 63
    1aee:	f8 94       	cli
    1af0:	de bf       	out	0x3e, r29	; 62
    1af2:	0f be       	out	0x3f, r0	; 63
    1af4:	cd bf       	out	0x3d, r28	; 61
    1af6:	9f 83       	std	Y+7, r25	; 0x07
    1af8:	8e 83       	std	Y+6, r24	; 0x06
	ADC_ERROR_RETURN Local_Error = OK;
    1afa:	82 e0       	ldi	r24, 0x02	; 2
    1afc:	8d 83       	std	Y+5, r24	; 0x05
	u32 Counter = 0;
    1afe:	19 82       	std	Y+1, r1	; 0x01
    1b00:	1a 82       	std	Y+2, r1	; 0x02
    1b02:	1b 82       	std	Y+3, r1	; 0x03
    1b04:	1c 82       	std	Y+4, r1	; 0x04
	if(copy_Pu8Data != NULL)
    1b06:	8e 81       	ldd	r24, Y+6	; 0x06
    1b08:	9f 81       	ldd	r25, Y+7	; 0x07
    1b0a:	00 97       	sbiw	r24, 0x00	; 0
    1b0c:	11 f1       	breq	.+68     	; 0x1b52 <ADC_StartConversionBoling+0x70>
	{
		ADC_ADCSRA->ADSC = EN;
    1b0e:	e6 e2       	ldi	r30, 0x26	; 38
    1b10:	f0 e0       	ldi	r31, 0x00	; 0
    1b12:	80 81       	ld	r24, Z
    1b14:	80 64       	ori	r24, 0x40	; 64
    1b16:	80 83       	st	Z, r24
		/*Polling Until the Flag is Set or till the timeout*/
		while((ADC_ADCSRA->ADIF == 0))// && (Counter <= TIMEOUT))
    1b18:	e6 e2       	ldi	r30, 0x26	; 38
    1b1a:	f0 e0       	ldi	r31, 0x00	; 0
    1b1c:	80 81       	ld	r24, Z
    1b1e:	80 71       	andi	r24, 0x10	; 16
    1b20:	88 23       	and	r24, r24
    1b22:	d1 f3       	breq	.-12     	; 0x1b18 <ADC_StartConversionBoling+0x36>
		{
			//Counter++;
		}
		if(ADC_ADCSRA->ADIF == 1)
    1b24:	e6 e2       	ldi	r30, 0x26	; 38
    1b26:	f0 e0       	ldi	r31, 0x00	; 0
    1b28:	80 81       	ld	r24, Z
    1b2a:	80 71       	andi	r24, 0x10	; 16
    1b2c:	88 23       	and	r24, r24
    1b2e:	71 f0       	breq	.+28     	; 0x1b4c <ADC_StartConversionBoling+0x6a>
		{
			ADC_ADCSRA->ADIF = EN;
    1b30:	e6 e2       	ldi	r30, 0x26	; 38
    1b32:	f0 e0       	ldi	r31, 0x00	; 0
    1b34:	80 81       	ld	r24, Z
    1b36:	80 61       	ori	r24, 0x10	; 16
    1b38:	80 83       	st	Z, r24
#if DATA_ORG == RIGHT_DATA
			(*copy_Pu8Data) = ADC_DATA;
    1b3a:	e4 e2       	ldi	r30, 0x24	; 36
    1b3c:	f0 e0       	ldi	r31, 0x00	; 0
    1b3e:	80 81       	ld	r24, Z
    1b40:	91 81       	ldd	r25, Z+1	; 0x01
    1b42:	ee 81       	ldd	r30, Y+6	; 0x06
    1b44:	ff 81       	ldd	r31, Y+7	; 0x07
    1b46:	91 83       	std	Z+1, r25	; 0x01
    1b48:	80 83       	st	Z, r24
    1b4a:	04 c0       	rjmp	.+8      	; 0x1b54 <ADC_StartConversionBoling+0x72>
			(*copy_Pu8Data) = ((u16)ADC_DATA >> 6);
#endif
		}
		else
		{
			Local_Error = TIME_OUT_ERROR;
    1b4c:	81 e0       	ldi	r24, 0x01	; 1
    1b4e:	8d 83       	std	Y+5, r24	; 0x05
    1b50:	01 c0       	rjmp	.+2      	; 0x1b54 <ADC_StartConversionBoling+0x72>
		}
	}
	else
	{
		Local_Error = NULL_ERROR;
    1b52:	1d 82       	std	Y+5, r1	; 0x05
	}
	return Local_Error;
    1b54:	8d 81       	ldd	r24, Y+5	; 0x05
}
    1b56:	27 96       	adiw	r28, 0x07	; 7
    1b58:	0f b6       	in	r0, 0x3f	; 63
    1b5a:	f8 94       	cli
    1b5c:	de bf       	out	0x3e, r29	; 62
    1b5e:	0f be       	out	0x3f, r0	; 63
    1b60:	cd bf       	out	0x3d, r28	; 61
    1b62:	cf 91       	pop	r28
    1b64:	df 91       	pop	r29
    1b66:	08 95       	ret

00001b68 <ADC_StartConversion>:
void ADC_StartConversion(void)
{
    1b68:	df 93       	push	r29
    1b6a:	cf 93       	push	r28
    1b6c:	cd b7       	in	r28, 0x3d	; 61
    1b6e:	de b7       	in	r29, 0x3e	; 62
	ADC_ADCSRA->ADSC = EN;
    1b70:	e6 e2       	ldi	r30, 0x26	; 38
    1b72:	f0 e0       	ldi	r31, 0x00	; 0
    1b74:	80 81       	ld	r24, Z
    1b76:	80 64       	ori	r24, 0x40	; 64
    1b78:	80 83       	st	Z, r24
}
    1b7a:	cf 91       	pop	r28
    1b7c:	df 91       	pop	r29
    1b7e:	08 95       	ret

00001b80 <ADC_voidChannelMulBoling>:
ADC_ERROR_RETURN ADC_voidChannelMulBoling(u16 *copy_Pu8Data)
{
    1b80:	df 93       	push	r29
    1b82:	cf 93       	push	r28
    1b84:	00 d0       	rcall	.+0      	; 0x1b86 <ADC_voidChannelMulBoling+0x6>
    1b86:	00 d0       	rcall	.+0      	; 0x1b88 <ADC_voidChannelMulBoling+0x8>
    1b88:	cd b7       	in	r28, 0x3d	; 61
    1b8a:	de b7       	in	r29, 0x3e	; 62
    1b8c:	9c 83       	std	Y+4, r25	; 0x04
    1b8e:	8b 83       	std	Y+3, r24	; 0x03
	u8 i = 7;
    1b90:	87 e0       	ldi	r24, 0x07	; 7
    1b92:	8a 83       	std	Y+2, r24	; 0x02
	ADC_ERROR_RETURN Local_Error = OK;
    1b94:	82 e0       	ldi	r24, 0x02	; 2
    1b96:	89 83       	std	Y+1, r24	; 0x01
	if(copy_Pu8Data != NULL)
    1b98:	8b 81       	ldd	r24, Y+3	; 0x03
    1b9a:	9c 81       	ldd	r25, Y+4	; 0x04
    1b9c:	00 97       	sbiw	r24, 0x00	; 0
    1b9e:	c1 f0       	breq	.+48     	; 0x1bd0 <ADC_voidChannelMulBoling+0x50>
    1ba0:	13 c0       	rjmp	.+38     	; 0x1bc8 <ADC_voidChannelMulBoling+0x48>
	{
		while(i != 0)
		{
			ADC_voidChannelSelect(i);
    1ba2:	8a 81       	ldd	r24, Y+2	; 0x02
    1ba4:	0e 94 4e 0d 	call	0x1a9c	; 0x1a9c <ADC_voidChannelSelect>
			Local_Error = ADC_StartConversionBoling(&copy_Pu8Data[i]);
    1ba8:	8a 81       	ldd	r24, Y+2	; 0x02
    1baa:	88 2f       	mov	r24, r24
    1bac:	90 e0       	ldi	r25, 0x00	; 0
    1bae:	9c 01       	movw	r18, r24
    1bb0:	22 0f       	add	r18, r18
    1bb2:	33 1f       	adc	r19, r19
    1bb4:	8b 81       	ldd	r24, Y+3	; 0x03
    1bb6:	9c 81       	ldd	r25, Y+4	; 0x04
    1bb8:	82 0f       	add	r24, r18
    1bba:	93 1f       	adc	r25, r19
    1bbc:	0e 94 71 0d 	call	0x1ae2	; 0x1ae2 <ADC_StartConversionBoling>
    1bc0:	89 83       	std	Y+1, r24	; 0x01

			/*if(Local_Error == TIMEOUT)
			{
				Local_Error = ADC_StartConversionBoling(&copy_Pu8Data[i]);
			}*/
			i--;
    1bc2:	8a 81       	ldd	r24, Y+2	; 0x02
    1bc4:	81 50       	subi	r24, 0x01	; 1
    1bc6:	8a 83       	std	Y+2, r24	; 0x02
{
	u8 i = 7;
	ADC_ERROR_RETURN Local_Error = OK;
	if(copy_Pu8Data != NULL)
	{
		while(i != 0)
    1bc8:	8a 81       	ldd	r24, Y+2	; 0x02
    1bca:	88 23       	and	r24, r24
    1bcc:	51 f7       	brne	.-44     	; 0x1ba2 <ADC_voidChannelMulBoling+0x22>
    1bce:	01 c0       	rjmp	.+2      	; 0x1bd2 <ADC_voidChannelMulBoling+0x52>
			i--;
		}
	}
	else
	{
		Local_Error = NULL_ERROR;
    1bd0:	19 82       	std	Y+1, r1	; 0x01
	}
	return Local_Error;
    1bd2:	89 81       	ldd	r24, Y+1	; 0x01
}
    1bd4:	0f 90       	pop	r0
    1bd6:	0f 90       	pop	r0
    1bd8:	0f 90       	pop	r0
    1bda:	0f 90       	pop	r0
    1bdc:	cf 91       	pop	r28
    1bde:	df 91       	pop	r29
    1be0:	08 95       	ret

00001be2 <ADC_Mapping>:
u16 ADC_Mapping (u16 x1 ,u16 x2 , u16 y1 ,u16 y2)
{
    1be2:	ef 92       	push	r14
    1be4:	ff 92       	push	r15
    1be6:	0f 93       	push	r16
    1be8:	1f 93       	push	r17
    1bea:	df 93       	push	r29
    1bec:	cf 93       	push	r28
    1bee:	cd b7       	in	r28, 0x3d	; 61
    1bf0:	de b7       	in	r29, 0x3e	; 62
    1bf2:	2c 97       	sbiw	r28, 0x0c	; 12
    1bf4:	0f b6       	in	r0, 0x3f	; 63
    1bf6:	f8 94       	cli
    1bf8:	de bf       	out	0x3e, r29	; 62
    1bfa:	0f be       	out	0x3f, r0	; 63
    1bfc:	cd bf       	out	0x3d, r28	; 61
    1bfe:	9e 83       	std	Y+6, r25	; 0x06
    1c00:	8d 83       	std	Y+5, r24	; 0x05
    1c02:	78 87       	std	Y+8, r23	; 0x08
    1c04:	6f 83       	std	Y+7, r22	; 0x07
    1c06:	5a 87       	std	Y+10, r21	; 0x0a
    1c08:	49 87       	std	Y+9, r20	; 0x09
    1c0a:	3c 87       	std	Y+12, r19	; 0x0c
    1c0c:	2b 87       	std	Y+11, r18	; 0x0b
	 * for Example 0 to 1023 to 2500 to 5000
	 *						(x - x1) * (y2 - y1)
	 * By the Equation y = ----------------------- + y1
	 * 							  (x2-x1)
	 * */
	u16 Local_u16NewData = 0;
    1c0e:	1c 82       	std	Y+4, r1	; 0x04
    1c10:	1b 82       	std	Y+3, r1	; 0x03
	u16 Local_u16OLdData = 0;
    1c12:	1a 82       	std	Y+2, r1	; 0x02
    1c14:	19 82       	std	Y+1, r1	; 0x01

#if DATA_ORG == RIGHT_DATA
	Local_u16OLdData = ADC_DATA;
    1c16:	e4 e2       	ldi	r30, 0x24	; 36
    1c18:	f0 e0       	ldi	r31, 0x00	; 0
    1c1a:	80 81       	ld	r24, Z
    1c1c:	91 81       	ldd	r25, Z+1	; 0x01
    1c1e:	9a 83       	std	Y+2, r25	; 0x02
    1c20:	89 83       	std	Y+1, r24	; 0x01
#elif DATA_ORG == LEFT_DATA
	Local_u16OLdData = ((u16)ADC_DATA >> 6);
#endif

	/*Mappu*/
	Local_u16NewData = ( ( (u32)(Local_u16OLdData - x1) * (y2 - y1) )/ (x2 - x1) ) + y1;
    1c22:	29 81       	ldd	r18, Y+1	; 0x01
    1c24:	3a 81       	ldd	r19, Y+2	; 0x02
    1c26:	8d 81       	ldd	r24, Y+5	; 0x05
    1c28:	9e 81       	ldd	r25, Y+6	; 0x06
    1c2a:	a9 01       	movw	r20, r18
    1c2c:	48 1b       	sub	r20, r24
    1c2e:	59 0b       	sbc	r21, r25
    1c30:	ca 01       	movw	r24, r20
    1c32:	7c 01       	movw	r14, r24
    1c34:	00 e0       	ldi	r16, 0x00	; 0
    1c36:	10 e0       	ldi	r17, 0x00	; 0
    1c38:	2b 85       	ldd	r18, Y+11	; 0x0b
    1c3a:	3c 85       	ldd	r19, Y+12	; 0x0c
    1c3c:	89 85       	ldd	r24, Y+9	; 0x09
    1c3e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c40:	a9 01       	movw	r20, r18
    1c42:	48 1b       	sub	r20, r24
    1c44:	59 0b       	sbc	r21, r25
    1c46:	ca 01       	movw	r24, r20
    1c48:	9c 01       	movw	r18, r24
    1c4a:	40 e0       	ldi	r20, 0x00	; 0
    1c4c:	50 e0       	ldi	r21, 0x00	; 0
    1c4e:	c8 01       	movw	r24, r16
    1c50:	b7 01       	movw	r22, r14
    1c52:	0e 94 db 1b 	call	0x37b6	; 0x37b6 <__mulsi3>
    1c56:	7b 01       	movw	r14, r22
    1c58:	8c 01       	movw	r16, r24
    1c5a:	2f 81       	ldd	r18, Y+7	; 0x07
    1c5c:	38 85       	ldd	r19, Y+8	; 0x08
    1c5e:	8d 81       	ldd	r24, Y+5	; 0x05
    1c60:	9e 81       	ldd	r25, Y+6	; 0x06
    1c62:	a9 01       	movw	r20, r18
    1c64:	48 1b       	sub	r20, r24
    1c66:	59 0b       	sbc	r21, r25
    1c68:	ca 01       	movw	r24, r20
    1c6a:	9c 01       	movw	r18, r24
    1c6c:	40 e0       	ldi	r20, 0x00	; 0
    1c6e:	50 e0       	ldi	r21, 0x00	; 0
    1c70:	c8 01       	movw	r24, r16
    1c72:	b7 01       	movw	r22, r14
    1c74:	0e 94 fa 1b 	call	0x37f4	; 0x37f4 <__udivmodsi4>
    1c78:	da 01       	movw	r26, r20
    1c7a:	c9 01       	movw	r24, r18
    1c7c:	9c 01       	movw	r18, r24
    1c7e:	89 85       	ldd	r24, Y+9	; 0x09
    1c80:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c82:	82 0f       	add	r24, r18
    1c84:	93 1f       	adc	r25, r19
    1c86:	9c 83       	std	Y+4, r25	; 0x04
    1c88:	8b 83       	std	Y+3, r24	; 0x03
	return Local_u16NewData;
    1c8a:	8b 81       	ldd	r24, Y+3	; 0x03
    1c8c:	9c 81       	ldd	r25, Y+4	; 0x04
}
    1c8e:	2c 96       	adiw	r28, 0x0c	; 12
    1c90:	0f b6       	in	r0, 0x3f	; 63
    1c92:	f8 94       	cli
    1c94:	de bf       	out	0x3e, r29	; 62
    1c96:	0f be       	out	0x3f, r0	; 63
    1c98:	cd bf       	out	0x3d, r28	; 61
    1c9a:	cf 91       	pop	r28
    1c9c:	df 91       	pop	r29
    1c9e:	1f 91       	pop	r17
    1ca0:	0f 91       	pop	r16
    1ca2:	ff 90       	pop	r15
    1ca4:	ef 90       	pop	r14
    1ca6:	08 95       	ret

00001ca8 <ADC_voidSetCallBack>:
#ifdef ISR_ENABLE
static u16 *ADC_po16DataResult = NULL;
static void (*ADC_CallBackPTR)(void);

ADC_ERROR_RETURN ADC_voidSetCallBack(u16 *copy_po16Data, void(*PTR)(void))
{
    1ca8:	df 93       	push	r29
    1caa:	cf 93       	push	r28
    1cac:	00 d0       	rcall	.+0      	; 0x1cae <ADC_voidSetCallBack+0x6>
    1cae:	00 d0       	rcall	.+0      	; 0x1cb0 <ADC_voidSetCallBack+0x8>
    1cb0:	0f 92       	push	r0
    1cb2:	cd b7       	in	r28, 0x3d	; 61
    1cb4:	de b7       	in	r29, 0x3e	; 62
    1cb6:	9b 83       	std	Y+3, r25	; 0x03
    1cb8:	8a 83       	std	Y+2, r24	; 0x02
    1cba:	7d 83       	std	Y+5, r23	; 0x05
    1cbc:	6c 83       	std	Y+4, r22	; 0x04
	ADC_ERROR_RETURN Local_Error = OK;
    1cbe:	82 e0       	ldi	r24, 0x02	; 2
    1cc0:	89 83       	std	Y+1, r24	; 0x01
	if(copy_po16Data != NULL)
    1cc2:	8a 81       	ldd	r24, Y+2	; 0x02
    1cc4:	9b 81       	ldd	r25, Y+3	; 0x03
    1cc6:	00 97       	sbiw	r24, 0x00	; 0
    1cc8:	39 f0       	breq	.+14     	; 0x1cd8 <ADC_voidSetCallBack+0x30>
	{
		ADC_po16DataResult = copy_po16Data;
    1cca:	8a 81       	ldd	r24, Y+2	; 0x02
    1ccc:	9b 81       	ldd	r25, Y+3	; 0x03
    1cce:	90 93 91 01 	sts	0x0191, r25
    1cd2:	80 93 90 01 	sts	0x0190, r24
    1cd6:	01 c0       	rjmp	.+2      	; 0x1cda <ADC_voidSetCallBack+0x32>
	}
	else
	{
		Local_Error = NULL_ERROR;
    1cd8:	19 82       	std	Y+1, r1	; 0x01
	}
	if(PTR != NULL)
    1cda:	8c 81       	ldd	r24, Y+4	; 0x04
    1cdc:	9d 81       	ldd	r25, Y+5	; 0x05
    1cde:	00 97       	sbiw	r24, 0x00	; 0
    1ce0:	39 f0       	breq	.+14     	; 0x1cf0 <ADC_voidSetCallBack+0x48>
	{
		ADC_CallBackPTR = PTR;
    1ce2:	8c 81       	ldd	r24, Y+4	; 0x04
    1ce4:	9d 81       	ldd	r25, Y+5	; 0x05
    1ce6:	90 93 93 01 	sts	0x0193, r25
    1cea:	80 93 92 01 	sts	0x0192, r24
    1cee:	01 c0       	rjmp	.+2      	; 0x1cf2 <ADC_voidSetCallBack+0x4a>
	}
	else
	{
		Local_Error = NULL_ERROR;
    1cf0:	19 82       	std	Y+1, r1	; 0x01
	}
	return Local_Error;
    1cf2:	89 81       	ldd	r24, Y+1	; 0x01
}
    1cf4:	0f 90       	pop	r0
    1cf6:	0f 90       	pop	r0
    1cf8:	0f 90       	pop	r0
    1cfa:	0f 90       	pop	r0
    1cfc:	0f 90       	pop	r0
    1cfe:	cf 91       	pop	r28
    1d00:	df 91       	pop	r29
    1d02:	08 95       	ret

00001d04 <__vector_16>:

void __vector_16(void)		__attribute__((signal));
void __vector_16(void)
{
    1d04:	1f 92       	push	r1
    1d06:	0f 92       	push	r0
    1d08:	0f b6       	in	r0, 0x3f	; 63
    1d0a:	0f 92       	push	r0
    1d0c:	11 24       	eor	r1, r1
    1d0e:	2f 93       	push	r18
    1d10:	3f 93       	push	r19
    1d12:	4f 93       	push	r20
    1d14:	5f 93       	push	r21
    1d16:	6f 93       	push	r22
    1d18:	7f 93       	push	r23
    1d1a:	8f 93       	push	r24
    1d1c:	9f 93       	push	r25
    1d1e:	af 93       	push	r26
    1d20:	bf 93       	push	r27
    1d22:	ef 93       	push	r30
    1d24:	ff 93       	push	r31
    1d26:	df 93       	push	r29
    1d28:	cf 93       	push	r28
    1d2a:	cd b7       	in	r28, 0x3d	; 61
    1d2c:	de b7       	in	r29, 0x3e	; 62
	#if DATA_ORG == RIGHT_DATA
		(*ADC_po16DataResult) = ADC_DATA;
    1d2e:	a0 91 90 01 	lds	r26, 0x0190
    1d32:	b0 91 91 01 	lds	r27, 0x0191
    1d36:	e4 e2       	ldi	r30, 0x24	; 36
    1d38:	f0 e0       	ldi	r31, 0x00	; 0
    1d3a:	80 81       	ld	r24, Z
    1d3c:	91 81       	ldd	r25, Z+1	; 0x01
    1d3e:	11 96       	adiw	r26, 0x01	; 1
    1d40:	9c 93       	st	X, r25
    1d42:	8e 93       	st	-X, r24
	#elif DATA_ORG == LEFT_DATA
		(*ADC_po16DataResult) = ((u16)ADC_DATA >> 6);
	#endif

	if(ADC_CallBackPTR != NULL)
    1d44:	80 91 92 01 	lds	r24, 0x0192
    1d48:	90 91 93 01 	lds	r25, 0x0193
    1d4c:	00 97       	sbiw	r24, 0x00	; 0
    1d4e:	29 f0       	breq	.+10     	; 0x1d5a <__vector_16+0x56>
	{
		ADC_CallBackPTR();
    1d50:	e0 91 92 01 	lds	r30, 0x0192
    1d54:	f0 91 93 01 	lds	r31, 0x0193
    1d58:	09 95       	icall
	}
	else
	{
		//No Code
	}
}
    1d5a:	cf 91       	pop	r28
    1d5c:	df 91       	pop	r29
    1d5e:	ff 91       	pop	r31
    1d60:	ef 91       	pop	r30
    1d62:	bf 91       	pop	r27
    1d64:	af 91       	pop	r26
    1d66:	9f 91       	pop	r25
    1d68:	8f 91       	pop	r24
    1d6a:	7f 91       	pop	r23
    1d6c:	6f 91       	pop	r22
    1d6e:	5f 91       	pop	r21
    1d70:	4f 91       	pop	r20
    1d72:	3f 91       	pop	r19
    1d74:	2f 91       	pop	r18
    1d76:	0f 90       	pop	r0
    1d78:	0f be       	out	0x3f, r0	; 63
    1d7a:	0f 90       	pop	r0
    1d7c:	1f 90       	pop	r1
    1d7e:	18 95       	reti

00001d80 <SWITCH_VoidInit>:

#include "../../MCAL/DIO/DIO_interface.h"
#include "SWITCH_interface.h"

void SWITCH_VoidInit(SWITCH_SelectType Local_SwitchNO)
{
    1d80:	df 93       	push	r29
    1d82:	cf 93       	push	r28
    1d84:	00 d0       	rcall	.+0      	; 0x1d86 <SWITCH_VoidInit+0x6>
    1d86:	0f 92       	push	r0
    1d88:	cd b7       	in	r28, 0x3d	; 61
    1d8a:	de b7       	in	r29, 0x3e	; 62
    1d8c:	89 83       	std	Y+1, r24	; 0x01
	switch(Local_SwitchNO)
    1d8e:	89 81       	ldd	r24, Y+1	; 0x01
    1d90:	28 2f       	mov	r18, r24
    1d92:	30 e0       	ldi	r19, 0x00	; 0
    1d94:	3b 83       	std	Y+3, r19	; 0x03
    1d96:	2a 83       	std	Y+2, r18	; 0x02
    1d98:	8a 81       	ldd	r24, Y+2	; 0x02
    1d9a:	9b 81       	ldd	r25, Y+3	; 0x03
    1d9c:	81 30       	cpi	r24, 0x01	; 1
    1d9e:	91 05       	cpc	r25, r1
    1da0:	01 f1       	breq	.+64     	; 0x1de2 <SWITCH_VoidInit+0x62>
    1da2:	2a 81       	ldd	r18, Y+2	; 0x02
    1da4:	3b 81       	ldd	r19, Y+3	; 0x03
    1da6:	22 30       	cpi	r18, 0x02	; 2
    1da8:	31 05       	cpc	r19, r1
    1daa:	2c f4       	brge	.+10     	; 0x1db6 <SWITCH_VoidInit+0x36>
    1dac:	8a 81       	ldd	r24, Y+2	; 0x02
    1dae:	9b 81       	ldd	r25, Y+3	; 0x03
    1db0:	00 97       	sbiw	r24, 0x00	; 0
    1db2:	61 f0       	breq	.+24     	; 0x1dcc <SWITCH_VoidInit+0x4c>
    1db4:	36 c0       	rjmp	.+108    	; 0x1e22 <SWITCH_VoidInit+0xa2>
    1db6:	2a 81       	ldd	r18, Y+2	; 0x02
    1db8:	3b 81       	ldd	r19, Y+3	; 0x03
    1dba:	22 30       	cpi	r18, 0x02	; 2
    1dbc:	31 05       	cpc	r19, r1
    1dbe:	e1 f0       	breq	.+56     	; 0x1df8 <SWITCH_VoidInit+0x78>
    1dc0:	8a 81       	ldd	r24, Y+2	; 0x02
    1dc2:	9b 81       	ldd	r25, Y+3	; 0x03
    1dc4:	83 30       	cpi	r24, 0x03	; 3
    1dc6:	91 05       	cpc	r25, r1
    1dc8:	11 f1       	breq	.+68     	; 0x1e0e <SWITCH_VoidInit+0x8e>
    1dca:	2b c0       	rjmp	.+86     	; 0x1e22 <SWITCH_VoidInit+0xa2>
	{
	case SW_NO_1:
		DIO_VoidSetPinDirection(SWITCH_PORT,SWITCH_1_PIN,DIO_INPUT);
    1dcc:	84 e0       	ldi	r24, 0x04	; 4
    1dce:	67 e0       	ldi	r22, 0x07	; 7
    1dd0:	40 e0       	ldi	r20, 0x00	; 0
    1dd2:	0e 94 8d 09 	call	0x131a	; 0x131a <DIO_VoidSetPinDirection>
		DIO_VoidSetPinVal(SWITCH_PORT,SWITCH_1_PIN,DIO_HIGH);
    1dd6:	84 e0       	ldi	r24, 0x04	; 4
    1dd8:	67 e0       	ldi	r22, 0x07	; 7
    1dda:	41 e0       	ldi	r20, 0x01	; 1
    1ddc:	0e 94 97 0a 	call	0x152e	; 0x152e <DIO_VoidSetPinVal>
    1de0:	20 c0       	rjmp	.+64     	; 0x1e22 <SWITCH_VoidInit+0xa2>
		break;
	case SW_NO_2:
		DIO_VoidSetPinDirection(SWITCH_PORT,SWITCH_2_PIN,DIO_INPUT);
    1de2:	84 e0       	ldi	r24, 0x04	; 4
    1de4:	66 e0       	ldi	r22, 0x06	; 6
    1de6:	40 e0       	ldi	r20, 0x00	; 0
    1de8:	0e 94 8d 09 	call	0x131a	; 0x131a <DIO_VoidSetPinDirection>
		DIO_VoidSetPinVal(SWITCH_PORT,SWITCH_2_PIN,DIO_HIGH);
    1dec:	84 e0       	ldi	r24, 0x04	; 4
    1dee:	66 e0       	ldi	r22, 0x06	; 6
    1df0:	41 e0       	ldi	r20, 0x01	; 1
    1df2:	0e 94 97 0a 	call	0x152e	; 0x152e <DIO_VoidSetPinVal>
    1df6:	15 c0       	rjmp	.+42     	; 0x1e22 <SWITCH_VoidInit+0xa2>
		break;
	case SW_NO_3:
		DIO_VoidSetPinDirection(SWITCH_PORT,SWITCH_3_PIN,DIO_INPUT);
    1df8:	84 e0       	ldi	r24, 0x04	; 4
    1dfa:	65 e0       	ldi	r22, 0x05	; 5
    1dfc:	40 e0       	ldi	r20, 0x00	; 0
    1dfe:	0e 94 8d 09 	call	0x131a	; 0x131a <DIO_VoidSetPinDirection>
		DIO_VoidSetPinVal(SWITCH_PORT,SWITCH_3_PIN,DIO_HIGH);
    1e02:	84 e0       	ldi	r24, 0x04	; 4
    1e04:	65 e0       	ldi	r22, 0x05	; 5
    1e06:	41 e0       	ldi	r20, 0x01	; 1
    1e08:	0e 94 97 0a 	call	0x152e	; 0x152e <DIO_VoidSetPinVal>
    1e0c:	0a c0       	rjmp	.+20     	; 0x1e22 <SWITCH_VoidInit+0xa2>
		break;
	case SW_NO_4:
		DIO_VoidSetPinDirection(SWITCH_PORT,SWITCH_4_PIN,DIO_INPUT);
    1e0e:	84 e0       	ldi	r24, 0x04	; 4
    1e10:	63 e0       	ldi	r22, 0x03	; 3
    1e12:	40 e0       	ldi	r20, 0x00	; 0
    1e14:	0e 94 8d 09 	call	0x131a	; 0x131a <DIO_VoidSetPinDirection>
		DIO_VoidSetPinVal(SWITCH_PORT,SWITCH_4_PIN,DIO_HIGH);
    1e18:	84 e0       	ldi	r24, 0x04	; 4
    1e1a:	63 e0       	ldi	r22, 0x03	; 3
    1e1c:	41 e0       	ldi	r20, 0x01	; 1
    1e1e:	0e 94 97 0a 	call	0x152e	; 0x152e <DIO_VoidSetPinVal>
		break;
	default:
		//No Code
		break;
	}
}
    1e22:	0f 90       	pop	r0
    1e24:	0f 90       	pop	r0
    1e26:	0f 90       	pop	r0
    1e28:	cf 91       	pop	r28
    1e2a:	df 91       	pop	r29
    1e2c:	08 95       	ret

00001e2e <SWITCH_u8ReadSwitch>:
u8 SWITCH_u8ReadSwitch(SWITCH_SelectType Local_SwitchNO)
{
    1e2e:	df 93       	push	r29
    1e30:	cf 93       	push	r28
    1e32:	00 d0       	rcall	.+0      	; 0x1e34 <SWITCH_u8ReadSwitch+0x6>
    1e34:	cd b7       	in	r28, 0x3d	; 61
    1e36:	de b7       	in	r29, 0x3e	; 62
    1e38:	89 83       	std	Y+1, r24	; 0x01
	if(DIO_u8GetPinVal(SWITCH_PORT,SWITCH_1_PIN) == SWITCH_PRESSED)
    1e3a:	84 e0       	ldi	r24, 0x04	; 4
    1e3c:	67 e0       	ldi	r22, 0x07	; 7
    1e3e:	0e 94 99 0c 	call	0x1932	; 0x1932 <DIO_u8GetPinVal>
    1e42:	88 23       	and	r24, r24
    1e44:	49 f4       	brne	.+18     	; 0x1e58 <SWITCH_u8ReadSwitch+0x2a>
	{
		while(DIO_u8GetPinVal(SWITCH_PORT,SWITCH_1_PIN) != SWITCH_RELEASED);
    1e46:	84 e0       	ldi	r24, 0x04	; 4
    1e48:	67 e0       	ldi	r22, 0x07	; 7
    1e4a:	0e 94 99 0c 	call	0x1932	; 0x1932 <DIO_u8GetPinVal>
    1e4e:	81 30       	cpi	r24, 0x01	; 1
    1e50:	d1 f7       	brne	.-12     	; 0x1e46 <SWITCH_u8ReadSwitch+0x18>
		return 1;
    1e52:	81 e0       	ldi	r24, 0x01	; 1
    1e54:	8a 83       	std	Y+2, r24	; 0x02
    1e56:	01 c0       	rjmp	.+2      	; 0x1e5a <SWITCH_u8ReadSwitch+0x2c>
	}
	return 0;
    1e58:	1a 82       	std	Y+2, r1	; 0x02
    1e5a:	8a 81       	ldd	r24, Y+2	; 0x02
}
    1e5c:	0f 90       	pop	r0
    1e5e:	0f 90       	pop	r0
    1e60:	cf 91       	pop	r28
    1e62:	df 91       	pop	r29
    1e64:	08 95       	ret

00001e66 <SSD_VoidInit>:
#include "../../MCAL/DIO/DIO_interface.h"
#include "SSD_interface.h"


void SSD_VoidInit(SSD_SelectType Local_Select)
{
    1e66:	df 93       	push	r29
    1e68:	cf 93       	push	r28
    1e6a:	0f 92       	push	r0
    1e6c:	cd b7       	in	r28, 0x3d	; 61
    1e6e:	de b7       	in	r29, 0x3e	; 62
    1e70:	89 83       	std	Y+1, r24	; 0x01
	/* Set the Direction of each BCD pin as output */
	DIO_VoidSetPinDirection(BCD_A_PORT,BCD_A_PIN,SSD_OUTPUT);
    1e72:	82 e0       	ldi	r24, 0x02	; 2
    1e74:	60 e0       	ldi	r22, 0x00	; 0
    1e76:	41 e0       	ldi	r20, 0x01	; 1
    1e78:	0e 94 8d 09 	call	0x131a	; 0x131a <DIO_VoidSetPinDirection>
	DIO_VoidSetPinDirection(BCD_B_PORT,BCD_B_PIN,SSD_OUTPUT);
    1e7c:	82 e0       	ldi	r24, 0x02	; 2
    1e7e:	61 e0       	ldi	r22, 0x01	; 1
    1e80:	41 e0       	ldi	r20, 0x01	; 1
    1e82:	0e 94 8d 09 	call	0x131a	; 0x131a <DIO_VoidSetPinDirection>
	DIO_VoidSetPinDirection(BCD_C_PORT,BCD_C_PIN,SSD_OUTPUT);
    1e86:	82 e0       	ldi	r24, 0x02	; 2
    1e88:	62 e0       	ldi	r22, 0x02	; 2
    1e8a:	41 e0       	ldi	r20, 0x01	; 1
    1e8c:	0e 94 8d 09 	call	0x131a	; 0x131a <DIO_VoidSetPinDirection>
	DIO_VoidSetPinDirection(BCD_D_PORT,BCD_D_PIN,SSD_OUTPUT);
    1e90:	82 e0       	ldi	r24, 0x02	; 2
    1e92:	64 e0       	ldi	r22, 0x04	; 4
    1e94:	41 e0       	ldi	r20, 0x01	; 1
    1e96:	0e 94 8d 09 	call	0x131a	; 0x131a <DIO_VoidSetPinDirection>

	/* Set the Direction of each Common pin as output */
	DIO_VoidSetPinDirection(COM1_PORT,COM1_PIN,SSD_OUTPUT);
    1e9a:	81 e0       	ldi	r24, 0x01	; 1
    1e9c:	63 e0       	ldi	r22, 0x03	; 3
    1e9e:	41 e0       	ldi	r20, 0x01	; 1
    1ea0:	0e 94 8d 09 	call	0x131a	; 0x131a <DIO_VoidSetPinDirection>
	DIO_VoidSetPinDirection(COM2_PORT,COM2_PIN,SSD_OUTPUT);
    1ea4:	81 e0       	ldi	r24, 0x01	; 1
    1ea6:	62 e0       	ldi	r22, 0x02	; 2
    1ea8:	41 e0       	ldi	r20, 0x01	; 1
    1eaa:	0e 94 8d 09 	call	0x131a	; 0x131a <DIO_VoidSetPinDirection>
	DIO_VoidSetPinDirection(COM3_PORT,COM3_PIN,SSD_OUTPUT);
    1eae:	82 e0       	ldi	r24, 0x02	; 2
    1eb0:	65 e0       	ldi	r22, 0x05	; 5
    1eb2:	41 e0       	ldi	r20, 0x01	; 1
    1eb4:	0e 94 8d 09 	call	0x131a	; 0x131a <DIO_VoidSetPinDirection>
	DIO_VoidSetPinDirection(COM4_PORT,COM4_PIN,SSD_OUTPUT);
    1eb8:	82 e0       	ldi	r24, 0x02	; 2
    1eba:	66 e0       	ldi	r22, 0x06	; 6
    1ebc:	41 e0       	ldi	r20, 0x01	; 1
    1ebe:	0e 94 8d 09 	call	0x131a	; 0x131a <DIO_VoidSetPinDirection>

	SSD_VoidDisplay_COM(Local_Select, 0);
    1ec2:	89 81       	ldd	r24, Y+1	; 0x01
    1ec4:	60 e0       	ldi	r22, 0x00	; 0
    1ec6:	0e 94 45 10 	call	0x208a	; 0x208a <SSD_VoidDisplay_COM>
}
    1eca:	0f 90       	pop	r0
    1ecc:	cf 91       	pop	r28
    1ece:	df 91       	pop	r29
    1ed0:	08 95       	ret

00001ed2 <SSD_VoidDisplayNo>:
void SSD_VoidDisplayNo(u8 Local_Number)
{
    1ed2:	df 93       	push	r29
    1ed4:	cf 93       	push	r28
    1ed6:	0f 92       	push	r0
    1ed8:	cd b7       	in	r28, 0x3d	; 61
    1eda:	de b7       	in	r29, 0x3e	; 62
    1edc:	89 83       	std	Y+1, r24	; 0x01
	if (Local_Number <= SSD_NINE && Local_Number >= SSD_ZERO)
    1ede:	89 81       	ldd	r24, Y+1	; 0x01
    1ee0:	8a 30       	cpi	r24, 0x0A	; 10
    1ee2:	30 f5       	brcc	.+76     	; 0x1f30 <SSD_VoidDisplayNo+0x5e>
	{
		DIO_VoidSetPinVal(BCD_A_PORT,BCD_A_PIN, GET_BIT(Local_Number,0));
    1ee4:	89 81       	ldd	r24, Y+1	; 0x01
    1ee6:	98 2f       	mov	r25, r24
    1ee8:	91 70       	andi	r25, 0x01	; 1
    1eea:	82 e0       	ldi	r24, 0x02	; 2
    1eec:	60 e0       	ldi	r22, 0x00	; 0
    1eee:	49 2f       	mov	r20, r25
    1ef0:	0e 94 97 0a 	call	0x152e	; 0x152e <DIO_VoidSetPinVal>
		DIO_VoidSetPinVal(BCD_B_PORT,BCD_B_PIN, GET_BIT(Local_Number,1));
    1ef4:	89 81       	ldd	r24, Y+1	; 0x01
    1ef6:	86 95       	lsr	r24
    1ef8:	98 2f       	mov	r25, r24
    1efa:	91 70       	andi	r25, 0x01	; 1
    1efc:	82 e0       	ldi	r24, 0x02	; 2
    1efe:	61 e0       	ldi	r22, 0x01	; 1
    1f00:	49 2f       	mov	r20, r25
    1f02:	0e 94 97 0a 	call	0x152e	; 0x152e <DIO_VoidSetPinVal>
		DIO_VoidSetPinVal(BCD_C_PORT,BCD_C_PIN, GET_BIT(Local_Number,2));
    1f06:	89 81       	ldd	r24, Y+1	; 0x01
    1f08:	86 95       	lsr	r24
    1f0a:	86 95       	lsr	r24
    1f0c:	98 2f       	mov	r25, r24
    1f0e:	91 70       	andi	r25, 0x01	; 1
    1f10:	82 e0       	ldi	r24, 0x02	; 2
    1f12:	62 e0       	ldi	r22, 0x02	; 2
    1f14:	49 2f       	mov	r20, r25
    1f16:	0e 94 97 0a 	call	0x152e	; 0x152e <DIO_VoidSetPinVal>
		DIO_VoidSetPinVal(BCD_D_PORT,BCD_D_PIN, GET_BIT(Local_Number,3));
    1f1a:	89 81       	ldd	r24, Y+1	; 0x01
    1f1c:	86 95       	lsr	r24
    1f1e:	86 95       	lsr	r24
    1f20:	86 95       	lsr	r24
    1f22:	98 2f       	mov	r25, r24
    1f24:	91 70       	andi	r25, 0x01	; 1
    1f26:	82 e0       	ldi	r24, 0x02	; 2
    1f28:	64 e0       	ldi	r22, 0x04	; 4
    1f2a:	49 2f       	mov	r20, r25
    1f2c:	0e 94 97 0a 	call	0x152e	; 0x152e <DIO_VoidSetPinVal>
	}
}
    1f30:	0f 90       	pop	r0
    1f32:	cf 91       	pop	r28
    1f34:	df 91       	pop	r29
    1f36:	08 95       	ret

00001f38 <SSD_VoidDisplayRange>:
void SSD_VoidDisplayRange(u8 Local_Start, u8 Local_End)
{
    1f38:	df 93       	push	r29
    1f3a:	cf 93       	push	r28
    1f3c:	cd b7       	in	r28, 0x3d	; 61
    1f3e:	de b7       	in	r29, 0x3e	; 62
    1f40:	61 97       	sbiw	r28, 0x11	; 17
    1f42:	0f b6       	in	r0, 0x3f	; 63
    1f44:	f8 94       	cli
    1f46:	de bf       	out	0x3e, r29	; 62
    1f48:	0f be       	out	0x3f, r0	; 63
    1f4a:	cd bf       	out	0x3d, r28	; 61
    1f4c:	88 8b       	std	Y+16, r24	; 0x10
    1f4e:	69 8b       	std	Y+17, r22	; 0x11
	if(Local_Start <= Local_End && Local_Start >= SSD_ZERO && Local_End <= SSD_NINE)
    1f50:	98 89       	ldd	r25, Y+16	; 0x10
    1f52:	89 89       	ldd	r24, Y+17	; 0x11
    1f54:	89 17       	cp	r24, r25
    1f56:	08 f4       	brcc	.+2      	; 0x1f5a <SSD_VoidDisplayRange+0x22>
    1f58:	85 c0       	rjmp	.+266    	; 0x2064 <SSD_VoidDisplayRange+0x12c>
    1f5a:	89 89       	ldd	r24, Y+17	; 0x11
    1f5c:	8a 30       	cpi	r24, 0x0A	; 10
    1f5e:	08 f0       	brcs	.+2      	; 0x1f62 <SSD_VoidDisplayRange+0x2a>
    1f60:	81 c0       	rjmp	.+258    	; 0x2064 <SSD_VoidDisplayRange+0x12c>
	{
		u8 Local_counter = 0;
    1f62:	1f 86       	std	Y+15, r1	; 0x0f
		for (Local_counter = Local_Start; Local_counter <= Local_End ; Local_counter++)
    1f64:	88 89       	ldd	r24, Y+16	; 0x10
    1f66:	8f 87       	std	Y+15, r24	; 0x0f
    1f68:	78 c0       	rjmp	.+240    	; 0x205a <SSD_VoidDisplayRange+0x122>
		{
			SSD_VoidDisplayNo(Local_counter);
    1f6a:	8f 85       	ldd	r24, Y+15	; 0x0f
    1f6c:	0e 94 69 0f 	call	0x1ed2	; 0x1ed2 <SSD_VoidDisplayNo>
    1f70:	80 e0       	ldi	r24, 0x00	; 0
    1f72:	90 e0       	ldi	r25, 0x00	; 0
    1f74:	aa e7       	ldi	r26, 0x7A	; 122
    1f76:	b4 e4       	ldi	r27, 0x44	; 68
    1f78:	8b 87       	std	Y+11, r24	; 0x0b
    1f7a:	9c 87       	std	Y+12, r25	; 0x0c
    1f7c:	ad 87       	std	Y+13, r26	; 0x0d
    1f7e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1f80:	6b 85       	ldd	r22, Y+11	; 0x0b
    1f82:	7c 85       	ldd	r23, Y+12	; 0x0c
    1f84:	8d 85       	ldd	r24, Y+13	; 0x0d
    1f86:	9e 85       	ldd	r25, Y+14	; 0x0e
    1f88:	20 e0       	ldi	r18, 0x00	; 0
    1f8a:	30 e8       	ldi	r19, 0x80	; 128
    1f8c:	4b e3       	ldi	r20, 0x3B	; 59
    1f8e:	55 e4       	ldi	r21, 0x45	; 69
    1f90:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f94:	dc 01       	movw	r26, r24
    1f96:	cb 01       	movw	r24, r22
    1f98:	8f 83       	std	Y+7, r24	; 0x07
    1f9a:	98 87       	std	Y+8, r25	; 0x08
    1f9c:	a9 87       	std	Y+9, r26	; 0x09
    1f9e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1fa0:	6f 81       	ldd	r22, Y+7	; 0x07
    1fa2:	78 85       	ldd	r23, Y+8	; 0x08
    1fa4:	89 85       	ldd	r24, Y+9	; 0x09
    1fa6:	9a 85       	ldd	r25, Y+10	; 0x0a
    1fa8:	20 e0       	ldi	r18, 0x00	; 0
    1faa:	30 e0       	ldi	r19, 0x00	; 0
    1fac:	40 e8       	ldi	r20, 0x80	; 128
    1fae:	5f e3       	ldi	r21, 0x3F	; 63
    1fb0:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1fb4:	88 23       	and	r24, r24
    1fb6:	2c f4       	brge	.+10     	; 0x1fc2 <SSD_VoidDisplayRange+0x8a>
		__ticks = 1;
    1fb8:	81 e0       	ldi	r24, 0x01	; 1
    1fba:	90 e0       	ldi	r25, 0x00	; 0
    1fbc:	9e 83       	std	Y+6, r25	; 0x06
    1fbe:	8d 83       	std	Y+5, r24	; 0x05
    1fc0:	3f c0       	rjmp	.+126    	; 0x2040 <SSD_VoidDisplayRange+0x108>
	else if (__tmp > 65535)
    1fc2:	6f 81       	ldd	r22, Y+7	; 0x07
    1fc4:	78 85       	ldd	r23, Y+8	; 0x08
    1fc6:	89 85       	ldd	r24, Y+9	; 0x09
    1fc8:	9a 85       	ldd	r25, Y+10	; 0x0a
    1fca:	20 e0       	ldi	r18, 0x00	; 0
    1fcc:	3f ef       	ldi	r19, 0xFF	; 255
    1fce:	4f e7       	ldi	r20, 0x7F	; 127
    1fd0:	57 e4       	ldi	r21, 0x47	; 71
    1fd2:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1fd6:	18 16       	cp	r1, r24
    1fd8:	4c f5       	brge	.+82     	; 0x202c <SSD_VoidDisplayRange+0xf4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1fda:	6b 85       	ldd	r22, Y+11	; 0x0b
    1fdc:	7c 85       	ldd	r23, Y+12	; 0x0c
    1fde:	8d 85       	ldd	r24, Y+13	; 0x0d
    1fe0:	9e 85       	ldd	r25, Y+14	; 0x0e
    1fe2:	20 e0       	ldi	r18, 0x00	; 0
    1fe4:	30 e0       	ldi	r19, 0x00	; 0
    1fe6:	40 e2       	ldi	r20, 0x20	; 32
    1fe8:	51 e4       	ldi	r21, 0x41	; 65
    1fea:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1fee:	dc 01       	movw	r26, r24
    1ff0:	cb 01       	movw	r24, r22
    1ff2:	bc 01       	movw	r22, r24
    1ff4:	cd 01       	movw	r24, r26
    1ff6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ffa:	dc 01       	movw	r26, r24
    1ffc:	cb 01       	movw	r24, r22
    1ffe:	9e 83       	std	Y+6, r25	; 0x06
    2000:	8d 83       	std	Y+5, r24	; 0x05
    2002:	0f c0       	rjmp	.+30     	; 0x2022 <SSD_VoidDisplayRange+0xea>
    2004:	8c e2       	ldi	r24, 0x2C	; 44
    2006:	91 e0       	ldi	r25, 0x01	; 1
    2008:	9c 83       	std	Y+4, r25	; 0x04
    200a:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    200c:	8b 81       	ldd	r24, Y+3	; 0x03
    200e:	9c 81       	ldd	r25, Y+4	; 0x04
    2010:	01 97       	sbiw	r24, 0x01	; 1
    2012:	f1 f7       	brne	.-4      	; 0x2010 <SSD_VoidDisplayRange+0xd8>
    2014:	9c 83       	std	Y+4, r25	; 0x04
    2016:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2018:	8d 81       	ldd	r24, Y+5	; 0x05
    201a:	9e 81       	ldd	r25, Y+6	; 0x06
    201c:	01 97       	sbiw	r24, 0x01	; 1
    201e:	9e 83       	std	Y+6, r25	; 0x06
    2020:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2022:	8d 81       	ldd	r24, Y+5	; 0x05
    2024:	9e 81       	ldd	r25, Y+6	; 0x06
    2026:	00 97       	sbiw	r24, 0x00	; 0
    2028:	69 f7       	brne	.-38     	; 0x2004 <SSD_VoidDisplayRange+0xcc>
    202a:	14 c0       	rjmp	.+40     	; 0x2054 <SSD_VoidDisplayRange+0x11c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    202c:	6f 81       	ldd	r22, Y+7	; 0x07
    202e:	78 85       	ldd	r23, Y+8	; 0x08
    2030:	89 85       	ldd	r24, Y+9	; 0x09
    2032:	9a 85       	ldd	r25, Y+10	; 0x0a
    2034:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2038:	dc 01       	movw	r26, r24
    203a:	cb 01       	movw	r24, r22
    203c:	9e 83       	std	Y+6, r25	; 0x06
    203e:	8d 83       	std	Y+5, r24	; 0x05
    2040:	8d 81       	ldd	r24, Y+5	; 0x05
    2042:	9e 81       	ldd	r25, Y+6	; 0x06
    2044:	9a 83       	std	Y+2, r25	; 0x02
    2046:	89 83       	std	Y+1, r24	; 0x01
    2048:	89 81       	ldd	r24, Y+1	; 0x01
    204a:	9a 81       	ldd	r25, Y+2	; 0x02
    204c:	01 97       	sbiw	r24, 0x01	; 1
    204e:	f1 f7       	brne	.-4      	; 0x204c <SSD_VoidDisplayRange+0x114>
    2050:	9a 83       	std	Y+2, r25	; 0x02
    2052:	89 83       	std	Y+1, r24	; 0x01
void SSD_VoidDisplayRange(u8 Local_Start, u8 Local_End)
{
	if(Local_Start <= Local_End && Local_Start >= SSD_ZERO && Local_End <= SSD_NINE)
	{
		u8 Local_counter = 0;
		for (Local_counter = Local_Start; Local_counter <= Local_End ; Local_counter++)
    2054:	8f 85       	ldd	r24, Y+15	; 0x0f
    2056:	8f 5f       	subi	r24, 0xFF	; 255
    2058:	8f 87       	std	Y+15, r24	; 0x0f
    205a:	9f 85       	ldd	r25, Y+15	; 0x0f
    205c:	89 89       	ldd	r24, Y+17	; 0x11
    205e:	89 17       	cp	r24, r25
    2060:	08 f0       	brcs	.+2      	; 0x2064 <SSD_VoidDisplayRange+0x12c>
    2062:	83 cf       	rjmp	.-250    	; 0x1f6a <SSD_VoidDisplayRange+0x32>
		{
			SSD_VoidDisplayNo(Local_counter);
			_delay_ms(1000);
		}
	}
}
    2064:	61 96       	adiw	r28, 0x11	; 17
    2066:	0f b6       	in	r0, 0x3f	; 63
    2068:	f8 94       	cli
    206a:	de bf       	out	0x3e, r29	; 62
    206c:	0f be       	out	0x3f, r0	; 63
    206e:	cd bf       	out	0x3d, r28	; 61
    2070:	cf 91       	pop	r28
    2072:	df 91       	pop	r29
    2074:	08 95       	ret

00002076 <SSD_VoidClear>:

void SSD_VoidClear(void)
{
    2076:	df 93       	push	r29
    2078:	cf 93       	push	r28
    207a:	cd b7       	in	r28, 0x3d	; 61
    207c:	de b7       	in	r29, 0x3e	; 62
	SSD_VoidDisplayNo(0);
    207e:	80 e0       	ldi	r24, 0x00	; 0
    2080:	0e 94 69 0f 	call	0x1ed2	; 0x1ed2 <SSD_VoidDisplayNo>
}
    2084:	cf 91       	pop	r28
    2086:	df 91       	pop	r29
    2088:	08 95       	ret

0000208a <SSD_VoidDisplay_COM>:
void SSD_VoidDisplay_COM(SSD_SelectType Local_Select, u8 Local_Number)
{
    208a:	df 93       	push	r29
    208c:	cf 93       	push	r28
    208e:	00 d0       	rcall	.+0      	; 0x2090 <SSD_VoidDisplay_COM+0x6>
    2090:	cd b7       	in	r28, 0x3d	; 61
    2092:	de b7       	in	r29, 0x3e	; 62
    2094:	89 83       	std	Y+1, r24	; 0x01
    2096:	6a 83       	std	Y+2, r22	; 0x02
	if (Local_Select == SSD_NO_1 )
    2098:	89 81       	ldd	r24, Y+1	; 0x01
    209a:	81 30       	cpi	r24, 0x01	; 1
    209c:	a9 f4       	brne	.+42     	; 0x20c8 <SSD_VoidDisplay_COM+0x3e>
	{
		DIO_VoidSetPinVal(COM1_PORT,COM1_PIN,SSD_LOW);
    209e:	81 e0       	ldi	r24, 0x01	; 1
    20a0:	63 e0       	ldi	r22, 0x03	; 3
    20a2:	40 e0       	ldi	r20, 0x00	; 0
    20a4:	0e 94 97 0a 	call	0x152e	; 0x152e <DIO_VoidSetPinVal>
		DIO_VoidSetPinVal(COM2_PORT,COM2_PIN,SSD_HIGH);
    20a8:	81 e0       	ldi	r24, 0x01	; 1
    20aa:	62 e0       	ldi	r22, 0x02	; 2
    20ac:	41 e0       	ldi	r20, 0x01	; 1
    20ae:	0e 94 97 0a 	call	0x152e	; 0x152e <DIO_VoidSetPinVal>
		DIO_VoidSetPinVal(COM3_PORT,COM3_PIN,SSD_HIGH);
    20b2:	82 e0       	ldi	r24, 0x02	; 2
    20b4:	65 e0       	ldi	r22, 0x05	; 5
    20b6:	41 e0       	ldi	r20, 0x01	; 1
    20b8:	0e 94 97 0a 	call	0x152e	; 0x152e <DIO_VoidSetPinVal>
		DIO_VoidSetPinVal(COM4_PORT,COM4_PIN,SSD_HIGH);
    20bc:	82 e0       	ldi	r24, 0x02	; 2
    20be:	66 e0       	ldi	r22, 0x06	; 6
    20c0:	41 e0       	ldi	r20, 0x01	; 1
    20c2:	0e 94 97 0a 	call	0x152e	; 0x152e <DIO_VoidSetPinVal>
    20c6:	47 c0       	rjmp	.+142    	; 0x2156 <SSD_VoidDisplay_COM+0xcc>
	}
	else if (Local_Select == SSD_NO_2)
    20c8:	89 81       	ldd	r24, Y+1	; 0x01
    20ca:	82 30       	cpi	r24, 0x02	; 2
    20cc:	a9 f4       	brne	.+42     	; 0x20f8 <SSD_VoidDisplay_COM+0x6e>
	{
		DIO_VoidSetPinVal(COM1_PORT,COM1_PIN,SSD_HIGH);
    20ce:	81 e0       	ldi	r24, 0x01	; 1
    20d0:	63 e0       	ldi	r22, 0x03	; 3
    20d2:	41 e0       	ldi	r20, 0x01	; 1
    20d4:	0e 94 97 0a 	call	0x152e	; 0x152e <DIO_VoidSetPinVal>
		DIO_VoidSetPinVal(COM2_PORT,COM2_PIN,SSD_LOW);
    20d8:	81 e0       	ldi	r24, 0x01	; 1
    20da:	62 e0       	ldi	r22, 0x02	; 2
    20dc:	40 e0       	ldi	r20, 0x00	; 0
    20de:	0e 94 97 0a 	call	0x152e	; 0x152e <DIO_VoidSetPinVal>
		DIO_VoidSetPinVal(COM3_PORT,COM3_PIN,SSD_HIGH);
    20e2:	82 e0       	ldi	r24, 0x02	; 2
    20e4:	65 e0       	ldi	r22, 0x05	; 5
    20e6:	41 e0       	ldi	r20, 0x01	; 1
    20e8:	0e 94 97 0a 	call	0x152e	; 0x152e <DIO_VoidSetPinVal>
		DIO_VoidSetPinVal(COM4_PORT,COM4_PIN,SSD_HIGH);
    20ec:	82 e0       	ldi	r24, 0x02	; 2
    20ee:	66 e0       	ldi	r22, 0x06	; 6
    20f0:	41 e0       	ldi	r20, 0x01	; 1
    20f2:	0e 94 97 0a 	call	0x152e	; 0x152e <DIO_VoidSetPinVal>
    20f6:	2f c0       	rjmp	.+94     	; 0x2156 <SSD_VoidDisplay_COM+0xcc>
	}
	else if (Local_Select == SSD_NO_3)
    20f8:	89 81       	ldd	r24, Y+1	; 0x01
    20fa:	83 30       	cpi	r24, 0x03	; 3
    20fc:	a9 f4       	brne	.+42     	; 0x2128 <SSD_VoidDisplay_COM+0x9e>
	{
		DIO_VoidSetPinVal(COM1_PORT,COM1_PIN,SSD_HIGH);
    20fe:	81 e0       	ldi	r24, 0x01	; 1
    2100:	63 e0       	ldi	r22, 0x03	; 3
    2102:	41 e0       	ldi	r20, 0x01	; 1
    2104:	0e 94 97 0a 	call	0x152e	; 0x152e <DIO_VoidSetPinVal>
		DIO_VoidSetPinVal(COM2_PORT,COM2_PIN,SSD_HIGH);
    2108:	81 e0       	ldi	r24, 0x01	; 1
    210a:	62 e0       	ldi	r22, 0x02	; 2
    210c:	41 e0       	ldi	r20, 0x01	; 1
    210e:	0e 94 97 0a 	call	0x152e	; 0x152e <DIO_VoidSetPinVal>
		DIO_VoidSetPinVal(COM3_PORT,COM3_PIN,SSD_LOW);
    2112:	82 e0       	ldi	r24, 0x02	; 2
    2114:	65 e0       	ldi	r22, 0x05	; 5
    2116:	40 e0       	ldi	r20, 0x00	; 0
    2118:	0e 94 97 0a 	call	0x152e	; 0x152e <DIO_VoidSetPinVal>
		DIO_VoidSetPinVal(COM4_PORT,COM4_PIN,SSD_HIGH);
    211c:	82 e0       	ldi	r24, 0x02	; 2
    211e:	66 e0       	ldi	r22, 0x06	; 6
    2120:	41 e0       	ldi	r20, 0x01	; 1
    2122:	0e 94 97 0a 	call	0x152e	; 0x152e <DIO_VoidSetPinVal>
    2126:	17 c0       	rjmp	.+46     	; 0x2156 <SSD_VoidDisplay_COM+0xcc>
	}

	else if (Local_Select == SSD_NO_4)
    2128:	89 81       	ldd	r24, Y+1	; 0x01
    212a:	84 30       	cpi	r24, 0x04	; 4
    212c:	a1 f4       	brne	.+40     	; 0x2156 <SSD_VoidDisplay_COM+0xcc>
	{
		DIO_VoidSetPinVal(COM1_PORT,COM1_PIN,SSD_HIGH);
    212e:	81 e0       	ldi	r24, 0x01	; 1
    2130:	63 e0       	ldi	r22, 0x03	; 3
    2132:	41 e0       	ldi	r20, 0x01	; 1
    2134:	0e 94 97 0a 	call	0x152e	; 0x152e <DIO_VoidSetPinVal>
		DIO_VoidSetPinVal(COM2_PORT,COM2_PIN,SSD_HIGH);
    2138:	81 e0       	ldi	r24, 0x01	; 1
    213a:	62 e0       	ldi	r22, 0x02	; 2
    213c:	41 e0       	ldi	r20, 0x01	; 1
    213e:	0e 94 97 0a 	call	0x152e	; 0x152e <DIO_VoidSetPinVal>
		DIO_VoidSetPinVal(COM3_PORT,COM3_PIN,SSD_HIGH);
    2142:	82 e0       	ldi	r24, 0x02	; 2
    2144:	65 e0       	ldi	r22, 0x05	; 5
    2146:	41 e0       	ldi	r20, 0x01	; 1
    2148:	0e 94 97 0a 	call	0x152e	; 0x152e <DIO_VoidSetPinVal>
		DIO_VoidSetPinVal(COM4_PORT,COM4_PIN,SSD_LOW);
    214c:	82 e0       	ldi	r24, 0x02	; 2
    214e:	66 e0       	ldi	r22, 0x06	; 6
    2150:	40 e0       	ldi	r20, 0x00	; 0
    2152:	0e 94 97 0a 	call	0x152e	; 0x152e <DIO_VoidSetPinVal>
	}
	SSD_VoidDisplayNo(Local_Number);
    2156:	8a 81       	ldd	r24, Y+2	; 0x02
    2158:	0e 94 69 0f 	call	0x1ed2	; 0x1ed2 <SSD_VoidDisplayNo>
}
    215c:	0f 90       	pop	r0
    215e:	0f 90       	pop	r0
    2160:	cf 91       	pop	r28
    2162:	df 91       	pop	r29
    2164:	08 95       	ret

00002166 <LCD_VoidSendCommand>:
#include "../../LIB/Bit_math.h"
#include "../../MCAL/DIO/DIO_interface.h"
#include "LCD_interface.h"

void LCD_VoidSendCommand(u8 Local_Command)
{
    2166:	0f 93       	push	r16
    2168:	1f 93       	push	r17
    216a:	df 93       	push	r29
    216c:	cf 93       	push	r28
    216e:	cd b7       	in	r28, 0x3d	; 61
    2170:	de b7       	in	r29, 0x3e	; 62
    2172:	c7 54       	subi	r28, 0x47	; 71
    2174:	d0 40       	sbci	r29, 0x00	; 0
    2176:	0f b6       	in	r0, 0x3f	; 63
    2178:	f8 94       	cli
    217a:	de bf       	out	0x3e, r29	; 62
    217c:	0f be       	out	0x3f, r0	; 63
    217e:	cd bf       	out	0x3d, r28	; 61
    2180:	fe 01       	movw	r30, r28
    2182:	e9 5b       	subi	r30, 0xB9	; 185
    2184:	ff 4f       	sbci	r31, 0xFF	; 255
    2186:	80 83       	st	Z, r24
	/*send the command line*/
	DIO_VoidSetPinVal(LCD_Data_PORT, LCD_Data_PIN4, GET_BIT(Local_Command,4));
    2188:	fe 01       	movw	r30, r28
    218a:	e9 5b       	subi	r30, 0xB9	; 185
    218c:	ff 4f       	sbci	r31, 0xFF	; 255
    218e:	80 81       	ld	r24, Z
    2190:	82 95       	swap	r24
    2192:	8f 70       	andi	r24, 0x0F	; 15
    2194:	98 2f       	mov	r25, r24
    2196:	91 70       	andi	r25, 0x01	; 1
    2198:	82 e0       	ldi	r24, 0x02	; 2
    219a:	60 e0       	ldi	r22, 0x00	; 0
    219c:	49 2f       	mov	r20, r25
    219e:	0e 94 97 0a 	call	0x152e	; 0x152e <DIO_VoidSetPinVal>
	DIO_VoidSetPinVal(LCD_Data_PORT, LCD_Data_PIN5, GET_BIT(Local_Command,5));
    21a2:	fe 01       	movw	r30, r28
    21a4:	e9 5b       	subi	r30, 0xB9	; 185
    21a6:	ff 4f       	sbci	r31, 0xFF	; 255
    21a8:	80 81       	ld	r24, Z
    21aa:	82 95       	swap	r24
    21ac:	86 95       	lsr	r24
    21ae:	87 70       	andi	r24, 0x07	; 7
    21b0:	98 2f       	mov	r25, r24
    21b2:	91 70       	andi	r25, 0x01	; 1
    21b4:	82 e0       	ldi	r24, 0x02	; 2
    21b6:	61 e0       	ldi	r22, 0x01	; 1
    21b8:	49 2f       	mov	r20, r25
    21ba:	0e 94 97 0a 	call	0x152e	; 0x152e <DIO_VoidSetPinVal>
	DIO_VoidSetPinVal(LCD_Data_PORT, LCD_Data_PIN6, GET_BIT(Local_Command,6));
    21be:	fe 01       	movw	r30, r28
    21c0:	e9 5b       	subi	r30, 0xB9	; 185
    21c2:	ff 4f       	sbci	r31, 0xFF	; 255
    21c4:	80 81       	ld	r24, Z
    21c6:	82 95       	swap	r24
    21c8:	86 95       	lsr	r24
    21ca:	86 95       	lsr	r24
    21cc:	83 70       	andi	r24, 0x03	; 3
    21ce:	98 2f       	mov	r25, r24
    21d0:	91 70       	andi	r25, 0x01	; 1
    21d2:	82 e0       	ldi	r24, 0x02	; 2
    21d4:	62 e0       	ldi	r22, 0x02	; 2
    21d6:	49 2f       	mov	r20, r25
    21d8:	0e 94 97 0a 	call	0x152e	; 0x152e <DIO_VoidSetPinVal>
	DIO_VoidSetPinVal(LCD_Data_PORT, LCD_Data_PIN7, GET_BIT(Local_Command,7));
    21dc:	fe 01       	movw	r30, r28
    21de:	e9 5b       	subi	r30, 0xB9	; 185
    21e0:	ff 4f       	sbci	r31, 0xFF	; 255
    21e2:	80 81       	ld	r24, Z
    21e4:	98 2f       	mov	r25, r24
    21e6:	99 1f       	adc	r25, r25
    21e8:	99 27       	eor	r25, r25
    21ea:	99 1f       	adc	r25, r25
    21ec:	82 e0       	ldi	r24, 0x02	; 2
    21ee:	64 e0       	ldi	r22, 0x04	; 4
    21f0:	49 2f       	mov	r20, r25
    21f2:	0e 94 97 0a 	call	0x152e	; 0x152e <DIO_VoidSetPinVal>
	/*set RS pin to command --> 0*/
	DIO_VoidSetPinVal(LCD_RS_PORT,LCD_RS_Pin,DIO_LOW);
    21f6:	81 e0       	ldi	r24, 0x01	; 1
    21f8:	63 e0       	ldi	r22, 0x03	; 3
    21fa:	40 e0       	ldi	r20, 0x00	; 0
    21fc:	0e 94 97 0a 	call	0x152e	; 0x152e <DIO_VoidSetPinVal>
    2200:	fe 01       	movw	r30, r28
    2202:	ed 5b       	subi	r30, 0xBD	; 189
    2204:	ff 4f       	sbci	r31, 0xFF	; 255
    2206:	80 e0       	ldi	r24, 0x00	; 0
    2208:	90 e0       	ldi	r25, 0x00	; 0
    220a:	a0 e8       	ldi	r26, 0x80	; 128
    220c:	bf e3       	ldi	r27, 0x3F	; 63
    220e:	80 83       	st	Z, r24
    2210:	91 83       	std	Z+1, r25	; 0x01
    2212:	a2 83       	std	Z+2, r26	; 0x02
    2214:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2216:	8e 01       	movw	r16, r28
    2218:	01 5c       	subi	r16, 0xC1	; 193
    221a:	1f 4f       	sbci	r17, 0xFF	; 255
    221c:	fe 01       	movw	r30, r28
    221e:	ed 5b       	subi	r30, 0xBD	; 189
    2220:	ff 4f       	sbci	r31, 0xFF	; 255
    2222:	60 81       	ld	r22, Z
    2224:	71 81       	ldd	r23, Z+1	; 0x01
    2226:	82 81       	ldd	r24, Z+2	; 0x02
    2228:	93 81       	ldd	r25, Z+3	; 0x03
    222a:	20 e0       	ldi	r18, 0x00	; 0
    222c:	30 e8       	ldi	r19, 0x80	; 128
    222e:	4b e3       	ldi	r20, 0x3B	; 59
    2230:	55 e4       	ldi	r21, 0x45	; 69
    2232:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2236:	dc 01       	movw	r26, r24
    2238:	cb 01       	movw	r24, r22
    223a:	f8 01       	movw	r30, r16
    223c:	80 83       	st	Z, r24
    223e:	91 83       	std	Z+1, r25	; 0x01
    2240:	a2 83       	std	Z+2, r26	; 0x02
    2242:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2244:	fe 01       	movw	r30, r28
    2246:	ff 96       	adiw	r30, 0x3f	; 63
    2248:	60 81       	ld	r22, Z
    224a:	71 81       	ldd	r23, Z+1	; 0x01
    224c:	82 81       	ldd	r24, Z+2	; 0x02
    224e:	93 81       	ldd	r25, Z+3	; 0x03
    2250:	20 e0       	ldi	r18, 0x00	; 0
    2252:	30 e0       	ldi	r19, 0x00	; 0
    2254:	40 e8       	ldi	r20, 0x80	; 128
    2256:	5f e3       	ldi	r21, 0x3F	; 63
    2258:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    225c:	88 23       	and	r24, r24
    225e:	2c f4       	brge	.+10     	; 0x226a <LCD_VoidSendCommand+0x104>
		__ticks = 1;
    2260:	81 e0       	ldi	r24, 0x01	; 1
    2262:	90 e0       	ldi	r25, 0x00	; 0
    2264:	9e af       	std	Y+62, r25	; 0x3e
    2266:	8d af       	std	Y+61, r24	; 0x3d
    2268:	46 c0       	rjmp	.+140    	; 0x22f6 <LCD_VoidSendCommand+0x190>
	else if (__tmp > 65535)
    226a:	fe 01       	movw	r30, r28
    226c:	ff 96       	adiw	r30, 0x3f	; 63
    226e:	60 81       	ld	r22, Z
    2270:	71 81       	ldd	r23, Z+1	; 0x01
    2272:	82 81       	ldd	r24, Z+2	; 0x02
    2274:	93 81       	ldd	r25, Z+3	; 0x03
    2276:	20 e0       	ldi	r18, 0x00	; 0
    2278:	3f ef       	ldi	r19, 0xFF	; 255
    227a:	4f e7       	ldi	r20, 0x7F	; 127
    227c:	57 e4       	ldi	r21, 0x47	; 71
    227e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2282:	18 16       	cp	r1, r24
    2284:	64 f5       	brge	.+88     	; 0x22de <LCD_VoidSendCommand+0x178>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2286:	fe 01       	movw	r30, r28
    2288:	ed 5b       	subi	r30, 0xBD	; 189
    228a:	ff 4f       	sbci	r31, 0xFF	; 255
    228c:	60 81       	ld	r22, Z
    228e:	71 81       	ldd	r23, Z+1	; 0x01
    2290:	82 81       	ldd	r24, Z+2	; 0x02
    2292:	93 81       	ldd	r25, Z+3	; 0x03
    2294:	20 e0       	ldi	r18, 0x00	; 0
    2296:	30 e0       	ldi	r19, 0x00	; 0
    2298:	40 e2       	ldi	r20, 0x20	; 32
    229a:	51 e4       	ldi	r21, 0x41	; 65
    229c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    22a0:	dc 01       	movw	r26, r24
    22a2:	cb 01       	movw	r24, r22
    22a4:	bc 01       	movw	r22, r24
    22a6:	cd 01       	movw	r24, r26
    22a8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    22ac:	dc 01       	movw	r26, r24
    22ae:	cb 01       	movw	r24, r22
    22b0:	9e af       	std	Y+62, r25	; 0x3e
    22b2:	8d af       	std	Y+61, r24	; 0x3d
    22b4:	0f c0       	rjmp	.+30     	; 0x22d4 <LCD_VoidSendCommand+0x16e>
    22b6:	8c e2       	ldi	r24, 0x2C	; 44
    22b8:	91 e0       	ldi	r25, 0x01	; 1
    22ba:	9c af       	std	Y+60, r25	; 0x3c
    22bc:	8b af       	std	Y+59, r24	; 0x3b
    22be:	8b ad       	ldd	r24, Y+59	; 0x3b
    22c0:	9c ad       	ldd	r25, Y+60	; 0x3c
    22c2:	01 97       	sbiw	r24, 0x01	; 1
    22c4:	f1 f7       	brne	.-4      	; 0x22c2 <LCD_VoidSendCommand+0x15c>
    22c6:	9c af       	std	Y+60, r25	; 0x3c
    22c8:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    22ca:	8d ad       	ldd	r24, Y+61	; 0x3d
    22cc:	9e ad       	ldd	r25, Y+62	; 0x3e
    22ce:	01 97       	sbiw	r24, 0x01	; 1
    22d0:	9e af       	std	Y+62, r25	; 0x3e
    22d2:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    22d4:	8d ad       	ldd	r24, Y+61	; 0x3d
    22d6:	9e ad       	ldd	r25, Y+62	; 0x3e
    22d8:	00 97       	sbiw	r24, 0x00	; 0
    22da:	69 f7       	brne	.-38     	; 0x22b6 <LCD_VoidSendCommand+0x150>
    22dc:	16 c0       	rjmp	.+44     	; 0x230a <LCD_VoidSendCommand+0x1a4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    22de:	fe 01       	movw	r30, r28
    22e0:	ff 96       	adiw	r30, 0x3f	; 63
    22e2:	60 81       	ld	r22, Z
    22e4:	71 81       	ldd	r23, Z+1	; 0x01
    22e6:	82 81       	ldd	r24, Z+2	; 0x02
    22e8:	93 81       	ldd	r25, Z+3	; 0x03
    22ea:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    22ee:	dc 01       	movw	r26, r24
    22f0:	cb 01       	movw	r24, r22
    22f2:	9e af       	std	Y+62, r25	; 0x3e
    22f4:	8d af       	std	Y+61, r24	; 0x3d
    22f6:	8d ad       	ldd	r24, Y+61	; 0x3d
    22f8:	9e ad       	ldd	r25, Y+62	; 0x3e
    22fa:	9a af       	std	Y+58, r25	; 0x3a
    22fc:	89 af       	std	Y+57, r24	; 0x39
    22fe:	89 ad       	ldd	r24, Y+57	; 0x39
    2300:	9a ad       	ldd	r25, Y+58	; 0x3a
    2302:	01 97       	sbiw	r24, 0x01	; 1
    2304:	f1 f7       	brne	.-4      	; 0x2302 <LCD_VoidSendCommand+0x19c>
    2306:	9a af       	std	Y+58, r25	; 0x3a
    2308:	89 af       	std	Y+57, r24	; 0x39
	_delay_ms(1);
	/*set Enable pin to High*/
	DIO_VoidSetPinVal(LCD_EN_PORT,LCD_EN_Pin,DIO_HIGH);
    230a:	81 e0       	ldi	r24, 0x01	; 1
    230c:	62 e0       	ldi	r22, 0x02	; 2
    230e:	41 e0       	ldi	r20, 0x01	; 1
    2310:	0e 94 97 0a 	call	0x152e	; 0x152e <DIO_VoidSetPinVal>
    2314:	80 e0       	ldi	r24, 0x00	; 0
    2316:	90 e0       	ldi	r25, 0x00	; 0
    2318:	a0 e8       	ldi	r26, 0x80	; 128
    231a:	bf e3       	ldi	r27, 0x3F	; 63
    231c:	8d ab       	std	Y+53, r24	; 0x35
    231e:	9e ab       	std	Y+54, r25	; 0x36
    2320:	af ab       	std	Y+55, r26	; 0x37
    2322:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2324:	6d a9       	ldd	r22, Y+53	; 0x35
    2326:	7e a9       	ldd	r23, Y+54	; 0x36
    2328:	8f a9       	ldd	r24, Y+55	; 0x37
    232a:	98 ad       	ldd	r25, Y+56	; 0x38
    232c:	20 e0       	ldi	r18, 0x00	; 0
    232e:	30 e8       	ldi	r19, 0x80	; 128
    2330:	4b e3       	ldi	r20, 0x3B	; 59
    2332:	55 e4       	ldi	r21, 0x45	; 69
    2334:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2338:	dc 01       	movw	r26, r24
    233a:	cb 01       	movw	r24, r22
    233c:	89 ab       	std	Y+49, r24	; 0x31
    233e:	9a ab       	std	Y+50, r25	; 0x32
    2340:	ab ab       	std	Y+51, r26	; 0x33
    2342:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2344:	69 a9       	ldd	r22, Y+49	; 0x31
    2346:	7a a9       	ldd	r23, Y+50	; 0x32
    2348:	8b a9       	ldd	r24, Y+51	; 0x33
    234a:	9c a9       	ldd	r25, Y+52	; 0x34
    234c:	20 e0       	ldi	r18, 0x00	; 0
    234e:	30 e0       	ldi	r19, 0x00	; 0
    2350:	40 e8       	ldi	r20, 0x80	; 128
    2352:	5f e3       	ldi	r21, 0x3F	; 63
    2354:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2358:	88 23       	and	r24, r24
    235a:	2c f4       	brge	.+10     	; 0x2366 <LCD_VoidSendCommand+0x200>
		__ticks = 1;
    235c:	81 e0       	ldi	r24, 0x01	; 1
    235e:	90 e0       	ldi	r25, 0x00	; 0
    2360:	98 ab       	std	Y+48, r25	; 0x30
    2362:	8f a7       	std	Y+47, r24	; 0x2f
    2364:	3f c0       	rjmp	.+126    	; 0x23e4 <LCD_VoidSendCommand+0x27e>
	else if (__tmp > 65535)
    2366:	69 a9       	ldd	r22, Y+49	; 0x31
    2368:	7a a9       	ldd	r23, Y+50	; 0x32
    236a:	8b a9       	ldd	r24, Y+51	; 0x33
    236c:	9c a9       	ldd	r25, Y+52	; 0x34
    236e:	20 e0       	ldi	r18, 0x00	; 0
    2370:	3f ef       	ldi	r19, 0xFF	; 255
    2372:	4f e7       	ldi	r20, 0x7F	; 127
    2374:	57 e4       	ldi	r21, 0x47	; 71
    2376:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    237a:	18 16       	cp	r1, r24
    237c:	4c f5       	brge	.+82     	; 0x23d0 <LCD_VoidSendCommand+0x26a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    237e:	6d a9       	ldd	r22, Y+53	; 0x35
    2380:	7e a9       	ldd	r23, Y+54	; 0x36
    2382:	8f a9       	ldd	r24, Y+55	; 0x37
    2384:	98 ad       	ldd	r25, Y+56	; 0x38
    2386:	20 e0       	ldi	r18, 0x00	; 0
    2388:	30 e0       	ldi	r19, 0x00	; 0
    238a:	40 e2       	ldi	r20, 0x20	; 32
    238c:	51 e4       	ldi	r21, 0x41	; 65
    238e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2392:	dc 01       	movw	r26, r24
    2394:	cb 01       	movw	r24, r22
    2396:	bc 01       	movw	r22, r24
    2398:	cd 01       	movw	r24, r26
    239a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    239e:	dc 01       	movw	r26, r24
    23a0:	cb 01       	movw	r24, r22
    23a2:	98 ab       	std	Y+48, r25	; 0x30
    23a4:	8f a7       	std	Y+47, r24	; 0x2f
    23a6:	0f c0       	rjmp	.+30     	; 0x23c6 <LCD_VoidSendCommand+0x260>
    23a8:	8c e2       	ldi	r24, 0x2C	; 44
    23aa:	91 e0       	ldi	r25, 0x01	; 1
    23ac:	9e a7       	std	Y+46, r25	; 0x2e
    23ae:	8d a7       	std	Y+45, r24	; 0x2d
    23b0:	8d a5       	ldd	r24, Y+45	; 0x2d
    23b2:	9e a5       	ldd	r25, Y+46	; 0x2e
    23b4:	01 97       	sbiw	r24, 0x01	; 1
    23b6:	f1 f7       	brne	.-4      	; 0x23b4 <LCD_VoidSendCommand+0x24e>
    23b8:	9e a7       	std	Y+46, r25	; 0x2e
    23ba:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    23bc:	8f a5       	ldd	r24, Y+47	; 0x2f
    23be:	98 a9       	ldd	r25, Y+48	; 0x30
    23c0:	01 97       	sbiw	r24, 0x01	; 1
    23c2:	98 ab       	std	Y+48, r25	; 0x30
    23c4:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    23c6:	8f a5       	ldd	r24, Y+47	; 0x2f
    23c8:	98 a9       	ldd	r25, Y+48	; 0x30
    23ca:	00 97       	sbiw	r24, 0x00	; 0
    23cc:	69 f7       	brne	.-38     	; 0x23a8 <LCD_VoidSendCommand+0x242>
    23ce:	14 c0       	rjmp	.+40     	; 0x23f8 <LCD_VoidSendCommand+0x292>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    23d0:	69 a9       	ldd	r22, Y+49	; 0x31
    23d2:	7a a9       	ldd	r23, Y+50	; 0x32
    23d4:	8b a9       	ldd	r24, Y+51	; 0x33
    23d6:	9c a9       	ldd	r25, Y+52	; 0x34
    23d8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    23dc:	dc 01       	movw	r26, r24
    23de:	cb 01       	movw	r24, r22
    23e0:	98 ab       	std	Y+48, r25	; 0x30
    23e2:	8f a7       	std	Y+47, r24	; 0x2f
    23e4:	8f a5       	ldd	r24, Y+47	; 0x2f
    23e6:	98 a9       	ldd	r25, Y+48	; 0x30
    23e8:	9c a7       	std	Y+44, r25	; 0x2c
    23ea:	8b a7       	std	Y+43, r24	; 0x2b
    23ec:	8b a5       	ldd	r24, Y+43	; 0x2b
    23ee:	9c a5       	ldd	r25, Y+44	; 0x2c
    23f0:	01 97       	sbiw	r24, 0x01	; 1
    23f2:	f1 f7       	brne	.-4      	; 0x23f0 <LCD_VoidSendCommand+0x28a>
    23f4:	9c a7       	std	Y+44, r25	; 0x2c
    23f6:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1);
	/*set Enable pin to Low*/
	DIO_VoidSetPinVal(LCD_EN_PORT,LCD_EN_Pin,DIO_LOW);
    23f8:	81 e0       	ldi	r24, 0x01	; 1
    23fa:	62 e0       	ldi	r22, 0x02	; 2
    23fc:	40 e0       	ldi	r20, 0x00	; 0
    23fe:	0e 94 97 0a 	call	0x152e	; 0x152e <DIO_VoidSetPinVal>
    2402:	80 e0       	ldi	r24, 0x00	; 0
    2404:	90 e0       	ldi	r25, 0x00	; 0
    2406:	a0 e8       	ldi	r26, 0x80	; 128
    2408:	bf e3       	ldi	r27, 0x3F	; 63
    240a:	8f a3       	std	Y+39, r24	; 0x27
    240c:	98 a7       	std	Y+40, r25	; 0x28
    240e:	a9 a7       	std	Y+41, r26	; 0x29
    2410:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2412:	6f a1       	ldd	r22, Y+39	; 0x27
    2414:	78 a5       	ldd	r23, Y+40	; 0x28
    2416:	89 a5       	ldd	r24, Y+41	; 0x29
    2418:	9a a5       	ldd	r25, Y+42	; 0x2a
    241a:	20 e0       	ldi	r18, 0x00	; 0
    241c:	30 e8       	ldi	r19, 0x80	; 128
    241e:	4b e3       	ldi	r20, 0x3B	; 59
    2420:	55 e4       	ldi	r21, 0x45	; 69
    2422:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2426:	dc 01       	movw	r26, r24
    2428:	cb 01       	movw	r24, r22
    242a:	8b a3       	std	Y+35, r24	; 0x23
    242c:	9c a3       	std	Y+36, r25	; 0x24
    242e:	ad a3       	std	Y+37, r26	; 0x25
    2430:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2432:	6b a1       	ldd	r22, Y+35	; 0x23
    2434:	7c a1       	ldd	r23, Y+36	; 0x24
    2436:	8d a1       	ldd	r24, Y+37	; 0x25
    2438:	9e a1       	ldd	r25, Y+38	; 0x26
    243a:	20 e0       	ldi	r18, 0x00	; 0
    243c:	30 e0       	ldi	r19, 0x00	; 0
    243e:	40 e8       	ldi	r20, 0x80	; 128
    2440:	5f e3       	ldi	r21, 0x3F	; 63
    2442:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2446:	88 23       	and	r24, r24
    2448:	2c f4       	brge	.+10     	; 0x2454 <LCD_VoidSendCommand+0x2ee>
		__ticks = 1;
    244a:	81 e0       	ldi	r24, 0x01	; 1
    244c:	90 e0       	ldi	r25, 0x00	; 0
    244e:	9a a3       	std	Y+34, r25	; 0x22
    2450:	89 a3       	std	Y+33, r24	; 0x21
    2452:	3f c0       	rjmp	.+126    	; 0x24d2 <LCD_VoidSendCommand+0x36c>
	else if (__tmp > 65535)
    2454:	6b a1       	ldd	r22, Y+35	; 0x23
    2456:	7c a1       	ldd	r23, Y+36	; 0x24
    2458:	8d a1       	ldd	r24, Y+37	; 0x25
    245a:	9e a1       	ldd	r25, Y+38	; 0x26
    245c:	20 e0       	ldi	r18, 0x00	; 0
    245e:	3f ef       	ldi	r19, 0xFF	; 255
    2460:	4f e7       	ldi	r20, 0x7F	; 127
    2462:	57 e4       	ldi	r21, 0x47	; 71
    2464:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2468:	18 16       	cp	r1, r24
    246a:	4c f5       	brge	.+82     	; 0x24be <LCD_VoidSendCommand+0x358>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    246c:	6f a1       	ldd	r22, Y+39	; 0x27
    246e:	78 a5       	ldd	r23, Y+40	; 0x28
    2470:	89 a5       	ldd	r24, Y+41	; 0x29
    2472:	9a a5       	ldd	r25, Y+42	; 0x2a
    2474:	20 e0       	ldi	r18, 0x00	; 0
    2476:	30 e0       	ldi	r19, 0x00	; 0
    2478:	40 e2       	ldi	r20, 0x20	; 32
    247a:	51 e4       	ldi	r21, 0x41	; 65
    247c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2480:	dc 01       	movw	r26, r24
    2482:	cb 01       	movw	r24, r22
    2484:	bc 01       	movw	r22, r24
    2486:	cd 01       	movw	r24, r26
    2488:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    248c:	dc 01       	movw	r26, r24
    248e:	cb 01       	movw	r24, r22
    2490:	9a a3       	std	Y+34, r25	; 0x22
    2492:	89 a3       	std	Y+33, r24	; 0x21
    2494:	0f c0       	rjmp	.+30     	; 0x24b4 <LCD_VoidSendCommand+0x34e>
    2496:	8c e2       	ldi	r24, 0x2C	; 44
    2498:	91 e0       	ldi	r25, 0x01	; 1
    249a:	98 a3       	std	Y+32, r25	; 0x20
    249c:	8f 8f       	std	Y+31, r24	; 0x1f
    249e:	8f 8d       	ldd	r24, Y+31	; 0x1f
    24a0:	98 a1       	ldd	r25, Y+32	; 0x20
    24a2:	01 97       	sbiw	r24, 0x01	; 1
    24a4:	f1 f7       	brne	.-4      	; 0x24a2 <LCD_VoidSendCommand+0x33c>
    24a6:	98 a3       	std	Y+32, r25	; 0x20
    24a8:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    24aa:	89 a1       	ldd	r24, Y+33	; 0x21
    24ac:	9a a1       	ldd	r25, Y+34	; 0x22
    24ae:	01 97       	sbiw	r24, 0x01	; 1
    24b0:	9a a3       	std	Y+34, r25	; 0x22
    24b2:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    24b4:	89 a1       	ldd	r24, Y+33	; 0x21
    24b6:	9a a1       	ldd	r25, Y+34	; 0x22
    24b8:	00 97       	sbiw	r24, 0x00	; 0
    24ba:	69 f7       	brne	.-38     	; 0x2496 <LCD_VoidSendCommand+0x330>
    24bc:	14 c0       	rjmp	.+40     	; 0x24e6 <LCD_VoidSendCommand+0x380>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    24be:	6b a1       	ldd	r22, Y+35	; 0x23
    24c0:	7c a1       	ldd	r23, Y+36	; 0x24
    24c2:	8d a1       	ldd	r24, Y+37	; 0x25
    24c4:	9e a1       	ldd	r25, Y+38	; 0x26
    24c6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    24ca:	dc 01       	movw	r26, r24
    24cc:	cb 01       	movw	r24, r22
    24ce:	9a a3       	std	Y+34, r25	; 0x22
    24d0:	89 a3       	std	Y+33, r24	; 0x21
    24d2:	89 a1       	ldd	r24, Y+33	; 0x21
    24d4:	9a a1       	ldd	r25, Y+34	; 0x22
    24d6:	9e 8f       	std	Y+30, r25	; 0x1e
    24d8:	8d 8f       	std	Y+29, r24	; 0x1d
    24da:	8d 8d       	ldd	r24, Y+29	; 0x1d
    24dc:	9e 8d       	ldd	r25, Y+30	; 0x1e
    24de:	01 97       	sbiw	r24, 0x01	; 1
    24e0:	f1 f7       	brne	.-4      	; 0x24de <LCD_VoidSendCommand+0x378>
    24e2:	9e 8f       	std	Y+30, r25	; 0x1e
    24e4:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);

	/*send the command line*/
	DIO_VoidSetPinVal(LCD_Data_PORT, LCD_Data_PIN4, GET_BIT(Local_Command,0));
    24e6:	fe 01       	movw	r30, r28
    24e8:	e9 5b       	subi	r30, 0xB9	; 185
    24ea:	ff 4f       	sbci	r31, 0xFF	; 255
    24ec:	80 81       	ld	r24, Z
    24ee:	98 2f       	mov	r25, r24
    24f0:	91 70       	andi	r25, 0x01	; 1
    24f2:	82 e0       	ldi	r24, 0x02	; 2
    24f4:	60 e0       	ldi	r22, 0x00	; 0
    24f6:	49 2f       	mov	r20, r25
    24f8:	0e 94 97 0a 	call	0x152e	; 0x152e <DIO_VoidSetPinVal>
	DIO_VoidSetPinVal(LCD_Data_PORT, LCD_Data_PIN5, GET_BIT(Local_Command,1));
    24fc:	fe 01       	movw	r30, r28
    24fe:	e9 5b       	subi	r30, 0xB9	; 185
    2500:	ff 4f       	sbci	r31, 0xFF	; 255
    2502:	80 81       	ld	r24, Z
    2504:	86 95       	lsr	r24
    2506:	98 2f       	mov	r25, r24
    2508:	91 70       	andi	r25, 0x01	; 1
    250a:	82 e0       	ldi	r24, 0x02	; 2
    250c:	61 e0       	ldi	r22, 0x01	; 1
    250e:	49 2f       	mov	r20, r25
    2510:	0e 94 97 0a 	call	0x152e	; 0x152e <DIO_VoidSetPinVal>
	DIO_VoidSetPinVal(LCD_Data_PORT, LCD_Data_PIN6, GET_BIT(Local_Command,2));
    2514:	fe 01       	movw	r30, r28
    2516:	e9 5b       	subi	r30, 0xB9	; 185
    2518:	ff 4f       	sbci	r31, 0xFF	; 255
    251a:	80 81       	ld	r24, Z
    251c:	86 95       	lsr	r24
    251e:	86 95       	lsr	r24
    2520:	98 2f       	mov	r25, r24
    2522:	91 70       	andi	r25, 0x01	; 1
    2524:	82 e0       	ldi	r24, 0x02	; 2
    2526:	62 e0       	ldi	r22, 0x02	; 2
    2528:	49 2f       	mov	r20, r25
    252a:	0e 94 97 0a 	call	0x152e	; 0x152e <DIO_VoidSetPinVal>
	DIO_VoidSetPinVal(LCD_Data_PORT, LCD_Data_PIN7, GET_BIT(Local_Command,3));
    252e:	fe 01       	movw	r30, r28
    2530:	e9 5b       	subi	r30, 0xB9	; 185
    2532:	ff 4f       	sbci	r31, 0xFF	; 255
    2534:	80 81       	ld	r24, Z
    2536:	86 95       	lsr	r24
    2538:	86 95       	lsr	r24
    253a:	86 95       	lsr	r24
    253c:	98 2f       	mov	r25, r24
    253e:	91 70       	andi	r25, 0x01	; 1
    2540:	82 e0       	ldi	r24, 0x02	; 2
    2542:	64 e0       	ldi	r22, 0x04	; 4
    2544:	49 2f       	mov	r20, r25
    2546:	0e 94 97 0a 	call	0x152e	; 0x152e <DIO_VoidSetPinVal>

	/*set Enable pin to High*/
	DIO_VoidSetPinVal(LCD_EN_PORT,LCD_EN_Pin,DIO_HIGH);
    254a:	81 e0       	ldi	r24, 0x01	; 1
    254c:	62 e0       	ldi	r22, 0x02	; 2
    254e:	41 e0       	ldi	r20, 0x01	; 1
    2550:	0e 94 97 0a 	call	0x152e	; 0x152e <DIO_VoidSetPinVal>
    2554:	80 e0       	ldi	r24, 0x00	; 0
    2556:	90 e0       	ldi	r25, 0x00	; 0
    2558:	a0 e8       	ldi	r26, 0x80	; 128
    255a:	bf e3       	ldi	r27, 0x3F	; 63
    255c:	89 8f       	std	Y+25, r24	; 0x19
    255e:	9a 8f       	std	Y+26, r25	; 0x1a
    2560:	ab 8f       	std	Y+27, r26	; 0x1b
    2562:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2564:	69 8d       	ldd	r22, Y+25	; 0x19
    2566:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2568:	8b 8d       	ldd	r24, Y+27	; 0x1b
    256a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    256c:	20 e0       	ldi	r18, 0x00	; 0
    256e:	30 e8       	ldi	r19, 0x80	; 128
    2570:	4b e3       	ldi	r20, 0x3B	; 59
    2572:	55 e4       	ldi	r21, 0x45	; 69
    2574:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2578:	dc 01       	movw	r26, r24
    257a:	cb 01       	movw	r24, r22
    257c:	8d 8b       	std	Y+21, r24	; 0x15
    257e:	9e 8b       	std	Y+22, r25	; 0x16
    2580:	af 8b       	std	Y+23, r26	; 0x17
    2582:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2584:	6d 89       	ldd	r22, Y+21	; 0x15
    2586:	7e 89       	ldd	r23, Y+22	; 0x16
    2588:	8f 89       	ldd	r24, Y+23	; 0x17
    258a:	98 8d       	ldd	r25, Y+24	; 0x18
    258c:	20 e0       	ldi	r18, 0x00	; 0
    258e:	30 e0       	ldi	r19, 0x00	; 0
    2590:	40 e8       	ldi	r20, 0x80	; 128
    2592:	5f e3       	ldi	r21, 0x3F	; 63
    2594:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2598:	88 23       	and	r24, r24
    259a:	2c f4       	brge	.+10     	; 0x25a6 <LCD_VoidSendCommand+0x440>
		__ticks = 1;
    259c:	81 e0       	ldi	r24, 0x01	; 1
    259e:	90 e0       	ldi	r25, 0x00	; 0
    25a0:	9c 8b       	std	Y+20, r25	; 0x14
    25a2:	8b 8b       	std	Y+19, r24	; 0x13
    25a4:	3f c0       	rjmp	.+126    	; 0x2624 <LCD_VoidSendCommand+0x4be>
	else if (__tmp > 65535)
    25a6:	6d 89       	ldd	r22, Y+21	; 0x15
    25a8:	7e 89       	ldd	r23, Y+22	; 0x16
    25aa:	8f 89       	ldd	r24, Y+23	; 0x17
    25ac:	98 8d       	ldd	r25, Y+24	; 0x18
    25ae:	20 e0       	ldi	r18, 0x00	; 0
    25b0:	3f ef       	ldi	r19, 0xFF	; 255
    25b2:	4f e7       	ldi	r20, 0x7F	; 127
    25b4:	57 e4       	ldi	r21, 0x47	; 71
    25b6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    25ba:	18 16       	cp	r1, r24
    25bc:	4c f5       	brge	.+82     	; 0x2610 <LCD_VoidSendCommand+0x4aa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    25be:	69 8d       	ldd	r22, Y+25	; 0x19
    25c0:	7a 8d       	ldd	r23, Y+26	; 0x1a
    25c2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    25c4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    25c6:	20 e0       	ldi	r18, 0x00	; 0
    25c8:	30 e0       	ldi	r19, 0x00	; 0
    25ca:	40 e2       	ldi	r20, 0x20	; 32
    25cc:	51 e4       	ldi	r21, 0x41	; 65
    25ce:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    25d2:	dc 01       	movw	r26, r24
    25d4:	cb 01       	movw	r24, r22
    25d6:	bc 01       	movw	r22, r24
    25d8:	cd 01       	movw	r24, r26
    25da:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    25de:	dc 01       	movw	r26, r24
    25e0:	cb 01       	movw	r24, r22
    25e2:	9c 8b       	std	Y+20, r25	; 0x14
    25e4:	8b 8b       	std	Y+19, r24	; 0x13
    25e6:	0f c0       	rjmp	.+30     	; 0x2606 <LCD_VoidSendCommand+0x4a0>
    25e8:	8c e2       	ldi	r24, 0x2C	; 44
    25ea:	91 e0       	ldi	r25, 0x01	; 1
    25ec:	9a 8b       	std	Y+18, r25	; 0x12
    25ee:	89 8b       	std	Y+17, r24	; 0x11
    25f0:	89 89       	ldd	r24, Y+17	; 0x11
    25f2:	9a 89       	ldd	r25, Y+18	; 0x12
    25f4:	01 97       	sbiw	r24, 0x01	; 1
    25f6:	f1 f7       	brne	.-4      	; 0x25f4 <LCD_VoidSendCommand+0x48e>
    25f8:	9a 8b       	std	Y+18, r25	; 0x12
    25fa:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    25fc:	8b 89       	ldd	r24, Y+19	; 0x13
    25fe:	9c 89       	ldd	r25, Y+20	; 0x14
    2600:	01 97       	sbiw	r24, 0x01	; 1
    2602:	9c 8b       	std	Y+20, r25	; 0x14
    2604:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2606:	8b 89       	ldd	r24, Y+19	; 0x13
    2608:	9c 89       	ldd	r25, Y+20	; 0x14
    260a:	00 97       	sbiw	r24, 0x00	; 0
    260c:	69 f7       	brne	.-38     	; 0x25e8 <LCD_VoidSendCommand+0x482>
    260e:	14 c0       	rjmp	.+40     	; 0x2638 <LCD_VoidSendCommand+0x4d2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2610:	6d 89       	ldd	r22, Y+21	; 0x15
    2612:	7e 89       	ldd	r23, Y+22	; 0x16
    2614:	8f 89       	ldd	r24, Y+23	; 0x17
    2616:	98 8d       	ldd	r25, Y+24	; 0x18
    2618:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    261c:	dc 01       	movw	r26, r24
    261e:	cb 01       	movw	r24, r22
    2620:	9c 8b       	std	Y+20, r25	; 0x14
    2622:	8b 8b       	std	Y+19, r24	; 0x13
    2624:	8b 89       	ldd	r24, Y+19	; 0x13
    2626:	9c 89       	ldd	r25, Y+20	; 0x14
    2628:	98 8b       	std	Y+16, r25	; 0x10
    262a:	8f 87       	std	Y+15, r24	; 0x0f
    262c:	8f 85       	ldd	r24, Y+15	; 0x0f
    262e:	98 89       	ldd	r25, Y+16	; 0x10
    2630:	01 97       	sbiw	r24, 0x01	; 1
    2632:	f1 f7       	brne	.-4      	; 0x2630 <LCD_VoidSendCommand+0x4ca>
    2634:	98 8b       	std	Y+16, r25	; 0x10
    2636:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	/*set Enable pin to Low*/
	DIO_VoidSetPinVal(LCD_EN_PORT,LCD_EN_Pin,DIO_LOW);
    2638:	81 e0       	ldi	r24, 0x01	; 1
    263a:	62 e0       	ldi	r22, 0x02	; 2
    263c:	40 e0       	ldi	r20, 0x00	; 0
    263e:	0e 94 97 0a 	call	0x152e	; 0x152e <DIO_VoidSetPinVal>
    2642:	80 e0       	ldi	r24, 0x00	; 0
    2644:	90 e0       	ldi	r25, 0x00	; 0
    2646:	a0 e8       	ldi	r26, 0x80	; 128
    2648:	bf e3       	ldi	r27, 0x3F	; 63
    264a:	8b 87       	std	Y+11, r24	; 0x0b
    264c:	9c 87       	std	Y+12, r25	; 0x0c
    264e:	ad 87       	std	Y+13, r26	; 0x0d
    2650:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2652:	6b 85       	ldd	r22, Y+11	; 0x0b
    2654:	7c 85       	ldd	r23, Y+12	; 0x0c
    2656:	8d 85       	ldd	r24, Y+13	; 0x0d
    2658:	9e 85       	ldd	r25, Y+14	; 0x0e
    265a:	20 e0       	ldi	r18, 0x00	; 0
    265c:	30 e8       	ldi	r19, 0x80	; 128
    265e:	4b e3       	ldi	r20, 0x3B	; 59
    2660:	55 e4       	ldi	r21, 0x45	; 69
    2662:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2666:	dc 01       	movw	r26, r24
    2668:	cb 01       	movw	r24, r22
    266a:	8f 83       	std	Y+7, r24	; 0x07
    266c:	98 87       	std	Y+8, r25	; 0x08
    266e:	a9 87       	std	Y+9, r26	; 0x09
    2670:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2672:	6f 81       	ldd	r22, Y+7	; 0x07
    2674:	78 85       	ldd	r23, Y+8	; 0x08
    2676:	89 85       	ldd	r24, Y+9	; 0x09
    2678:	9a 85       	ldd	r25, Y+10	; 0x0a
    267a:	20 e0       	ldi	r18, 0x00	; 0
    267c:	30 e0       	ldi	r19, 0x00	; 0
    267e:	40 e8       	ldi	r20, 0x80	; 128
    2680:	5f e3       	ldi	r21, 0x3F	; 63
    2682:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2686:	88 23       	and	r24, r24
    2688:	2c f4       	brge	.+10     	; 0x2694 <LCD_VoidSendCommand+0x52e>
		__ticks = 1;
    268a:	81 e0       	ldi	r24, 0x01	; 1
    268c:	90 e0       	ldi	r25, 0x00	; 0
    268e:	9e 83       	std	Y+6, r25	; 0x06
    2690:	8d 83       	std	Y+5, r24	; 0x05
    2692:	3f c0       	rjmp	.+126    	; 0x2712 <LCD_VoidSendCommand+0x5ac>
	else if (__tmp > 65535)
    2694:	6f 81       	ldd	r22, Y+7	; 0x07
    2696:	78 85       	ldd	r23, Y+8	; 0x08
    2698:	89 85       	ldd	r24, Y+9	; 0x09
    269a:	9a 85       	ldd	r25, Y+10	; 0x0a
    269c:	20 e0       	ldi	r18, 0x00	; 0
    269e:	3f ef       	ldi	r19, 0xFF	; 255
    26a0:	4f e7       	ldi	r20, 0x7F	; 127
    26a2:	57 e4       	ldi	r21, 0x47	; 71
    26a4:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    26a8:	18 16       	cp	r1, r24
    26aa:	4c f5       	brge	.+82     	; 0x26fe <LCD_VoidSendCommand+0x598>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    26ac:	6b 85       	ldd	r22, Y+11	; 0x0b
    26ae:	7c 85       	ldd	r23, Y+12	; 0x0c
    26b0:	8d 85       	ldd	r24, Y+13	; 0x0d
    26b2:	9e 85       	ldd	r25, Y+14	; 0x0e
    26b4:	20 e0       	ldi	r18, 0x00	; 0
    26b6:	30 e0       	ldi	r19, 0x00	; 0
    26b8:	40 e2       	ldi	r20, 0x20	; 32
    26ba:	51 e4       	ldi	r21, 0x41	; 65
    26bc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    26c0:	dc 01       	movw	r26, r24
    26c2:	cb 01       	movw	r24, r22
    26c4:	bc 01       	movw	r22, r24
    26c6:	cd 01       	movw	r24, r26
    26c8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    26cc:	dc 01       	movw	r26, r24
    26ce:	cb 01       	movw	r24, r22
    26d0:	9e 83       	std	Y+6, r25	; 0x06
    26d2:	8d 83       	std	Y+5, r24	; 0x05
    26d4:	0f c0       	rjmp	.+30     	; 0x26f4 <LCD_VoidSendCommand+0x58e>
    26d6:	8c e2       	ldi	r24, 0x2C	; 44
    26d8:	91 e0       	ldi	r25, 0x01	; 1
    26da:	9c 83       	std	Y+4, r25	; 0x04
    26dc:	8b 83       	std	Y+3, r24	; 0x03
    26de:	8b 81       	ldd	r24, Y+3	; 0x03
    26e0:	9c 81       	ldd	r25, Y+4	; 0x04
    26e2:	01 97       	sbiw	r24, 0x01	; 1
    26e4:	f1 f7       	brne	.-4      	; 0x26e2 <LCD_VoidSendCommand+0x57c>
    26e6:	9c 83       	std	Y+4, r25	; 0x04
    26e8:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    26ea:	8d 81       	ldd	r24, Y+5	; 0x05
    26ec:	9e 81       	ldd	r25, Y+6	; 0x06
    26ee:	01 97       	sbiw	r24, 0x01	; 1
    26f0:	9e 83       	std	Y+6, r25	; 0x06
    26f2:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    26f4:	8d 81       	ldd	r24, Y+5	; 0x05
    26f6:	9e 81       	ldd	r25, Y+6	; 0x06
    26f8:	00 97       	sbiw	r24, 0x00	; 0
    26fa:	69 f7       	brne	.-38     	; 0x26d6 <LCD_VoidSendCommand+0x570>
    26fc:	14 c0       	rjmp	.+40     	; 0x2726 <LCD_VoidSendCommand+0x5c0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    26fe:	6f 81       	ldd	r22, Y+7	; 0x07
    2700:	78 85       	ldd	r23, Y+8	; 0x08
    2702:	89 85       	ldd	r24, Y+9	; 0x09
    2704:	9a 85       	ldd	r25, Y+10	; 0x0a
    2706:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    270a:	dc 01       	movw	r26, r24
    270c:	cb 01       	movw	r24, r22
    270e:	9e 83       	std	Y+6, r25	; 0x06
    2710:	8d 83       	std	Y+5, r24	; 0x05
    2712:	8d 81       	ldd	r24, Y+5	; 0x05
    2714:	9e 81       	ldd	r25, Y+6	; 0x06
    2716:	9a 83       	std	Y+2, r25	; 0x02
    2718:	89 83       	std	Y+1, r24	; 0x01
    271a:	89 81       	ldd	r24, Y+1	; 0x01
    271c:	9a 81       	ldd	r25, Y+2	; 0x02
    271e:	01 97       	sbiw	r24, 0x01	; 1
    2720:	f1 f7       	brne	.-4      	; 0x271e <LCD_VoidSendCommand+0x5b8>
    2722:	9a 83       	std	Y+2, r25	; 0x02
    2724:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);


}
    2726:	c9 5b       	subi	r28, 0xB9	; 185
    2728:	df 4f       	sbci	r29, 0xFF	; 255
    272a:	0f b6       	in	r0, 0x3f	; 63
    272c:	f8 94       	cli
    272e:	de bf       	out	0x3e, r29	; 62
    2730:	0f be       	out	0x3f, r0	; 63
    2732:	cd bf       	out	0x3d, r28	; 61
    2734:	cf 91       	pop	r28
    2736:	df 91       	pop	r29
    2738:	1f 91       	pop	r17
    273a:	0f 91       	pop	r16
    273c:	08 95       	ret

0000273e <LCD_VoidSendData>:
void LCD_VoidSendData(u8 Local_Data)
{
    273e:	0f 93       	push	r16
    2740:	1f 93       	push	r17
    2742:	df 93       	push	r29
    2744:	cf 93       	push	r28
    2746:	cd b7       	in	r28, 0x3d	; 61
    2748:	de b7       	in	r29, 0x3e	; 62
    274a:	c7 54       	subi	r28, 0x47	; 71
    274c:	d0 40       	sbci	r29, 0x00	; 0
    274e:	0f b6       	in	r0, 0x3f	; 63
    2750:	f8 94       	cli
    2752:	de bf       	out	0x3e, r29	; 62
    2754:	0f be       	out	0x3f, r0	; 63
    2756:	cd bf       	out	0x3d, r28	; 61
    2758:	fe 01       	movw	r30, r28
    275a:	e9 5b       	subi	r30, 0xB9	; 185
    275c:	ff 4f       	sbci	r31, 0xFF	; 255
    275e:	80 83       	st	Z, r24
	/*send the char line*/
	DIO_VoidSetPinVal(LCD_Data_PORT, LCD_Data_PIN4, GET_BIT(Local_Data,4));
    2760:	fe 01       	movw	r30, r28
    2762:	e9 5b       	subi	r30, 0xB9	; 185
    2764:	ff 4f       	sbci	r31, 0xFF	; 255
    2766:	80 81       	ld	r24, Z
    2768:	82 95       	swap	r24
    276a:	8f 70       	andi	r24, 0x0F	; 15
    276c:	98 2f       	mov	r25, r24
    276e:	91 70       	andi	r25, 0x01	; 1
    2770:	82 e0       	ldi	r24, 0x02	; 2
    2772:	60 e0       	ldi	r22, 0x00	; 0
    2774:	49 2f       	mov	r20, r25
    2776:	0e 94 97 0a 	call	0x152e	; 0x152e <DIO_VoidSetPinVal>
	DIO_VoidSetPinVal(LCD_Data_PORT, LCD_Data_PIN5, GET_BIT(Local_Data,5));
    277a:	fe 01       	movw	r30, r28
    277c:	e9 5b       	subi	r30, 0xB9	; 185
    277e:	ff 4f       	sbci	r31, 0xFF	; 255
    2780:	80 81       	ld	r24, Z
    2782:	82 95       	swap	r24
    2784:	86 95       	lsr	r24
    2786:	87 70       	andi	r24, 0x07	; 7
    2788:	98 2f       	mov	r25, r24
    278a:	91 70       	andi	r25, 0x01	; 1
    278c:	82 e0       	ldi	r24, 0x02	; 2
    278e:	61 e0       	ldi	r22, 0x01	; 1
    2790:	49 2f       	mov	r20, r25
    2792:	0e 94 97 0a 	call	0x152e	; 0x152e <DIO_VoidSetPinVal>
	DIO_VoidSetPinVal(LCD_Data_PORT, LCD_Data_PIN6, GET_BIT(Local_Data,6));
    2796:	fe 01       	movw	r30, r28
    2798:	e9 5b       	subi	r30, 0xB9	; 185
    279a:	ff 4f       	sbci	r31, 0xFF	; 255
    279c:	80 81       	ld	r24, Z
    279e:	82 95       	swap	r24
    27a0:	86 95       	lsr	r24
    27a2:	86 95       	lsr	r24
    27a4:	83 70       	andi	r24, 0x03	; 3
    27a6:	98 2f       	mov	r25, r24
    27a8:	91 70       	andi	r25, 0x01	; 1
    27aa:	82 e0       	ldi	r24, 0x02	; 2
    27ac:	62 e0       	ldi	r22, 0x02	; 2
    27ae:	49 2f       	mov	r20, r25
    27b0:	0e 94 97 0a 	call	0x152e	; 0x152e <DIO_VoidSetPinVal>
	DIO_VoidSetPinVal(LCD_Data_PORT, LCD_Data_PIN7, GET_BIT(Local_Data,7));
    27b4:	fe 01       	movw	r30, r28
    27b6:	e9 5b       	subi	r30, 0xB9	; 185
    27b8:	ff 4f       	sbci	r31, 0xFF	; 255
    27ba:	80 81       	ld	r24, Z
    27bc:	98 2f       	mov	r25, r24
    27be:	99 1f       	adc	r25, r25
    27c0:	99 27       	eor	r25, r25
    27c2:	99 1f       	adc	r25, r25
    27c4:	82 e0       	ldi	r24, 0x02	; 2
    27c6:	64 e0       	ldi	r22, 0x04	; 4
    27c8:	49 2f       	mov	r20, r25
    27ca:	0e 94 97 0a 	call	0x152e	; 0x152e <DIO_VoidSetPinVal>
	/*set RS pin to command --> 0*/
	DIO_VoidSetPinVal(LCD_RS_PORT,LCD_RS_Pin,DIO_HIGH);
    27ce:	81 e0       	ldi	r24, 0x01	; 1
    27d0:	63 e0       	ldi	r22, 0x03	; 3
    27d2:	41 e0       	ldi	r20, 0x01	; 1
    27d4:	0e 94 97 0a 	call	0x152e	; 0x152e <DIO_VoidSetPinVal>
    27d8:	fe 01       	movw	r30, r28
    27da:	ed 5b       	subi	r30, 0xBD	; 189
    27dc:	ff 4f       	sbci	r31, 0xFF	; 255
    27de:	80 e0       	ldi	r24, 0x00	; 0
    27e0:	90 e0       	ldi	r25, 0x00	; 0
    27e2:	a0 e8       	ldi	r26, 0x80	; 128
    27e4:	bf e3       	ldi	r27, 0x3F	; 63
    27e6:	80 83       	st	Z, r24
    27e8:	91 83       	std	Z+1, r25	; 0x01
    27ea:	a2 83       	std	Z+2, r26	; 0x02
    27ec:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    27ee:	8e 01       	movw	r16, r28
    27f0:	01 5c       	subi	r16, 0xC1	; 193
    27f2:	1f 4f       	sbci	r17, 0xFF	; 255
    27f4:	fe 01       	movw	r30, r28
    27f6:	ed 5b       	subi	r30, 0xBD	; 189
    27f8:	ff 4f       	sbci	r31, 0xFF	; 255
    27fa:	60 81       	ld	r22, Z
    27fc:	71 81       	ldd	r23, Z+1	; 0x01
    27fe:	82 81       	ldd	r24, Z+2	; 0x02
    2800:	93 81       	ldd	r25, Z+3	; 0x03
    2802:	20 e0       	ldi	r18, 0x00	; 0
    2804:	30 e8       	ldi	r19, 0x80	; 128
    2806:	4b e3       	ldi	r20, 0x3B	; 59
    2808:	55 e4       	ldi	r21, 0x45	; 69
    280a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    280e:	dc 01       	movw	r26, r24
    2810:	cb 01       	movw	r24, r22
    2812:	f8 01       	movw	r30, r16
    2814:	80 83       	st	Z, r24
    2816:	91 83       	std	Z+1, r25	; 0x01
    2818:	a2 83       	std	Z+2, r26	; 0x02
    281a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    281c:	fe 01       	movw	r30, r28
    281e:	ff 96       	adiw	r30, 0x3f	; 63
    2820:	60 81       	ld	r22, Z
    2822:	71 81       	ldd	r23, Z+1	; 0x01
    2824:	82 81       	ldd	r24, Z+2	; 0x02
    2826:	93 81       	ldd	r25, Z+3	; 0x03
    2828:	20 e0       	ldi	r18, 0x00	; 0
    282a:	30 e0       	ldi	r19, 0x00	; 0
    282c:	40 e8       	ldi	r20, 0x80	; 128
    282e:	5f e3       	ldi	r21, 0x3F	; 63
    2830:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2834:	88 23       	and	r24, r24
    2836:	2c f4       	brge	.+10     	; 0x2842 <LCD_VoidSendData+0x104>
		__ticks = 1;
    2838:	81 e0       	ldi	r24, 0x01	; 1
    283a:	90 e0       	ldi	r25, 0x00	; 0
    283c:	9e af       	std	Y+62, r25	; 0x3e
    283e:	8d af       	std	Y+61, r24	; 0x3d
    2840:	46 c0       	rjmp	.+140    	; 0x28ce <LCD_VoidSendData+0x190>
	else if (__tmp > 65535)
    2842:	fe 01       	movw	r30, r28
    2844:	ff 96       	adiw	r30, 0x3f	; 63
    2846:	60 81       	ld	r22, Z
    2848:	71 81       	ldd	r23, Z+1	; 0x01
    284a:	82 81       	ldd	r24, Z+2	; 0x02
    284c:	93 81       	ldd	r25, Z+3	; 0x03
    284e:	20 e0       	ldi	r18, 0x00	; 0
    2850:	3f ef       	ldi	r19, 0xFF	; 255
    2852:	4f e7       	ldi	r20, 0x7F	; 127
    2854:	57 e4       	ldi	r21, 0x47	; 71
    2856:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    285a:	18 16       	cp	r1, r24
    285c:	64 f5       	brge	.+88     	; 0x28b6 <LCD_VoidSendData+0x178>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    285e:	fe 01       	movw	r30, r28
    2860:	ed 5b       	subi	r30, 0xBD	; 189
    2862:	ff 4f       	sbci	r31, 0xFF	; 255
    2864:	60 81       	ld	r22, Z
    2866:	71 81       	ldd	r23, Z+1	; 0x01
    2868:	82 81       	ldd	r24, Z+2	; 0x02
    286a:	93 81       	ldd	r25, Z+3	; 0x03
    286c:	20 e0       	ldi	r18, 0x00	; 0
    286e:	30 e0       	ldi	r19, 0x00	; 0
    2870:	40 e2       	ldi	r20, 0x20	; 32
    2872:	51 e4       	ldi	r21, 0x41	; 65
    2874:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2878:	dc 01       	movw	r26, r24
    287a:	cb 01       	movw	r24, r22
    287c:	bc 01       	movw	r22, r24
    287e:	cd 01       	movw	r24, r26
    2880:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2884:	dc 01       	movw	r26, r24
    2886:	cb 01       	movw	r24, r22
    2888:	9e af       	std	Y+62, r25	; 0x3e
    288a:	8d af       	std	Y+61, r24	; 0x3d
    288c:	0f c0       	rjmp	.+30     	; 0x28ac <LCD_VoidSendData+0x16e>
    288e:	8c e2       	ldi	r24, 0x2C	; 44
    2890:	91 e0       	ldi	r25, 0x01	; 1
    2892:	9c af       	std	Y+60, r25	; 0x3c
    2894:	8b af       	std	Y+59, r24	; 0x3b
    2896:	8b ad       	ldd	r24, Y+59	; 0x3b
    2898:	9c ad       	ldd	r25, Y+60	; 0x3c
    289a:	01 97       	sbiw	r24, 0x01	; 1
    289c:	f1 f7       	brne	.-4      	; 0x289a <LCD_VoidSendData+0x15c>
    289e:	9c af       	std	Y+60, r25	; 0x3c
    28a0:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    28a2:	8d ad       	ldd	r24, Y+61	; 0x3d
    28a4:	9e ad       	ldd	r25, Y+62	; 0x3e
    28a6:	01 97       	sbiw	r24, 0x01	; 1
    28a8:	9e af       	std	Y+62, r25	; 0x3e
    28aa:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    28ac:	8d ad       	ldd	r24, Y+61	; 0x3d
    28ae:	9e ad       	ldd	r25, Y+62	; 0x3e
    28b0:	00 97       	sbiw	r24, 0x00	; 0
    28b2:	69 f7       	brne	.-38     	; 0x288e <LCD_VoidSendData+0x150>
    28b4:	16 c0       	rjmp	.+44     	; 0x28e2 <LCD_VoidSendData+0x1a4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    28b6:	fe 01       	movw	r30, r28
    28b8:	ff 96       	adiw	r30, 0x3f	; 63
    28ba:	60 81       	ld	r22, Z
    28bc:	71 81       	ldd	r23, Z+1	; 0x01
    28be:	82 81       	ldd	r24, Z+2	; 0x02
    28c0:	93 81       	ldd	r25, Z+3	; 0x03
    28c2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    28c6:	dc 01       	movw	r26, r24
    28c8:	cb 01       	movw	r24, r22
    28ca:	9e af       	std	Y+62, r25	; 0x3e
    28cc:	8d af       	std	Y+61, r24	; 0x3d
    28ce:	8d ad       	ldd	r24, Y+61	; 0x3d
    28d0:	9e ad       	ldd	r25, Y+62	; 0x3e
    28d2:	9a af       	std	Y+58, r25	; 0x3a
    28d4:	89 af       	std	Y+57, r24	; 0x39
    28d6:	89 ad       	ldd	r24, Y+57	; 0x39
    28d8:	9a ad       	ldd	r25, Y+58	; 0x3a
    28da:	01 97       	sbiw	r24, 0x01	; 1
    28dc:	f1 f7       	brne	.-4      	; 0x28da <LCD_VoidSendData+0x19c>
    28de:	9a af       	std	Y+58, r25	; 0x3a
    28e0:	89 af       	std	Y+57, r24	; 0x39
	_delay_ms(1);
	/*set Enable pin to High*/
	DIO_VoidSetPinVal(LCD_EN_PORT,LCD_EN_Pin,DIO_HIGH);
    28e2:	81 e0       	ldi	r24, 0x01	; 1
    28e4:	62 e0       	ldi	r22, 0x02	; 2
    28e6:	41 e0       	ldi	r20, 0x01	; 1
    28e8:	0e 94 97 0a 	call	0x152e	; 0x152e <DIO_VoidSetPinVal>
    28ec:	80 e0       	ldi	r24, 0x00	; 0
    28ee:	90 e0       	ldi	r25, 0x00	; 0
    28f0:	a0 e8       	ldi	r26, 0x80	; 128
    28f2:	bf e3       	ldi	r27, 0x3F	; 63
    28f4:	8d ab       	std	Y+53, r24	; 0x35
    28f6:	9e ab       	std	Y+54, r25	; 0x36
    28f8:	af ab       	std	Y+55, r26	; 0x37
    28fa:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    28fc:	6d a9       	ldd	r22, Y+53	; 0x35
    28fe:	7e a9       	ldd	r23, Y+54	; 0x36
    2900:	8f a9       	ldd	r24, Y+55	; 0x37
    2902:	98 ad       	ldd	r25, Y+56	; 0x38
    2904:	20 e0       	ldi	r18, 0x00	; 0
    2906:	30 e8       	ldi	r19, 0x80	; 128
    2908:	4b e3       	ldi	r20, 0x3B	; 59
    290a:	55 e4       	ldi	r21, 0x45	; 69
    290c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2910:	dc 01       	movw	r26, r24
    2912:	cb 01       	movw	r24, r22
    2914:	89 ab       	std	Y+49, r24	; 0x31
    2916:	9a ab       	std	Y+50, r25	; 0x32
    2918:	ab ab       	std	Y+51, r26	; 0x33
    291a:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    291c:	69 a9       	ldd	r22, Y+49	; 0x31
    291e:	7a a9       	ldd	r23, Y+50	; 0x32
    2920:	8b a9       	ldd	r24, Y+51	; 0x33
    2922:	9c a9       	ldd	r25, Y+52	; 0x34
    2924:	20 e0       	ldi	r18, 0x00	; 0
    2926:	30 e0       	ldi	r19, 0x00	; 0
    2928:	40 e8       	ldi	r20, 0x80	; 128
    292a:	5f e3       	ldi	r21, 0x3F	; 63
    292c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2930:	88 23       	and	r24, r24
    2932:	2c f4       	brge	.+10     	; 0x293e <LCD_VoidSendData+0x200>
		__ticks = 1;
    2934:	81 e0       	ldi	r24, 0x01	; 1
    2936:	90 e0       	ldi	r25, 0x00	; 0
    2938:	98 ab       	std	Y+48, r25	; 0x30
    293a:	8f a7       	std	Y+47, r24	; 0x2f
    293c:	3f c0       	rjmp	.+126    	; 0x29bc <LCD_VoidSendData+0x27e>
	else if (__tmp > 65535)
    293e:	69 a9       	ldd	r22, Y+49	; 0x31
    2940:	7a a9       	ldd	r23, Y+50	; 0x32
    2942:	8b a9       	ldd	r24, Y+51	; 0x33
    2944:	9c a9       	ldd	r25, Y+52	; 0x34
    2946:	20 e0       	ldi	r18, 0x00	; 0
    2948:	3f ef       	ldi	r19, 0xFF	; 255
    294a:	4f e7       	ldi	r20, 0x7F	; 127
    294c:	57 e4       	ldi	r21, 0x47	; 71
    294e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2952:	18 16       	cp	r1, r24
    2954:	4c f5       	brge	.+82     	; 0x29a8 <LCD_VoidSendData+0x26a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2956:	6d a9       	ldd	r22, Y+53	; 0x35
    2958:	7e a9       	ldd	r23, Y+54	; 0x36
    295a:	8f a9       	ldd	r24, Y+55	; 0x37
    295c:	98 ad       	ldd	r25, Y+56	; 0x38
    295e:	20 e0       	ldi	r18, 0x00	; 0
    2960:	30 e0       	ldi	r19, 0x00	; 0
    2962:	40 e2       	ldi	r20, 0x20	; 32
    2964:	51 e4       	ldi	r21, 0x41	; 65
    2966:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    296a:	dc 01       	movw	r26, r24
    296c:	cb 01       	movw	r24, r22
    296e:	bc 01       	movw	r22, r24
    2970:	cd 01       	movw	r24, r26
    2972:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2976:	dc 01       	movw	r26, r24
    2978:	cb 01       	movw	r24, r22
    297a:	98 ab       	std	Y+48, r25	; 0x30
    297c:	8f a7       	std	Y+47, r24	; 0x2f
    297e:	0f c0       	rjmp	.+30     	; 0x299e <LCD_VoidSendData+0x260>
    2980:	8c e2       	ldi	r24, 0x2C	; 44
    2982:	91 e0       	ldi	r25, 0x01	; 1
    2984:	9e a7       	std	Y+46, r25	; 0x2e
    2986:	8d a7       	std	Y+45, r24	; 0x2d
    2988:	8d a5       	ldd	r24, Y+45	; 0x2d
    298a:	9e a5       	ldd	r25, Y+46	; 0x2e
    298c:	01 97       	sbiw	r24, 0x01	; 1
    298e:	f1 f7       	brne	.-4      	; 0x298c <LCD_VoidSendData+0x24e>
    2990:	9e a7       	std	Y+46, r25	; 0x2e
    2992:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2994:	8f a5       	ldd	r24, Y+47	; 0x2f
    2996:	98 a9       	ldd	r25, Y+48	; 0x30
    2998:	01 97       	sbiw	r24, 0x01	; 1
    299a:	98 ab       	std	Y+48, r25	; 0x30
    299c:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    299e:	8f a5       	ldd	r24, Y+47	; 0x2f
    29a0:	98 a9       	ldd	r25, Y+48	; 0x30
    29a2:	00 97       	sbiw	r24, 0x00	; 0
    29a4:	69 f7       	brne	.-38     	; 0x2980 <LCD_VoidSendData+0x242>
    29a6:	14 c0       	rjmp	.+40     	; 0x29d0 <LCD_VoidSendData+0x292>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    29a8:	69 a9       	ldd	r22, Y+49	; 0x31
    29aa:	7a a9       	ldd	r23, Y+50	; 0x32
    29ac:	8b a9       	ldd	r24, Y+51	; 0x33
    29ae:	9c a9       	ldd	r25, Y+52	; 0x34
    29b0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    29b4:	dc 01       	movw	r26, r24
    29b6:	cb 01       	movw	r24, r22
    29b8:	98 ab       	std	Y+48, r25	; 0x30
    29ba:	8f a7       	std	Y+47, r24	; 0x2f
    29bc:	8f a5       	ldd	r24, Y+47	; 0x2f
    29be:	98 a9       	ldd	r25, Y+48	; 0x30
    29c0:	9c a7       	std	Y+44, r25	; 0x2c
    29c2:	8b a7       	std	Y+43, r24	; 0x2b
    29c4:	8b a5       	ldd	r24, Y+43	; 0x2b
    29c6:	9c a5       	ldd	r25, Y+44	; 0x2c
    29c8:	01 97       	sbiw	r24, 0x01	; 1
    29ca:	f1 f7       	brne	.-4      	; 0x29c8 <LCD_VoidSendData+0x28a>
    29cc:	9c a7       	std	Y+44, r25	; 0x2c
    29ce:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1);
	/*set Enable pin to Low*/
	DIO_VoidSetPinVal(LCD_EN_PORT,LCD_EN_Pin,DIO_LOW);
    29d0:	81 e0       	ldi	r24, 0x01	; 1
    29d2:	62 e0       	ldi	r22, 0x02	; 2
    29d4:	40 e0       	ldi	r20, 0x00	; 0
    29d6:	0e 94 97 0a 	call	0x152e	; 0x152e <DIO_VoidSetPinVal>
    29da:	80 e0       	ldi	r24, 0x00	; 0
    29dc:	90 e0       	ldi	r25, 0x00	; 0
    29de:	a0 e8       	ldi	r26, 0x80	; 128
    29e0:	bf e3       	ldi	r27, 0x3F	; 63
    29e2:	8f a3       	std	Y+39, r24	; 0x27
    29e4:	98 a7       	std	Y+40, r25	; 0x28
    29e6:	a9 a7       	std	Y+41, r26	; 0x29
    29e8:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    29ea:	6f a1       	ldd	r22, Y+39	; 0x27
    29ec:	78 a5       	ldd	r23, Y+40	; 0x28
    29ee:	89 a5       	ldd	r24, Y+41	; 0x29
    29f0:	9a a5       	ldd	r25, Y+42	; 0x2a
    29f2:	20 e0       	ldi	r18, 0x00	; 0
    29f4:	30 e8       	ldi	r19, 0x80	; 128
    29f6:	4b e3       	ldi	r20, 0x3B	; 59
    29f8:	55 e4       	ldi	r21, 0x45	; 69
    29fa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    29fe:	dc 01       	movw	r26, r24
    2a00:	cb 01       	movw	r24, r22
    2a02:	8b a3       	std	Y+35, r24	; 0x23
    2a04:	9c a3       	std	Y+36, r25	; 0x24
    2a06:	ad a3       	std	Y+37, r26	; 0x25
    2a08:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2a0a:	6b a1       	ldd	r22, Y+35	; 0x23
    2a0c:	7c a1       	ldd	r23, Y+36	; 0x24
    2a0e:	8d a1       	ldd	r24, Y+37	; 0x25
    2a10:	9e a1       	ldd	r25, Y+38	; 0x26
    2a12:	20 e0       	ldi	r18, 0x00	; 0
    2a14:	30 e0       	ldi	r19, 0x00	; 0
    2a16:	40 e8       	ldi	r20, 0x80	; 128
    2a18:	5f e3       	ldi	r21, 0x3F	; 63
    2a1a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2a1e:	88 23       	and	r24, r24
    2a20:	2c f4       	brge	.+10     	; 0x2a2c <LCD_VoidSendData+0x2ee>
		__ticks = 1;
    2a22:	81 e0       	ldi	r24, 0x01	; 1
    2a24:	90 e0       	ldi	r25, 0x00	; 0
    2a26:	9a a3       	std	Y+34, r25	; 0x22
    2a28:	89 a3       	std	Y+33, r24	; 0x21
    2a2a:	3f c0       	rjmp	.+126    	; 0x2aaa <LCD_VoidSendData+0x36c>
	else if (__tmp > 65535)
    2a2c:	6b a1       	ldd	r22, Y+35	; 0x23
    2a2e:	7c a1       	ldd	r23, Y+36	; 0x24
    2a30:	8d a1       	ldd	r24, Y+37	; 0x25
    2a32:	9e a1       	ldd	r25, Y+38	; 0x26
    2a34:	20 e0       	ldi	r18, 0x00	; 0
    2a36:	3f ef       	ldi	r19, 0xFF	; 255
    2a38:	4f e7       	ldi	r20, 0x7F	; 127
    2a3a:	57 e4       	ldi	r21, 0x47	; 71
    2a3c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2a40:	18 16       	cp	r1, r24
    2a42:	4c f5       	brge	.+82     	; 0x2a96 <LCD_VoidSendData+0x358>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2a44:	6f a1       	ldd	r22, Y+39	; 0x27
    2a46:	78 a5       	ldd	r23, Y+40	; 0x28
    2a48:	89 a5       	ldd	r24, Y+41	; 0x29
    2a4a:	9a a5       	ldd	r25, Y+42	; 0x2a
    2a4c:	20 e0       	ldi	r18, 0x00	; 0
    2a4e:	30 e0       	ldi	r19, 0x00	; 0
    2a50:	40 e2       	ldi	r20, 0x20	; 32
    2a52:	51 e4       	ldi	r21, 0x41	; 65
    2a54:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a58:	dc 01       	movw	r26, r24
    2a5a:	cb 01       	movw	r24, r22
    2a5c:	bc 01       	movw	r22, r24
    2a5e:	cd 01       	movw	r24, r26
    2a60:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a64:	dc 01       	movw	r26, r24
    2a66:	cb 01       	movw	r24, r22
    2a68:	9a a3       	std	Y+34, r25	; 0x22
    2a6a:	89 a3       	std	Y+33, r24	; 0x21
    2a6c:	0f c0       	rjmp	.+30     	; 0x2a8c <LCD_VoidSendData+0x34e>
    2a6e:	8c e2       	ldi	r24, 0x2C	; 44
    2a70:	91 e0       	ldi	r25, 0x01	; 1
    2a72:	98 a3       	std	Y+32, r25	; 0x20
    2a74:	8f 8f       	std	Y+31, r24	; 0x1f
    2a76:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2a78:	98 a1       	ldd	r25, Y+32	; 0x20
    2a7a:	01 97       	sbiw	r24, 0x01	; 1
    2a7c:	f1 f7       	brne	.-4      	; 0x2a7a <LCD_VoidSendData+0x33c>
    2a7e:	98 a3       	std	Y+32, r25	; 0x20
    2a80:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2a82:	89 a1       	ldd	r24, Y+33	; 0x21
    2a84:	9a a1       	ldd	r25, Y+34	; 0x22
    2a86:	01 97       	sbiw	r24, 0x01	; 1
    2a88:	9a a3       	std	Y+34, r25	; 0x22
    2a8a:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2a8c:	89 a1       	ldd	r24, Y+33	; 0x21
    2a8e:	9a a1       	ldd	r25, Y+34	; 0x22
    2a90:	00 97       	sbiw	r24, 0x00	; 0
    2a92:	69 f7       	brne	.-38     	; 0x2a6e <LCD_VoidSendData+0x330>
    2a94:	14 c0       	rjmp	.+40     	; 0x2abe <LCD_VoidSendData+0x380>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2a96:	6b a1       	ldd	r22, Y+35	; 0x23
    2a98:	7c a1       	ldd	r23, Y+36	; 0x24
    2a9a:	8d a1       	ldd	r24, Y+37	; 0x25
    2a9c:	9e a1       	ldd	r25, Y+38	; 0x26
    2a9e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2aa2:	dc 01       	movw	r26, r24
    2aa4:	cb 01       	movw	r24, r22
    2aa6:	9a a3       	std	Y+34, r25	; 0x22
    2aa8:	89 a3       	std	Y+33, r24	; 0x21
    2aaa:	89 a1       	ldd	r24, Y+33	; 0x21
    2aac:	9a a1       	ldd	r25, Y+34	; 0x22
    2aae:	9e 8f       	std	Y+30, r25	; 0x1e
    2ab0:	8d 8f       	std	Y+29, r24	; 0x1d
    2ab2:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2ab4:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2ab6:	01 97       	sbiw	r24, 0x01	; 1
    2ab8:	f1 f7       	brne	.-4      	; 0x2ab6 <LCD_VoidSendData+0x378>
    2aba:	9e 8f       	std	Y+30, r25	; 0x1e
    2abc:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);

	/*send the command line*/
	DIO_VoidSetPinVal(LCD_Data_PORT, LCD_Data_PIN4, GET_BIT(Local_Data,0));
    2abe:	fe 01       	movw	r30, r28
    2ac0:	e9 5b       	subi	r30, 0xB9	; 185
    2ac2:	ff 4f       	sbci	r31, 0xFF	; 255
    2ac4:	80 81       	ld	r24, Z
    2ac6:	98 2f       	mov	r25, r24
    2ac8:	91 70       	andi	r25, 0x01	; 1
    2aca:	82 e0       	ldi	r24, 0x02	; 2
    2acc:	60 e0       	ldi	r22, 0x00	; 0
    2ace:	49 2f       	mov	r20, r25
    2ad0:	0e 94 97 0a 	call	0x152e	; 0x152e <DIO_VoidSetPinVal>
	DIO_VoidSetPinVal(LCD_Data_PORT, LCD_Data_PIN5, GET_BIT(Local_Data,1));
    2ad4:	fe 01       	movw	r30, r28
    2ad6:	e9 5b       	subi	r30, 0xB9	; 185
    2ad8:	ff 4f       	sbci	r31, 0xFF	; 255
    2ada:	80 81       	ld	r24, Z
    2adc:	86 95       	lsr	r24
    2ade:	98 2f       	mov	r25, r24
    2ae0:	91 70       	andi	r25, 0x01	; 1
    2ae2:	82 e0       	ldi	r24, 0x02	; 2
    2ae4:	61 e0       	ldi	r22, 0x01	; 1
    2ae6:	49 2f       	mov	r20, r25
    2ae8:	0e 94 97 0a 	call	0x152e	; 0x152e <DIO_VoidSetPinVal>
	DIO_VoidSetPinVal(LCD_Data_PORT, LCD_Data_PIN6, GET_BIT(Local_Data,2));
    2aec:	fe 01       	movw	r30, r28
    2aee:	e9 5b       	subi	r30, 0xB9	; 185
    2af0:	ff 4f       	sbci	r31, 0xFF	; 255
    2af2:	80 81       	ld	r24, Z
    2af4:	86 95       	lsr	r24
    2af6:	86 95       	lsr	r24
    2af8:	98 2f       	mov	r25, r24
    2afa:	91 70       	andi	r25, 0x01	; 1
    2afc:	82 e0       	ldi	r24, 0x02	; 2
    2afe:	62 e0       	ldi	r22, 0x02	; 2
    2b00:	49 2f       	mov	r20, r25
    2b02:	0e 94 97 0a 	call	0x152e	; 0x152e <DIO_VoidSetPinVal>
	DIO_VoidSetPinVal(LCD_Data_PORT, LCD_Data_PIN7, GET_BIT(Local_Data,3));
    2b06:	fe 01       	movw	r30, r28
    2b08:	e9 5b       	subi	r30, 0xB9	; 185
    2b0a:	ff 4f       	sbci	r31, 0xFF	; 255
    2b0c:	80 81       	ld	r24, Z
    2b0e:	86 95       	lsr	r24
    2b10:	86 95       	lsr	r24
    2b12:	86 95       	lsr	r24
    2b14:	98 2f       	mov	r25, r24
    2b16:	91 70       	andi	r25, 0x01	; 1
    2b18:	82 e0       	ldi	r24, 0x02	; 2
    2b1a:	64 e0       	ldi	r22, 0x04	; 4
    2b1c:	49 2f       	mov	r20, r25
    2b1e:	0e 94 97 0a 	call	0x152e	; 0x152e <DIO_VoidSetPinVal>

	/*set Enable pin to High*/
	DIO_VoidSetPinVal(LCD_EN_PORT,LCD_EN_Pin,DIO_HIGH);
    2b22:	81 e0       	ldi	r24, 0x01	; 1
    2b24:	62 e0       	ldi	r22, 0x02	; 2
    2b26:	41 e0       	ldi	r20, 0x01	; 1
    2b28:	0e 94 97 0a 	call	0x152e	; 0x152e <DIO_VoidSetPinVal>
    2b2c:	80 e0       	ldi	r24, 0x00	; 0
    2b2e:	90 e0       	ldi	r25, 0x00	; 0
    2b30:	a0 e8       	ldi	r26, 0x80	; 128
    2b32:	bf e3       	ldi	r27, 0x3F	; 63
    2b34:	89 8f       	std	Y+25, r24	; 0x19
    2b36:	9a 8f       	std	Y+26, r25	; 0x1a
    2b38:	ab 8f       	std	Y+27, r26	; 0x1b
    2b3a:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2b3c:	69 8d       	ldd	r22, Y+25	; 0x19
    2b3e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2b40:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2b42:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2b44:	20 e0       	ldi	r18, 0x00	; 0
    2b46:	30 e8       	ldi	r19, 0x80	; 128
    2b48:	4b e3       	ldi	r20, 0x3B	; 59
    2b4a:	55 e4       	ldi	r21, 0x45	; 69
    2b4c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b50:	dc 01       	movw	r26, r24
    2b52:	cb 01       	movw	r24, r22
    2b54:	8d 8b       	std	Y+21, r24	; 0x15
    2b56:	9e 8b       	std	Y+22, r25	; 0x16
    2b58:	af 8b       	std	Y+23, r26	; 0x17
    2b5a:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2b5c:	6d 89       	ldd	r22, Y+21	; 0x15
    2b5e:	7e 89       	ldd	r23, Y+22	; 0x16
    2b60:	8f 89       	ldd	r24, Y+23	; 0x17
    2b62:	98 8d       	ldd	r25, Y+24	; 0x18
    2b64:	20 e0       	ldi	r18, 0x00	; 0
    2b66:	30 e0       	ldi	r19, 0x00	; 0
    2b68:	40 e8       	ldi	r20, 0x80	; 128
    2b6a:	5f e3       	ldi	r21, 0x3F	; 63
    2b6c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2b70:	88 23       	and	r24, r24
    2b72:	2c f4       	brge	.+10     	; 0x2b7e <LCD_VoidSendData+0x440>
		__ticks = 1;
    2b74:	81 e0       	ldi	r24, 0x01	; 1
    2b76:	90 e0       	ldi	r25, 0x00	; 0
    2b78:	9c 8b       	std	Y+20, r25	; 0x14
    2b7a:	8b 8b       	std	Y+19, r24	; 0x13
    2b7c:	3f c0       	rjmp	.+126    	; 0x2bfc <LCD_VoidSendData+0x4be>
	else if (__tmp > 65535)
    2b7e:	6d 89       	ldd	r22, Y+21	; 0x15
    2b80:	7e 89       	ldd	r23, Y+22	; 0x16
    2b82:	8f 89       	ldd	r24, Y+23	; 0x17
    2b84:	98 8d       	ldd	r25, Y+24	; 0x18
    2b86:	20 e0       	ldi	r18, 0x00	; 0
    2b88:	3f ef       	ldi	r19, 0xFF	; 255
    2b8a:	4f e7       	ldi	r20, 0x7F	; 127
    2b8c:	57 e4       	ldi	r21, 0x47	; 71
    2b8e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2b92:	18 16       	cp	r1, r24
    2b94:	4c f5       	brge	.+82     	; 0x2be8 <LCD_VoidSendData+0x4aa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2b96:	69 8d       	ldd	r22, Y+25	; 0x19
    2b98:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2b9a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2b9c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2b9e:	20 e0       	ldi	r18, 0x00	; 0
    2ba0:	30 e0       	ldi	r19, 0x00	; 0
    2ba2:	40 e2       	ldi	r20, 0x20	; 32
    2ba4:	51 e4       	ldi	r21, 0x41	; 65
    2ba6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2baa:	dc 01       	movw	r26, r24
    2bac:	cb 01       	movw	r24, r22
    2bae:	bc 01       	movw	r22, r24
    2bb0:	cd 01       	movw	r24, r26
    2bb2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2bb6:	dc 01       	movw	r26, r24
    2bb8:	cb 01       	movw	r24, r22
    2bba:	9c 8b       	std	Y+20, r25	; 0x14
    2bbc:	8b 8b       	std	Y+19, r24	; 0x13
    2bbe:	0f c0       	rjmp	.+30     	; 0x2bde <LCD_VoidSendData+0x4a0>
    2bc0:	8c e2       	ldi	r24, 0x2C	; 44
    2bc2:	91 e0       	ldi	r25, 0x01	; 1
    2bc4:	9a 8b       	std	Y+18, r25	; 0x12
    2bc6:	89 8b       	std	Y+17, r24	; 0x11
    2bc8:	89 89       	ldd	r24, Y+17	; 0x11
    2bca:	9a 89       	ldd	r25, Y+18	; 0x12
    2bcc:	01 97       	sbiw	r24, 0x01	; 1
    2bce:	f1 f7       	brne	.-4      	; 0x2bcc <LCD_VoidSendData+0x48e>
    2bd0:	9a 8b       	std	Y+18, r25	; 0x12
    2bd2:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2bd4:	8b 89       	ldd	r24, Y+19	; 0x13
    2bd6:	9c 89       	ldd	r25, Y+20	; 0x14
    2bd8:	01 97       	sbiw	r24, 0x01	; 1
    2bda:	9c 8b       	std	Y+20, r25	; 0x14
    2bdc:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2bde:	8b 89       	ldd	r24, Y+19	; 0x13
    2be0:	9c 89       	ldd	r25, Y+20	; 0x14
    2be2:	00 97       	sbiw	r24, 0x00	; 0
    2be4:	69 f7       	brne	.-38     	; 0x2bc0 <LCD_VoidSendData+0x482>
    2be6:	14 c0       	rjmp	.+40     	; 0x2c10 <LCD_VoidSendData+0x4d2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2be8:	6d 89       	ldd	r22, Y+21	; 0x15
    2bea:	7e 89       	ldd	r23, Y+22	; 0x16
    2bec:	8f 89       	ldd	r24, Y+23	; 0x17
    2bee:	98 8d       	ldd	r25, Y+24	; 0x18
    2bf0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2bf4:	dc 01       	movw	r26, r24
    2bf6:	cb 01       	movw	r24, r22
    2bf8:	9c 8b       	std	Y+20, r25	; 0x14
    2bfa:	8b 8b       	std	Y+19, r24	; 0x13
    2bfc:	8b 89       	ldd	r24, Y+19	; 0x13
    2bfe:	9c 89       	ldd	r25, Y+20	; 0x14
    2c00:	98 8b       	std	Y+16, r25	; 0x10
    2c02:	8f 87       	std	Y+15, r24	; 0x0f
    2c04:	8f 85       	ldd	r24, Y+15	; 0x0f
    2c06:	98 89       	ldd	r25, Y+16	; 0x10
    2c08:	01 97       	sbiw	r24, 0x01	; 1
    2c0a:	f1 f7       	brne	.-4      	; 0x2c08 <LCD_VoidSendData+0x4ca>
    2c0c:	98 8b       	std	Y+16, r25	; 0x10
    2c0e:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	/*set Enable pin to Low*/
	DIO_VoidSetPinVal(LCD_EN_PORT,LCD_EN_Pin,DIO_LOW);
    2c10:	81 e0       	ldi	r24, 0x01	; 1
    2c12:	62 e0       	ldi	r22, 0x02	; 2
    2c14:	40 e0       	ldi	r20, 0x00	; 0
    2c16:	0e 94 97 0a 	call	0x152e	; 0x152e <DIO_VoidSetPinVal>
    2c1a:	80 e0       	ldi	r24, 0x00	; 0
    2c1c:	90 e0       	ldi	r25, 0x00	; 0
    2c1e:	a0 e8       	ldi	r26, 0x80	; 128
    2c20:	bf e3       	ldi	r27, 0x3F	; 63
    2c22:	8b 87       	std	Y+11, r24	; 0x0b
    2c24:	9c 87       	std	Y+12, r25	; 0x0c
    2c26:	ad 87       	std	Y+13, r26	; 0x0d
    2c28:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2c2a:	6b 85       	ldd	r22, Y+11	; 0x0b
    2c2c:	7c 85       	ldd	r23, Y+12	; 0x0c
    2c2e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2c30:	9e 85       	ldd	r25, Y+14	; 0x0e
    2c32:	20 e0       	ldi	r18, 0x00	; 0
    2c34:	30 e8       	ldi	r19, 0x80	; 128
    2c36:	4b e3       	ldi	r20, 0x3B	; 59
    2c38:	55 e4       	ldi	r21, 0x45	; 69
    2c3a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c3e:	dc 01       	movw	r26, r24
    2c40:	cb 01       	movw	r24, r22
    2c42:	8f 83       	std	Y+7, r24	; 0x07
    2c44:	98 87       	std	Y+8, r25	; 0x08
    2c46:	a9 87       	std	Y+9, r26	; 0x09
    2c48:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2c4a:	6f 81       	ldd	r22, Y+7	; 0x07
    2c4c:	78 85       	ldd	r23, Y+8	; 0x08
    2c4e:	89 85       	ldd	r24, Y+9	; 0x09
    2c50:	9a 85       	ldd	r25, Y+10	; 0x0a
    2c52:	20 e0       	ldi	r18, 0x00	; 0
    2c54:	30 e0       	ldi	r19, 0x00	; 0
    2c56:	40 e8       	ldi	r20, 0x80	; 128
    2c58:	5f e3       	ldi	r21, 0x3F	; 63
    2c5a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2c5e:	88 23       	and	r24, r24
    2c60:	2c f4       	brge	.+10     	; 0x2c6c <LCD_VoidSendData+0x52e>
		__ticks = 1;
    2c62:	81 e0       	ldi	r24, 0x01	; 1
    2c64:	90 e0       	ldi	r25, 0x00	; 0
    2c66:	9e 83       	std	Y+6, r25	; 0x06
    2c68:	8d 83       	std	Y+5, r24	; 0x05
    2c6a:	3f c0       	rjmp	.+126    	; 0x2cea <LCD_VoidSendData+0x5ac>
	else if (__tmp > 65535)
    2c6c:	6f 81       	ldd	r22, Y+7	; 0x07
    2c6e:	78 85       	ldd	r23, Y+8	; 0x08
    2c70:	89 85       	ldd	r24, Y+9	; 0x09
    2c72:	9a 85       	ldd	r25, Y+10	; 0x0a
    2c74:	20 e0       	ldi	r18, 0x00	; 0
    2c76:	3f ef       	ldi	r19, 0xFF	; 255
    2c78:	4f e7       	ldi	r20, 0x7F	; 127
    2c7a:	57 e4       	ldi	r21, 0x47	; 71
    2c7c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2c80:	18 16       	cp	r1, r24
    2c82:	4c f5       	brge	.+82     	; 0x2cd6 <LCD_VoidSendData+0x598>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2c84:	6b 85       	ldd	r22, Y+11	; 0x0b
    2c86:	7c 85       	ldd	r23, Y+12	; 0x0c
    2c88:	8d 85       	ldd	r24, Y+13	; 0x0d
    2c8a:	9e 85       	ldd	r25, Y+14	; 0x0e
    2c8c:	20 e0       	ldi	r18, 0x00	; 0
    2c8e:	30 e0       	ldi	r19, 0x00	; 0
    2c90:	40 e2       	ldi	r20, 0x20	; 32
    2c92:	51 e4       	ldi	r21, 0x41	; 65
    2c94:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c98:	dc 01       	movw	r26, r24
    2c9a:	cb 01       	movw	r24, r22
    2c9c:	bc 01       	movw	r22, r24
    2c9e:	cd 01       	movw	r24, r26
    2ca0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ca4:	dc 01       	movw	r26, r24
    2ca6:	cb 01       	movw	r24, r22
    2ca8:	9e 83       	std	Y+6, r25	; 0x06
    2caa:	8d 83       	std	Y+5, r24	; 0x05
    2cac:	0f c0       	rjmp	.+30     	; 0x2ccc <LCD_VoidSendData+0x58e>
    2cae:	8c e2       	ldi	r24, 0x2C	; 44
    2cb0:	91 e0       	ldi	r25, 0x01	; 1
    2cb2:	9c 83       	std	Y+4, r25	; 0x04
    2cb4:	8b 83       	std	Y+3, r24	; 0x03
    2cb6:	8b 81       	ldd	r24, Y+3	; 0x03
    2cb8:	9c 81       	ldd	r25, Y+4	; 0x04
    2cba:	01 97       	sbiw	r24, 0x01	; 1
    2cbc:	f1 f7       	brne	.-4      	; 0x2cba <LCD_VoidSendData+0x57c>
    2cbe:	9c 83       	std	Y+4, r25	; 0x04
    2cc0:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2cc2:	8d 81       	ldd	r24, Y+5	; 0x05
    2cc4:	9e 81       	ldd	r25, Y+6	; 0x06
    2cc6:	01 97       	sbiw	r24, 0x01	; 1
    2cc8:	9e 83       	std	Y+6, r25	; 0x06
    2cca:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2ccc:	8d 81       	ldd	r24, Y+5	; 0x05
    2cce:	9e 81       	ldd	r25, Y+6	; 0x06
    2cd0:	00 97       	sbiw	r24, 0x00	; 0
    2cd2:	69 f7       	brne	.-38     	; 0x2cae <LCD_VoidSendData+0x570>
    2cd4:	14 c0       	rjmp	.+40     	; 0x2cfe <LCD_VoidSendData+0x5c0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2cd6:	6f 81       	ldd	r22, Y+7	; 0x07
    2cd8:	78 85       	ldd	r23, Y+8	; 0x08
    2cda:	89 85       	ldd	r24, Y+9	; 0x09
    2cdc:	9a 85       	ldd	r25, Y+10	; 0x0a
    2cde:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ce2:	dc 01       	movw	r26, r24
    2ce4:	cb 01       	movw	r24, r22
    2ce6:	9e 83       	std	Y+6, r25	; 0x06
    2ce8:	8d 83       	std	Y+5, r24	; 0x05
    2cea:	8d 81       	ldd	r24, Y+5	; 0x05
    2cec:	9e 81       	ldd	r25, Y+6	; 0x06
    2cee:	9a 83       	std	Y+2, r25	; 0x02
    2cf0:	89 83       	std	Y+1, r24	; 0x01
    2cf2:	89 81       	ldd	r24, Y+1	; 0x01
    2cf4:	9a 81       	ldd	r25, Y+2	; 0x02
    2cf6:	01 97       	sbiw	r24, 0x01	; 1
    2cf8:	f1 f7       	brne	.-4      	; 0x2cf6 <LCD_VoidSendData+0x5b8>
    2cfa:	9a 83       	std	Y+2, r25	; 0x02
    2cfc:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
}
    2cfe:	c9 5b       	subi	r28, 0xB9	; 185
    2d00:	df 4f       	sbci	r29, 0xFF	; 255
    2d02:	0f b6       	in	r0, 0x3f	; 63
    2d04:	f8 94       	cli
    2d06:	de bf       	out	0x3e, r29	; 62
    2d08:	0f be       	out	0x3f, r0	; 63
    2d0a:	cd bf       	out	0x3d, r28	; 61
    2d0c:	cf 91       	pop	r28
    2d0e:	df 91       	pop	r29
    2d10:	1f 91       	pop	r17
    2d12:	0f 91       	pop	r16
    2d14:	08 95       	ret

00002d16 <LCD_Void4BitsInit>:
void LCD_Void4BitsInit(void)
{
    2d16:	df 93       	push	r29
    2d18:	cf 93       	push	r28
    2d1a:	cd b7       	in	r28, 0x3d	; 61
    2d1c:	de b7       	in	r29, 0x3e	; 62
    2d1e:	2e 97       	sbiw	r28, 0x0e	; 14
    2d20:	0f b6       	in	r0, 0x3f	; 63
    2d22:	f8 94       	cli
    2d24:	de bf       	out	0x3e, r29	; 62
    2d26:	0f be       	out	0x3f, r0	; 63
    2d28:	cd bf       	out	0x3d, r28	; 61
	/*Select The Directions*/
	DIO_VoidSetPinDirection(LCD_Data_PORT, LCD_Data_PIN4, DIO_OUTPUT);
    2d2a:	82 e0       	ldi	r24, 0x02	; 2
    2d2c:	60 e0       	ldi	r22, 0x00	; 0
    2d2e:	41 e0       	ldi	r20, 0x01	; 1
    2d30:	0e 94 8d 09 	call	0x131a	; 0x131a <DIO_VoidSetPinDirection>
	DIO_VoidSetPinDirection(LCD_Data_PORT, LCD_Data_PIN5, DIO_OUTPUT);
    2d34:	82 e0       	ldi	r24, 0x02	; 2
    2d36:	61 e0       	ldi	r22, 0x01	; 1
    2d38:	41 e0       	ldi	r20, 0x01	; 1
    2d3a:	0e 94 8d 09 	call	0x131a	; 0x131a <DIO_VoidSetPinDirection>
	DIO_VoidSetPinDirection(LCD_Data_PORT, LCD_Data_PIN6, DIO_OUTPUT);
    2d3e:	82 e0       	ldi	r24, 0x02	; 2
    2d40:	62 e0       	ldi	r22, 0x02	; 2
    2d42:	41 e0       	ldi	r20, 0x01	; 1
    2d44:	0e 94 8d 09 	call	0x131a	; 0x131a <DIO_VoidSetPinDirection>
	DIO_VoidSetPinDirection(LCD_Data_PORT, LCD_Data_PIN7, DIO_OUTPUT);
    2d48:	82 e0       	ldi	r24, 0x02	; 2
    2d4a:	64 e0       	ldi	r22, 0x04	; 4
    2d4c:	41 e0       	ldi	r20, 0x01	; 1
    2d4e:	0e 94 8d 09 	call	0x131a	; 0x131a <DIO_VoidSetPinDirection>

	DIO_VoidSetPinDirection(LCD_RS_PORT, LCD_RS_Pin, DIO_OUTPUT);
    2d52:	81 e0       	ldi	r24, 0x01	; 1
    2d54:	63 e0       	ldi	r22, 0x03	; 3
    2d56:	41 e0       	ldi	r20, 0x01	; 1
    2d58:	0e 94 8d 09 	call	0x131a	; 0x131a <DIO_VoidSetPinDirection>
	DIO_VoidSetPinDirection(LCD_EN_PORT, LCD_EN_Pin, DIO_OUTPUT);
    2d5c:	81 e0       	ldi	r24, 0x01	; 1
    2d5e:	62 e0       	ldi	r22, 0x02	; 2
    2d60:	41 e0       	ldi	r20, 0x01	; 1
    2d62:	0e 94 8d 09 	call	0x131a	; 0x131a <DIO_VoidSetPinDirection>
    2d66:	80 e0       	ldi	r24, 0x00	; 0
    2d68:	90 e0       	ldi	r25, 0x00	; 0
    2d6a:	a0 ea       	ldi	r26, 0xA0	; 160
    2d6c:	b1 e4       	ldi	r27, 0x41	; 65
    2d6e:	8b 87       	std	Y+11, r24	; 0x0b
    2d70:	9c 87       	std	Y+12, r25	; 0x0c
    2d72:	ad 87       	std	Y+13, r26	; 0x0d
    2d74:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2d76:	6b 85       	ldd	r22, Y+11	; 0x0b
    2d78:	7c 85       	ldd	r23, Y+12	; 0x0c
    2d7a:	8d 85       	ldd	r24, Y+13	; 0x0d
    2d7c:	9e 85       	ldd	r25, Y+14	; 0x0e
    2d7e:	20 e0       	ldi	r18, 0x00	; 0
    2d80:	30 e8       	ldi	r19, 0x80	; 128
    2d82:	4b e3       	ldi	r20, 0x3B	; 59
    2d84:	55 e4       	ldi	r21, 0x45	; 69
    2d86:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d8a:	dc 01       	movw	r26, r24
    2d8c:	cb 01       	movw	r24, r22
    2d8e:	8f 83       	std	Y+7, r24	; 0x07
    2d90:	98 87       	std	Y+8, r25	; 0x08
    2d92:	a9 87       	std	Y+9, r26	; 0x09
    2d94:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2d96:	6f 81       	ldd	r22, Y+7	; 0x07
    2d98:	78 85       	ldd	r23, Y+8	; 0x08
    2d9a:	89 85       	ldd	r24, Y+9	; 0x09
    2d9c:	9a 85       	ldd	r25, Y+10	; 0x0a
    2d9e:	20 e0       	ldi	r18, 0x00	; 0
    2da0:	30 e0       	ldi	r19, 0x00	; 0
    2da2:	40 e8       	ldi	r20, 0x80	; 128
    2da4:	5f e3       	ldi	r21, 0x3F	; 63
    2da6:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2daa:	88 23       	and	r24, r24
    2dac:	2c f4       	brge	.+10     	; 0x2db8 <LCD_Void4BitsInit+0xa2>
		__ticks = 1;
    2dae:	81 e0       	ldi	r24, 0x01	; 1
    2db0:	90 e0       	ldi	r25, 0x00	; 0
    2db2:	9e 83       	std	Y+6, r25	; 0x06
    2db4:	8d 83       	std	Y+5, r24	; 0x05
    2db6:	3f c0       	rjmp	.+126    	; 0x2e36 <LCD_Void4BitsInit+0x120>
	else if (__tmp > 65535)
    2db8:	6f 81       	ldd	r22, Y+7	; 0x07
    2dba:	78 85       	ldd	r23, Y+8	; 0x08
    2dbc:	89 85       	ldd	r24, Y+9	; 0x09
    2dbe:	9a 85       	ldd	r25, Y+10	; 0x0a
    2dc0:	20 e0       	ldi	r18, 0x00	; 0
    2dc2:	3f ef       	ldi	r19, 0xFF	; 255
    2dc4:	4f e7       	ldi	r20, 0x7F	; 127
    2dc6:	57 e4       	ldi	r21, 0x47	; 71
    2dc8:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2dcc:	18 16       	cp	r1, r24
    2dce:	4c f5       	brge	.+82     	; 0x2e22 <LCD_Void4BitsInit+0x10c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2dd0:	6b 85       	ldd	r22, Y+11	; 0x0b
    2dd2:	7c 85       	ldd	r23, Y+12	; 0x0c
    2dd4:	8d 85       	ldd	r24, Y+13	; 0x0d
    2dd6:	9e 85       	ldd	r25, Y+14	; 0x0e
    2dd8:	20 e0       	ldi	r18, 0x00	; 0
    2dda:	30 e0       	ldi	r19, 0x00	; 0
    2ddc:	40 e2       	ldi	r20, 0x20	; 32
    2dde:	51 e4       	ldi	r21, 0x41	; 65
    2de0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2de4:	dc 01       	movw	r26, r24
    2de6:	cb 01       	movw	r24, r22
    2de8:	bc 01       	movw	r22, r24
    2dea:	cd 01       	movw	r24, r26
    2dec:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2df0:	dc 01       	movw	r26, r24
    2df2:	cb 01       	movw	r24, r22
    2df4:	9e 83       	std	Y+6, r25	; 0x06
    2df6:	8d 83       	std	Y+5, r24	; 0x05
    2df8:	0f c0       	rjmp	.+30     	; 0x2e18 <LCD_Void4BitsInit+0x102>
    2dfa:	8c e2       	ldi	r24, 0x2C	; 44
    2dfc:	91 e0       	ldi	r25, 0x01	; 1
    2dfe:	9c 83       	std	Y+4, r25	; 0x04
    2e00:	8b 83       	std	Y+3, r24	; 0x03
    2e02:	8b 81       	ldd	r24, Y+3	; 0x03
    2e04:	9c 81       	ldd	r25, Y+4	; 0x04
    2e06:	01 97       	sbiw	r24, 0x01	; 1
    2e08:	f1 f7       	brne	.-4      	; 0x2e06 <LCD_Void4BitsInit+0xf0>
    2e0a:	9c 83       	std	Y+4, r25	; 0x04
    2e0c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2e0e:	8d 81       	ldd	r24, Y+5	; 0x05
    2e10:	9e 81       	ldd	r25, Y+6	; 0x06
    2e12:	01 97       	sbiw	r24, 0x01	; 1
    2e14:	9e 83       	std	Y+6, r25	; 0x06
    2e16:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2e18:	8d 81       	ldd	r24, Y+5	; 0x05
    2e1a:	9e 81       	ldd	r25, Y+6	; 0x06
    2e1c:	00 97       	sbiw	r24, 0x00	; 0
    2e1e:	69 f7       	brne	.-38     	; 0x2dfa <LCD_Void4BitsInit+0xe4>
    2e20:	14 c0       	rjmp	.+40     	; 0x2e4a <LCD_Void4BitsInit+0x134>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2e22:	6f 81       	ldd	r22, Y+7	; 0x07
    2e24:	78 85       	ldd	r23, Y+8	; 0x08
    2e26:	89 85       	ldd	r24, Y+9	; 0x09
    2e28:	9a 85       	ldd	r25, Y+10	; 0x0a
    2e2a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2e2e:	dc 01       	movw	r26, r24
    2e30:	cb 01       	movw	r24, r22
    2e32:	9e 83       	std	Y+6, r25	; 0x06
    2e34:	8d 83       	std	Y+5, r24	; 0x05
    2e36:	8d 81       	ldd	r24, Y+5	; 0x05
    2e38:	9e 81       	ldd	r25, Y+6	; 0x06
    2e3a:	9a 83       	std	Y+2, r25	; 0x02
    2e3c:	89 83       	std	Y+1, r24	; 0x01
    2e3e:	89 81       	ldd	r24, Y+1	; 0x01
    2e40:	9a 81       	ldd	r25, Y+2	; 0x02
    2e42:	01 97       	sbiw	r24, 0x01	; 1
    2e44:	f1 f7       	brne	.-4      	; 0x2e42 <LCD_Void4BitsInit+0x12c>
    2e46:	9a 83       	std	Y+2, r25	; 0x02
    2e48:	89 83       	std	Y+1, r24	; 0x01

	_delay_ms(20);
	LCD_VoidSendCommand(0x33);
    2e4a:	83 e3       	ldi	r24, 0x33	; 51
    2e4c:	0e 94 b3 10 	call	0x2166	; 0x2166 <LCD_VoidSendCommand>
	LCD_VoidSendCommand(0x32);
    2e50:	82 e3       	ldi	r24, 0x32	; 50
    2e52:	0e 94 b3 10 	call	0x2166	; 0x2166 <LCD_VoidSendCommand>
	/*function set*/
	LCD_VoidSendCommand(FUNCTION_SET_4BIT_2LINES_5X7_DOTS);
    2e56:	88 e2       	ldi	r24, 0x28	; 40
    2e58:	0e 94 b3 10 	call	0x2166	; 0x2166 <LCD_VoidSendCommand>
	/*Display On off control*/
	LCD_VoidSendCommand(DISPLAY_ON_CURSOR_OFF);
    2e5c:	8c e0       	ldi	r24, 0x0C	; 12
    2e5e:	0e 94 b3 10 	call	0x2166	; 0x2166 <LCD_VoidSendCommand>
	/*Clear LCD*/
	LCD_VoidSendCommand(DISPLAY_CLEAR);
    2e62:	81 e0       	ldi	r24, 0x01	; 1
    2e64:	0e 94 b3 10 	call	0x2166	; 0x2166 <LCD_VoidSendCommand>
	/*Entry Mode*/
	LCD_VoidSendCommand(ENTRY_MODE_SET);
    2e68:	86 e0       	ldi	r24, 0x06	; 6
    2e6a:	0e 94 b3 10 	call	0x2166	; 0x2166 <LCD_VoidSendCommand>
}
    2e6e:	2e 96       	adiw	r28, 0x0e	; 14
    2e70:	0f b6       	in	r0, 0x3f	; 63
    2e72:	f8 94       	cli
    2e74:	de bf       	out	0x3e, r29	; 62
    2e76:	0f be       	out	0x3f, r0	; 63
    2e78:	cd bf       	out	0x3d, r28	; 61
    2e7a:	cf 91       	pop	r28
    2e7c:	df 91       	pop	r29
    2e7e:	08 95       	ret

00002e80 <LCD_VoidSendString>:

void LCD_VoidSendString (char *Ref_string)
{
    2e80:	df 93       	push	r29
    2e82:	cf 93       	push	r28
    2e84:	00 d0       	rcall	.+0      	; 0x2e86 <LCD_VoidSendString+0x6>
    2e86:	cd b7       	in	r28, 0x3d	; 61
    2e88:	de b7       	in	r29, 0x3e	; 62
    2e8a:	9a 83       	std	Y+2, r25	; 0x02
    2e8c:	89 83       	std	Y+1, r24	; 0x01
    2e8e:	0a c0       	rjmp	.+20     	; 0x2ea4 <LCD_VoidSendString+0x24>
	while (*Ref_string != '\0')
	{
		LCD_VoidSendData(*Ref_string);
    2e90:	e9 81       	ldd	r30, Y+1	; 0x01
    2e92:	fa 81       	ldd	r31, Y+2	; 0x02
    2e94:	80 81       	ld	r24, Z
    2e96:	0e 94 9f 13 	call	0x273e	; 0x273e <LCD_VoidSendData>
		Ref_string++;
    2e9a:	89 81       	ldd	r24, Y+1	; 0x01
    2e9c:	9a 81       	ldd	r25, Y+2	; 0x02
    2e9e:	01 96       	adiw	r24, 0x01	; 1
    2ea0:	9a 83       	std	Y+2, r25	; 0x02
    2ea2:	89 83       	std	Y+1, r24	; 0x01
	LCD_VoidSendCommand(ENTRY_MODE_SET);
}

void LCD_VoidSendString (char *Ref_string)
{
	while (*Ref_string != '\0')
    2ea4:	e9 81       	ldd	r30, Y+1	; 0x01
    2ea6:	fa 81       	ldd	r31, Y+2	; 0x02
    2ea8:	80 81       	ld	r24, Z
    2eaa:	88 23       	and	r24, r24
    2eac:	89 f7       	brne	.-30     	; 0x2e90 <LCD_VoidSendString+0x10>
	{
		LCD_VoidSendData(*Ref_string);
		Ref_string++;
	}
}
    2eae:	0f 90       	pop	r0
    2eb0:	0f 90       	pop	r0
    2eb2:	cf 91       	pop	r28
    2eb4:	df 91       	pop	r29
    2eb6:	08 95       	ret

00002eb8 <LCD_VoidSendNumber>:

void LCD_VoidSendNumber(u32 Local_Number)
{
    2eb8:	ef 92       	push	r14
    2eba:	ff 92       	push	r15
    2ebc:	0f 93       	push	r16
    2ebe:	1f 93       	push	r17
    2ec0:	df 93       	push	r29
    2ec2:	cf 93       	push	r28
    2ec4:	cd b7       	in	r28, 0x3d	; 61
    2ec6:	de b7       	in	r29, 0x3e	; 62
    2ec8:	28 97       	sbiw	r28, 0x08	; 8
    2eca:	0f b6       	in	r0, 0x3f	; 63
    2ecc:	f8 94       	cli
    2ece:	de bf       	out	0x3e, r29	; 62
    2ed0:	0f be       	out	0x3f, r0	; 63
    2ed2:	cd bf       	out	0x3d, r28	; 61
    2ed4:	6d 83       	std	Y+5, r22	; 0x05
    2ed6:	7e 83       	std	Y+6, r23	; 0x06
    2ed8:	8f 83       	std	Y+7, r24	; 0x07
    2eda:	98 87       	std	Y+8, r25	; 0x08
	u32 Local_ReversedNum = 2;
    2edc:	82 e0       	ldi	r24, 0x02	; 2
    2ede:	90 e0       	ldi	r25, 0x00	; 0
    2ee0:	a0 e0       	ldi	r26, 0x00	; 0
    2ee2:	b0 e0       	ldi	r27, 0x00	; 0
    2ee4:	89 83       	std	Y+1, r24	; 0x01
    2ee6:	9a 83       	std	Y+2, r25	; 0x02
    2ee8:	ab 83       	std	Y+3, r26	; 0x03
    2eea:	bc 83       	std	Y+4, r27	; 0x04
    2eec:	36 c0       	rjmp	.+108    	; 0x2f5a <LCD_VoidSendNumber+0xa2>
	while (Local_Number != 0)
	{
		Local_ReversedNum = (Local_ReversedNum * 10) + (Local_Number % 10);
    2eee:	89 81       	ldd	r24, Y+1	; 0x01
    2ef0:	9a 81       	ldd	r25, Y+2	; 0x02
    2ef2:	ab 81       	ldd	r26, Y+3	; 0x03
    2ef4:	bc 81       	ldd	r27, Y+4	; 0x04
    2ef6:	2a e0       	ldi	r18, 0x0A	; 10
    2ef8:	30 e0       	ldi	r19, 0x00	; 0
    2efa:	40 e0       	ldi	r20, 0x00	; 0
    2efc:	50 e0       	ldi	r21, 0x00	; 0
    2efe:	bc 01       	movw	r22, r24
    2f00:	cd 01       	movw	r24, r26
    2f02:	0e 94 db 1b 	call	0x37b6	; 0x37b6 <__mulsi3>
    2f06:	7b 01       	movw	r14, r22
    2f08:	8c 01       	movw	r16, r24
    2f0a:	8d 81       	ldd	r24, Y+5	; 0x05
    2f0c:	9e 81       	ldd	r25, Y+6	; 0x06
    2f0e:	af 81       	ldd	r26, Y+7	; 0x07
    2f10:	b8 85       	ldd	r27, Y+8	; 0x08
    2f12:	2a e0       	ldi	r18, 0x0A	; 10
    2f14:	30 e0       	ldi	r19, 0x00	; 0
    2f16:	40 e0       	ldi	r20, 0x00	; 0
    2f18:	50 e0       	ldi	r21, 0x00	; 0
    2f1a:	bc 01       	movw	r22, r24
    2f1c:	cd 01       	movw	r24, r26
    2f1e:	0e 94 fa 1b 	call	0x37f4	; 0x37f4 <__udivmodsi4>
    2f22:	dc 01       	movw	r26, r24
    2f24:	cb 01       	movw	r24, r22
    2f26:	8e 0d       	add	r24, r14
    2f28:	9f 1d       	adc	r25, r15
    2f2a:	a0 1f       	adc	r26, r16
    2f2c:	b1 1f       	adc	r27, r17
    2f2e:	89 83       	std	Y+1, r24	; 0x01
    2f30:	9a 83       	std	Y+2, r25	; 0x02
    2f32:	ab 83       	std	Y+3, r26	; 0x03
    2f34:	bc 83       	std	Y+4, r27	; 0x04
		Local_Number = Local_Number / 10;
    2f36:	8d 81       	ldd	r24, Y+5	; 0x05
    2f38:	9e 81       	ldd	r25, Y+6	; 0x06
    2f3a:	af 81       	ldd	r26, Y+7	; 0x07
    2f3c:	b8 85       	ldd	r27, Y+8	; 0x08
    2f3e:	2a e0       	ldi	r18, 0x0A	; 10
    2f40:	30 e0       	ldi	r19, 0x00	; 0
    2f42:	40 e0       	ldi	r20, 0x00	; 0
    2f44:	50 e0       	ldi	r21, 0x00	; 0
    2f46:	bc 01       	movw	r22, r24
    2f48:	cd 01       	movw	r24, r26
    2f4a:	0e 94 fa 1b 	call	0x37f4	; 0x37f4 <__udivmodsi4>
    2f4e:	da 01       	movw	r26, r20
    2f50:	c9 01       	movw	r24, r18
    2f52:	8d 83       	std	Y+5, r24	; 0x05
    2f54:	9e 83       	std	Y+6, r25	; 0x06
    2f56:	af 83       	std	Y+7, r26	; 0x07
    2f58:	b8 87       	std	Y+8, r27	; 0x08
}

void LCD_VoidSendNumber(u32 Local_Number)
{
	u32 Local_ReversedNum = 2;
	while (Local_Number != 0)
    2f5a:	8d 81       	ldd	r24, Y+5	; 0x05
    2f5c:	9e 81       	ldd	r25, Y+6	; 0x06
    2f5e:	af 81       	ldd	r26, Y+7	; 0x07
    2f60:	b8 85       	ldd	r27, Y+8	; 0x08
    2f62:	00 97       	sbiw	r24, 0x00	; 0
    2f64:	a1 05       	cpc	r26, r1
    2f66:	b1 05       	cpc	r27, r1
    2f68:	11 f6       	brne	.-124    	; 0x2eee <LCD_VoidSendNumber+0x36>
		Local_ReversedNum = (Local_ReversedNum * 10) + (Local_Number % 10);
		Local_Number = Local_Number / 10;
	}
	do
	{
		LCD_VoidSendData((Local_ReversedNum%10)+ '0');
    2f6a:	89 81       	ldd	r24, Y+1	; 0x01
    2f6c:	9a 81       	ldd	r25, Y+2	; 0x02
    2f6e:	ab 81       	ldd	r26, Y+3	; 0x03
    2f70:	bc 81       	ldd	r27, Y+4	; 0x04
    2f72:	2a e0       	ldi	r18, 0x0A	; 10
    2f74:	30 e0       	ldi	r19, 0x00	; 0
    2f76:	40 e0       	ldi	r20, 0x00	; 0
    2f78:	50 e0       	ldi	r21, 0x00	; 0
    2f7a:	bc 01       	movw	r22, r24
    2f7c:	cd 01       	movw	r24, r26
    2f7e:	0e 94 fa 1b 	call	0x37f4	; 0x37f4 <__udivmodsi4>
    2f82:	dc 01       	movw	r26, r24
    2f84:	cb 01       	movw	r24, r22
    2f86:	80 5d       	subi	r24, 0xD0	; 208
    2f88:	0e 94 9f 13 	call	0x273e	; 0x273e <LCD_VoidSendData>
		Local_ReversedNum /= 10;
    2f8c:	89 81       	ldd	r24, Y+1	; 0x01
    2f8e:	9a 81       	ldd	r25, Y+2	; 0x02
    2f90:	ab 81       	ldd	r26, Y+3	; 0x03
    2f92:	bc 81       	ldd	r27, Y+4	; 0x04
    2f94:	2a e0       	ldi	r18, 0x0A	; 10
    2f96:	30 e0       	ldi	r19, 0x00	; 0
    2f98:	40 e0       	ldi	r20, 0x00	; 0
    2f9a:	50 e0       	ldi	r21, 0x00	; 0
    2f9c:	bc 01       	movw	r22, r24
    2f9e:	cd 01       	movw	r24, r26
    2fa0:	0e 94 fa 1b 	call	0x37f4	; 0x37f4 <__udivmodsi4>
    2fa4:	da 01       	movw	r26, r20
    2fa6:	c9 01       	movw	r24, r18
    2fa8:	89 83       	std	Y+1, r24	; 0x01
    2faa:	9a 83       	std	Y+2, r25	; 0x02
    2fac:	ab 83       	std	Y+3, r26	; 0x03
    2fae:	bc 83       	std	Y+4, r27	; 0x04
	}while(Local_ReversedNum != 2);
    2fb0:	89 81       	ldd	r24, Y+1	; 0x01
    2fb2:	9a 81       	ldd	r25, Y+2	; 0x02
    2fb4:	ab 81       	ldd	r26, Y+3	; 0x03
    2fb6:	bc 81       	ldd	r27, Y+4	; 0x04
    2fb8:	82 30       	cpi	r24, 0x02	; 2
    2fba:	91 05       	cpc	r25, r1
    2fbc:	a1 05       	cpc	r26, r1
    2fbe:	b1 05       	cpc	r27, r1
    2fc0:	a1 f6       	brne	.-88     	; 0x2f6a <LCD_VoidSendNumber+0xb2>
}
    2fc2:	28 96       	adiw	r28, 0x08	; 8
    2fc4:	0f b6       	in	r0, 0x3f	; 63
    2fc6:	f8 94       	cli
    2fc8:	de bf       	out	0x3e, r29	; 62
    2fca:	0f be       	out	0x3f, r0	; 63
    2fcc:	cd bf       	out	0x3d, r28	; 61
    2fce:	cf 91       	pop	r28
    2fd0:	df 91       	pop	r29
    2fd2:	1f 91       	pop	r17
    2fd4:	0f 91       	pop	r16
    2fd6:	ff 90       	pop	r15
    2fd8:	ef 90       	pop	r14
    2fda:	08 95       	ret

00002fdc <LCD_VoidStartFrom>:

void LCD_VoidStartFrom(u8 Local_RowPosition, u8 Local_ColPosition)
{
    2fdc:	df 93       	push	r29
    2fde:	cf 93       	push	r28
    2fe0:	00 d0       	rcall	.+0      	; 0x2fe2 <LCD_VoidStartFrom+0x6>
    2fe2:	0f 92       	push	r0
    2fe4:	cd b7       	in	r28, 0x3d	; 61
    2fe6:	de b7       	in	r29, 0x3e	; 62
    2fe8:	8a 83       	std	Y+2, r24	; 0x02
    2fea:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_DDRAMAddress = 0;
    2fec:	19 82       	std	Y+1, r1	; 0x01
	if(Local_ColPosition < COLS_NUMBER && Local_RowPosition < ROWS_NUMBER)
    2fee:	8b 81       	ldd	r24, Y+3	; 0x03
    2ff0:	84 31       	cpi	r24, 0x14	; 20
    2ff2:	10 f5       	brcc	.+68     	; 0x3038 <LCD_VoidStartFrom+0x5c>
    2ff4:	8a 81       	ldd	r24, Y+2	; 0x02
    2ff6:	84 30       	cpi	r24, 0x04	; 4
    2ff8:	f8 f4       	brcc	.+62     	; 0x3038 <LCD_VoidStartFrom+0x5c>
	{
		if(Local_RowPosition == LINE_1)
    2ffa:	8a 81       	ldd	r24, Y+2	; 0x02
    2ffc:	88 23       	and	r24, r24
    2ffe:	21 f4       	brne	.+8      	; 0x3008 <LCD_VoidStartFrom+0x2c>
		{
			Local_DDRAMAddress = 0x80 + Local_ColPosition;
    3000:	8b 81       	ldd	r24, Y+3	; 0x03
    3002:	80 58       	subi	r24, 0x80	; 128
    3004:	89 83       	std	Y+1, r24	; 0x01
    3006:	14 c0       	rjmp	.+40     	; 0x3030 <LCD_VoidStartFrom+0x54>
		}
		else if(Local_RowPosition == LINE_2)
    3008:	8a 81       	ldd	r24, Y+2	; 0x02
    300a:	81 30       	cpi	r24, 0x01	; 1
    300c:	21 f4       	brne	.+8      	; 0x3016 <LCD_VoidStartFrom+0x3a>
		{
			Local_DDRAMAddress = 0xC0 + Local_ColPosition;
    300e:	8b 81       	ldd	r24, Y+3	; 0x03
    3010:	80 54       	subi	r24, 0x40	; 64
    3012:	89 83       	std	Y+1, r24	; 0x01
    3014:	0d c0       	rjmp	.+26     	; 0x3030 <LCD_VoidStartFrom+0x54>
		}
		else if(Local_RowPosition == LINE_3)
    3016:	8a 81       	ldd	r24, Y+2	; 0x02
    3018:	82 30       	cpi	r24, 0x02	; 2
    301a:	21 f4       	brne	.+8      	; 0x3024 <LCD_VoidStartFrom+0x48>
		{
			Local_DDRAMAddress = 0x94 + Local_ColPosition;
    301c:	8b 81       	ldd	r24, Y+3	; 0x03
    301e:	8c 56       	subi	r24, 0x6C	; 108
    3020:	89 83       	std	Y+1, r24	; 0x01
    3022:	06 c0       	rjmp	.+12     	; 0x3030 <LCD_VoidStartFrom+0x54>
		}
		else if (Local_RowPosition == LINE_4)
    3024:	8a 81       	ldd	r24, Y+2	; 0x02
    3026:	83 30       	cpi	r24, 0x03	; 3
    3028:	19 f4       	brne	.+6      	; 0x3030 <LCD_VoidStartFrom+0x54>
		{
			Local_DDRAMAddress = 0xD4 + Local_ColPosition;
    302a:	8b 81       	ldd	r24, Y+3	; 0x03
    302c:	8c 52       	subi	r24, 0x2C	; 44
    302e:	89 83       	std	Y+1, r24	; 0x01

		}
		LCD_VoidSendCommand(Local_DDRAMAddress | SET_DDRAM_ADDRESS);
    3030:	89 81       	ldd	r24, Y+1	; 0x01
    3032:	80 68       	ori	r24, 0x80	; 128
    3034:	0e 94 b3 10 	call	0x2166	; 0x2166 <LCD_VoidSendCommand>
	}
}
    3038:	0f 90       	pop	r0
    303a:	0f 90       	pop	r0
    303c:	0f 90       	pop	r0
    303e:	cf 91       	pop	r28
    3040:	df 91       	pop	r29
    3042:	08 95       	ret

00003044 <LCD_VoidDisplayStrRowCol>:
void LCD_VoidDisplayStrRowCol (u8 *Ref_str, u8 Local_RowPosition, u8 Local_ColPosition)
{
    3044:	df 93       	push	r29
    3046:	cf 93       	push	r28
    3048:	00 d0       	rcall	.+0      	; 0x304a <LCD_VoidDisplayStrRowCol+0x6>
    304a:	00 d0       	rcall	.+0      	; 0x304c <LCD_VoidDisplayStrRowCol+0x8>
    304c:	cd b7       	in	r28, 0x3d	; 61
    304e:	de b7       	in	r29, 0x3e	; 62
    3050:	9a 83       	std	Y+2, r25	; 0x02
    3052:	89 83       	std	Y+1, r24	; 0x01
    3054:	6b 83       	std	Y+3, r22	; 0x03
    3056:	4c 83       	std	Y+4, r20	; 0x04
	LCD_VoidStartFrom(Local_RowPosition,Local_ColPosition);
    3058:	8b 81       	ldd	r24, Y+3	; 0x03
    305a:	6c 81       	ldd	r22, Y+4	; 0x04
    305c:	0e 94 ee 17 	call	0x2fdc	; 0x2fdc <LCD_VoidStartFrom>
	LCD_VoidSendString(Ref_str);
    3060:	89 81       	ldd	r24, Y+1	; 0x01
    3062:	9a 81       	ldd	r25, Y+2	; 0x02
    3064:	0e 94 40 17 	call	0x2e80	; 0x2e80 <LCD_VoidSendString>
}
    3068:	0f 90       	pop	r0
    306a:	0f 90       	pop	r0
    306c:	0f 90       	pop	r0
    306e:	0f 90       	pop	r0
    3070:	cf 91       	pop	r28
    3072:	df 91       	pop	r29
    3074:	08 95       	ret

00003076 <HLCD_voidDisplayNumber>:

void HLCD_voidDisplayNumber(u32 A_u32Number)
{
    3076:	ef 92       	push	r14
    3078:	ff 92       	push	r15
    307a:	0f 93       	push	r16
    307c:	1f 93       	push	r17
    307e:	df 93       	push	r29
    3080:	cf 93       	push	r28
    3082:	cd b7       	in	r28, 0x3d	; 61
    3084:	de b7       	in	r29, 0x3e	; 62
    3086:	28 97       	sbiw	r28, 0x08	; 8
    3088:	0f b6       	in	r0, 0x3f	; 63
    308a:	f8 94       	cli
    308c:	de bf       	out	0x3e, r29	; 62
    308e:	0f be       	out	0x3f, r0	; 63
    3090:	cd bf       	out	0x3d, r28	; 61
    3092:	6d 83       	std	Y+5, r22	; 0x05
    3094:	7e 83       	std	Y+6, r23	; 0x06
    3096:	8f 83       	std	Y+7, r24	; 0x07
    3098:	98 87       	std	Y+8, r25	; 0x08
    u32 local_u32Number = 1;
    309a:	81 e0       	ldi	r24, 0x01	; 1
    309c:	90 e0       	ldi	r25, 0x00	; 0
    309e:	a0 e0       	ldi	r26, 0x00	; 0
    30a0:	b0 e0       	ldi	r27, 0x00	; 0
    30a2:	89 83       	std	Y+1, r24	; 0x01
    30a4:	9a 83       	std	Y+2, r25	; 0x02
    30a6:	ab 83       	std	Y+3, r26	; 0x03
    30a8:	bc 83       	std	Y+4, r27	; 0x04
    if (A_u32Number == 0)
    30aa:	8d 81       	ldd	r24, Y+5	; 0x05
    30ac:	9e 81       	ldd	r25, Y+6	; 0x06
    30ae:	af 81       	ldd	r26, Y+7	; 0x07
    30b0:	b8 85       	ldd	r27, Y+8	; 0x08
    30b2:	00 97       	sbiw	r24, 0x00	; 0
    30b4:	a1 05       	cpc	r26, r1
    30b6:	b1 05       	cpc	r27, r1
    30b8:	d1 f5       	brne	.+116    	; 0x312e <HLCD_voidDisplayNumber+0xb8>
    {
        LCD_VoidSendData('0');
    30ba:	80 e3       	ldi	r24, 0x30	; 48
    30bc:	0e 94 9f 13 	call	0x273e	; 0x273e <LCD_VoidSendData>
    30c0:	36 c0       	rjmp	.+108    	; 0x312e <HLCD_voidDisplayNumber+0xb8>
    }
    while (A_u32Number != 0)
    {
        local_u32Number = ((local_u32Number * 10) + (A_u32Number % 10));
    30c2:	89 81       	ldd	r24, Y+1	; 0x01
    30c4:	9a 81       	ldd	r25, Y+2	; 0x02
    30c6:	ab 81       	ldd	r26, Y+3	; 0x03
    30c8:	bc 81       	ldd	r27, Y+4	; 0x04
    30ca:	2a e0       	ldi	r18, 0x0A	; 10
    30cc:	30 e0       	ldi	r19, 0x00	; 0
    30ce:	40 e0       	ldi	r20, 0x00	; 0
    30d0:	50 e0       	ldi	r21, 0x00	; 0
    30d2:	bc 01       	movw	r22, r24
    30d4:	cd 01       	movw	r24, r26
    30d6:	0e 94 db 1b 	call	0x37b6	; 0x37b6 <__mulsi3>
    30da:	7b 01       	movw	r14, r22
    30dc:	8c 01       	movw	r16, r24
    30de:	8d 81       	ldd	r24, Y+5	; 0x05
    30e0:	9e 81       	ldd	r25, Y+6	; 0x06
    30e2:	af 81       	ldd	r26, Y+7	; 0x07
    30e4:	b8 85       	ldd	r27, Y+8	; 0x08
    30e6:	2a e0       	ldi	r18, 0x0A	; 10
    30e8:	30 e0       	ldi	r19, 0x00	; 0
    30ea:	40 e0       	ldi	r20, 0x00	; 0
    30ec:	50 e0       	ldi	r21, 0x00	; 0
    30ee:	bc 01       	movw	r22, r24
    30f0:	cd 01       	movw	r24, r26
    30f2:	0e 94 fa 1b 	call	0x37f4	; 0x37f4 <__udivmodsi4>
    30f6:	dc 01       	movw	r26, r24
    30f8:	cb 01       	movw	r24, r22
    30fa:	8e 0d       	add	r24, r14
    30fc:	9f 1d       	adc	r25, r15
    30fe:	a0 1f       	adc	r26, r16
    3100:	b1 1f       	adc	r27, r17
    3102:	89 83       	std	Y+1, r24	; 0x01
    3104:	9a 83       	std	Y+2, r25	; 0x02
    3106:	ab 83       	std	Y+3, r26	; 0x03
    3108:	bc 83       	std	Y+4, r27	; 0x04
        A_u32Number = A_u32Number / 10;
    310a:	8d 81       	ldd	r24, Y+5	; 0x05
    310c:	9e 81       	ldd	r25, Y+6	; 0x06
    310e:	af 81       	ldd	r26, Y+7	; 0x07
    3110:	b8 85       	ldd	r27, Y+8	; 0x08
    3112:	2a e0       	ldi	r18, 0x0A	; 10
    3114:	30 e0       	ldi	r19, 0x00	; 0
    3116:	40 e0       	ldi	r20, 0x00	; 0
    3118:	50 e0       	ldi	r21, 0x00	; 0
    311a:	bc 01       	movw	r22, r24
    311c:	cd 01       	movw	r24, r26
    311e:	0e 94 fa 1b 	call	0x37f4	; 0x37f4 <__udivmodsi4>
    3122:	da 01       	movw	r26, r20
    3124:	c9 01       	movw	r24, r18
    3126:	8d 83       	std	Y+5, r24	; 0x05
    3128:	9e 83       	std	Y+6, r25	; 0x06
    312a:	af 83       	std	Y+7, r26	; 0x07
    312c:	b8 87       	std	Y+8, r27	; 0x08
    u32 local_u32Number = 1;
    if (A_u32Number == 0)
    {
        LCD_VoidSendData('0');
    }
    while (A_u32Number != 0)
    312e:	8d 81       	ldd	r24, Y+5	; 0x05
    3130:	9e 81       	ldd	r25, Y+6	; 0x06
    3132:	af 81       	ldd	r26, Y+7	; 0x07
    3134:	b8 85       	ldd	r27, Y+8	; 0x08
    3136:	00 97       	sbiw	r24, 0x00	; 0
    3138:	a1 05       	cpc	r26, r1
    313a:	b1 05       	cpc	r27, r1
    313c:	11 f6       	brne	.-124    	; 0x30c2 <HLCD_voidDisplayNumber+0x4c>
    313e:	23 c0       	rjmp	.+70     	; 0x3186 <HLCD_voidDisplayNumber+0x110>
        local_u32Number = ((local_u32Number * 10) + (A_u32Number % 10));
        A_u32Number = A_u32Number / 10;
    }
    while (local_u32Number != 1)
    {
        LCD_VoidSendData((local_u32Number % 10) + 48);
    3140:	89 81       	ldd	r24, Y+1	; 0x01
    3142:	9a 81       	ldd	r25, Y+2	; 0x02
    3144:	ab 81       	ldd	r26, Y+3	; 0x03
    3146:	bc 81       	ldd	r27, Y+4	; 0x04
    3148:	2a e0       	ldi	r18, 0x0A	; 10
    314a:	30 e0       	ldi	r19, 0x00	; 0
    314c:	40 e0       	ldi	r20, 0x00	; 0
    314e:	50 e0       	ldi	r21, 0x00	; 0
    3150:	bc 01       	movw	r22, r24
    3152:	cd 01       	movw	r24, r26
    3154:	0e 94 fa 1b 	call	0x37f4	; 0x37f4 <__udivmodsi4>
    3158:	dc 01       	movw	r26, r24
    315a:	cb 01       	movw	r24, r22
    315c:	80 5d       	subi	r24, 0xD0	; 208
    315e:	0e 94 9f 13 	call	0x273e	; 0x273e <LCD_VoidSendData>
        local_u32Number = local_u32Number / 10;
    3162:	89 81       	ldd	r24, Y+1	; 0x01
    3164:	9a 81       	ldd	r25, Y+2	; 0x02
    3166:	ab 81       	ldd	r26, Y+3	; 0x03
    3168:	bc 81       	ldd	r27, Y+4	; 0x04
    316a:	2a e0       	ldi	r18, 0x0A	; 10
    316c:	30 e0       	ldi	r19, 0x00	; 0
    316e:	40 e0       	ldi	r20, 0x00	; 0
    3170:	50 e0       	ldi	r21, 0x00	; 0
    3172:	bc 01       	movw	r22, r24
    3174:	cd 01       	movw	r24, r26
    3176:	0e 94 fa 1b 	call	0x37f4	; 0x37f4 <__udivmodsi4>
    317a:	da 01       	movw	r26, r20
    317c:	c9 01       	movw	r24, r18
    317e:	89 83       	std	Y+1, r24	; 0x01
    3180:	9a 83       	std	Y+2, r25	; 0x02
    3182:	ab 83       	std	Y+3, r26	; 0x03
    3184:	bc 83       	std	Y+4, r27	; 0x04
    while (A_u32Number != 0)
    {
        local_u32Number = ((local_u32Number * 10) + (A_u32Number % 10));
        A_u32Number = A_u32Number / 10;
    }
    while (local_u32Number != 1)
    3186:	89 81       	ldd	r24, Y+1	; 0x01
    3188:	9a 81       	ldd	r25, Y+2	; 0x02
    318a:	ab 81       	ldd	r26, Y+3	; 0x03
    318c:	bc 81       	ldd	r27, Y+4	; 0x04
    318e:	81 30       	cpi	r24, 0x01	; 1
    3190:	91 05       	cpc	r25, r1
    3192:	a1 05       	cpc	r26, r1
    3194:	b1 05       	cpc	r27, r1
    3196:	a1 f6       	brne	.-88     	; 0x3140 <HLCD_voidDisplayNumber+0xca>
    {
        LCD_VoidSendData((local_u32Number % 10) + 48);
        local_u32Number = local_u32Number / 10;
    }
}
    3198:	28 96       	adiw	r28, 0x08	; 8
    319a:	0f b6       	in	r0, 0x3f	; 63
    319c:	f8 94       	cli
    319e:	de bf       	out	0x3e, r29	; 62
    31a0:	0f be       	out	0x3f, r0	; 63
    31a2:	cd bf       	out	0x3d, r28	; 61
    31a4:	cf 91       	pop	r28
    31a6:	df 91       	pop	r29
    31a8:	1f 91       	pop	r17
    31aa:	0f 91       	pop	r16
    31ac:	ff 90       	pop	r15
    31ae:	ef 90       	pop	r14
    31b0:	08 95       	ret

000031b2 <KPD_VoidInit>:

#include "KPD_interface.h"

u8 KPD_Values[ROW][Column] = KPD_ConfValues;
void KPD_VoidInit(void)
{
    31b2:	df 93       	push	r29
    31b4:	cf 93       	push	r28
    31b6:	cd b7       	in	r28, 0x3d	; 61
    31b8:	de b7       	in	r29, 0x3e	; 62
	/*set Row as Output*/
	DIO_VoidSetPinDirection(KPD_RowGroup,KPD_Row1,DIO_OUTPUT);
    31ba:	83 e0       	ldi	r24, 0x03	; 3
    31bc:	65 e0       	ldi	r22, 0x05	; 5
    31be:	41 e0       	ldi	r20, 0x01	; 1
    31c0:	0e 94 8d 09 	call	0x131a	; 0x131a <DIO_VoidSetPinDirection>
	DIO_VoidSetPinDirection(KPD_RowGroup,KPD_Row2,DIO_OUTPUT);
    31c4:	83 e0       	ldi	r24, 0x03	; 3
    31c6:	64 e0       	ldi	r22, 0x04	; 4
    31c8:	41 e0       	ldi	r20, 0x01	; 1
    31ca:	0e 94 8d 09 	call	0x131a	; 0x131a <DIO_VoidSetPinDirection>
	DIO_VoidSetPinDirection(KPD_RowGroup,KPD_Row3,DIO_OUTPUT);
    31ce:	83 e0       	ldi	r24, 0x03	; 3
    31d0:	63 e0       	ldi	r22, 0x03	; 3
    31d2:	41 e0       	ldi	r20, 0x01	; 1
    31d4:	0e 94 8d 09 	call	0x131a	; 0x131a <DIO_VoidSetPinDirection>
	DIO_VoidSetPinDirection(KPD_RowGroup,KPD_Row4,DIO_OUTPUT);
    31d8:	83 e0       	ldi	r24, 0x03	; 3
    31da:	62 e0       	ldi	r22, 0x02	; 2
    31dc:	41 e0       	ldi	r20, 0x01	; 1
    31de:	0e 94 8d 09 	call	0x131a	; 0x131a <DIO_VoidSetPinDirection>

	/*set Row as High*/
	DIO_VoidSetPinVal(KPD_ColumnGroup,KPD_Column1,DIO_HIGH);
    31e2:	84 e0       	ldi	r24, 0x04	; 4
    31e4:	67 e0       	ldi	r22, 0x07	; 7
    31e6:	41 e0       	ldi	r20, 0x01	; 1
    31e8:	0e 94 97 0a 	call	0x152e	; 0x152e <DIO_VoidSetPinVal>
	DIO_VoidSetPinVal(KPD_ColumnGroup,KPD_Column2,DIO_HIGH);
    31ec:	84 e0       	ldi	r24, 0x04	; 4
    31ee:	66 e0       	ldi	r22, 0x06	; 6
    31f0:	41 e0       	ldi	r20, 0x01	; 1
    31f2:	0e 94 97 0a 	call	0x152e	; 0x152e <DIO_VoidSetPinVal>
	DIO_VoidSetPinVal(KPD_ColumnGroup,KPD_Column3,DIO_HIGH);
    31f6:	84 e0       	ldi	r24, 0x04	; 4
    31f8:	65 e0       	ldi	r22, 0x05	; 5
    31fa:	41 e0       	ldi	r20, 0x01	; 1
    31fc:	0e 94 97 0a 	call	0x152e	; 0x152e <DIO_VoidSetPinVal>
	DIO_VoidSetPinVal(KPD_ColumnGroup,KPD_Column4,DIO_HIGH);
    3200:	84 e0       	ldi	r24, 0x04	; 4
    3202:	63 e0       	ldi	r22, 0x03	; 3
    3204:	41 e0       	ldi	r20, 0x01	; 1
    3206:	0e 94 97 0a 	call	0x152e	; 0x152e <DIO_VoidSetPinVal>

	/*set Column as input*/
	DIO_VoidSetPinDirection(KPD_ColumnGroup,KPD_Column1,DIO_INPUT);
    320a:	84 e0       	ldi	r24, 0x04	; 4
    320c:	67 e0       	ldi	r22, 0x07	; 7
    320e:	40 e0       	ldi	r20, 0x00	; 0
    3210:	0e 94 8d 09 	call	0x131a	; 0x131a <DIO_VoidSetPinDirection>
	DIO_VoidSetPinDirection(KPD_ColumnGroup,KPD_Column2,DIO_INPUT);
    3214:	84 e0       	ldi	r24, 0x04	; 4
    3216:	66 e0       	ldi	r22, 0x06	; 6
    3218:	40 e0       	ldi	r20, 0x00	; 0
    321a:	0e 94 8d 09 	call	0x131a	; 0x131a <DIO_VoidSetPinDirection>
	DIO_VoidSetPinDirection(KPD_ColumnGroup,KPD_Column3,DIO_INPUT);
    321e:	84 e0       	ldi	r24, 0x04	; 4
    3220:	65 e0       	ldi	r22, 0x05	; 5
    3222:	40 e0       	ldi	r20, 0x00	; 0
    3224:	0e 94 8d 09 	call	0x131a	; 0x131a <DIO_VoidSetPinDirection>
	DIO_VoidSetPinDirection(KPD_ColumnGroup,KPD_Column4,DIO_INPUT);
    3228:	84 e0       	ldi	r24, 0x04	; 4
    322a:	63 e0       	ldi	r22, 0x03	; 3
    322c:	40 e0       	ldi	r20, 0x00	; 0
    322e:	0e 94 8d 09 	call	0x131a	; 0x131a <DIO_VoidSetPinDirection>

	/*set Column pin pull up*/
	DIO_VoidSetPinVal(KPD_ColumnGroup,KPD_Column1,DIO_HIGH);
    3232:	84 e0       	ldi	r24, 0x04	; 4
    3234:	67 e0       	ldi	r22, 0x07	; 7
    3236:	41 e0       	ldi	r20, 0x01	; 1
    3238:	0e 94 97 0a 	call	0x152e	; 0x152e <DIO_VoidSetPinVal>
	DIO_VoidSetPinVal(KPD_ColumnGroup,KPD_Column2,DIO_HIGH);
    323c:	84 e0       	ldi	r24, 0x04	; 4
    323e:	66 e0       	ldi	r22, 0x06	; 6
    3240:	41 e0       	ldi	r20, 0x01	; 1
    3242:	0e 94 97 0a 	call	0x152e	; 0x152e <DIO_VoidSetPinVal>
	DIO_VoidSetPinVal(KPD_ColumnGroup,KPD_Column3,DIO_HIGH);
    3246:	84 e0       	ldi	r24, 0x04	; 4
    3248:	65 e0       	ldi	r22, 0x05	; 5
    324a:	41 e0       	ldi	r20, 0x01	; 1
    324c:	0e 94 97 0a 	call	0x152e	; 0x152e <DIO_VoidSetPinVal>
	DIO_VoidSetPinVal(KPD_ColumnGroup,KPD_Column4,DIO_HIGH);
    3250:	84 e0       	ldi	r24, 0x04	; 4
    3252:	63 e0       	ldi	r22, 0x03	; 3
    3254:	41 e0       	ldi	r20, 0x01	; 1
    3256:	0e 94 97 0a 	call	0x152e	; 0x152e <DIO_VoidSetPinVal>

}
    325a:	cf 91       	pop	r28
    325c:	df 91       	pop	r29
    325e:	08 95       	ret

00003260 <KPD_u8ReadButton>:

u8 KPD_u8ReadButton(void)
{
    3260:	df 93       	push	r29
    3262:	cf 93       	push	r28
    3264:	cd b7       	in	r28, 0x3d	; 61
    3266:	de b7       	in	r29, 0x3e	; 62
    3268:	6b 97       	sbiw	r28, 0x1b	; 27
    326a:	0f b6       	in	r0, 0x3f	; 63
    326c:	f8 94       	cli
    326e:	de bf       	out	0x3e, r29	; 62
    3270:	0f be       	out	0x3f, r0	; 63
    3272:	cd bf       	out	0x3d, r28	; 61
	/*Create a u8 variable to for the return value and initialize it to NotFound*/
	u8 Local_Return = 255;
    3274:	8f ef       	ldi	r24, 0xFF	; 255
    3276:	8b 8b       	std	Y+19, r24	; 0x13

	/*Create 2 counters for looping*/
	u8 Local_ColCounter		= 0;
    3278:	1a 8a       	std	Y+18, r1	; 0x12
	u8 Local_RowCounter		= 0;
    327a:	19 8a       	std	Y+17, r1	; 0x11

	u8 local_u8Flag = 0;
    327c:	18 8a       	std	Y+16, r1	; 0x10

	/*Create 2 arrays of the pins of ROWs and Columns */
	u8 Local_u8RowPinArr[ROW] = {KPD_Row1, KPD_Row2, KPD_Row3, KPD_Row4};
    327e:	85 e0       	ldi	r24, 0x05	; 5
    3280:	8c 8b       	std	Y+20, r24	; 0x14
    3282:	84 e0       	ldi	r24, 0x04	; 4
    3284:	8d 8b       	std	Y+21, r24	; 0x15
    3286:	83 e0       	ldi	r24, 0x03	; 3
    3288:	8e 8b       	std	Y+22, r24	; 0x16
    328a:	82 e0       	ldi	r24, 0x02	; 2
    328c:	8f 8b       	std	Y+23, r24	; 0x17
	u8 Local_u8ColumnPinArr[Column] = {KPD_Column1, KPD_Column2, KPD_Column3, KPD_Column4};
    328e:	87 e0       	ldi	r24, 0x07	; 7
    3290:	88 8f       	std	Y+24, r24	; 0x18
    3292:	86 e0       	ldi	r24, 0x06	; 6
    3294:	89 8f       	std	Y+25, r24	; 0x19
    3296:	85 e0       	ldi	r24, 0x05	; 5
    3298:	8a 8f       	std	Y+26, r24	; 0x1a
    329a:	83 e0       	ldi	r24, 0x03	; 3
    329c:	8b 8f       	std	Y+27, r24	; 0x1b


	/*Loop to Get the Pressed Button*/
	for (Local_RowCounter = ROWStart ; Local_RowCounter <= ROWEnd ; Local_RowCounter++)
    329e:	19 8a       	std	Y+17, r1	; 0x11
    32a0:	d3 c0       	rjmp	.+422    	; 0x3448 <KPD_u8ReadButton+0x1e8>
	{
		/*set the Row as low (GND) --> Activate*/
		DIO_VoidSetPinVal(KPD_RowGroup, Local_u8RowPinArr[Local_RowCounter], DIO_LOW);
    32a2:	89 89       	ldd	r24, Y+17	; 0x11
    32a4:	28 2f       	mov	r18, r24
    32a6:	30 e0       	ldi	r19, 0x00	; 0
    32a8:	ce 01       	movw	r24, r28
    32aa:	44 96       	adiw	r24, 0x14	; 20
    32ac:	fc 01       	movw	r30, r24
    32ae:	e2 0f       	add	r30, r18
    32b0:	f3 1f       	adc	r31, r19
    32b2:	90 81       	ld	r25, Z
    32b4:	83 e0       	ldi	r24, 0x03	; 3
    32b6:	69 2f       	mov	r22, r25
    32b8:	40 e0       	ldi	r20, 0x00	; 0
    32ba:	0e 94 97 0a 	call	0x152e	; 0x152e <DIO_VoidSetPinVal>

		/*Loop to read the Rows*/
		for(Local_ColCounter = ColumnStart; Local_ColCounter <= ColumnEnd; Local_ColCounter++)
    32be:	1a 8a       	std	Y+18, r1	; 0x12
    32c0:	ab c0       	rjmp	.+342    	; 0x3418 <KPD_u8ReadButton+0x1b8>
		{
			u8 Local_PinState = DIO_u8GetPinVal(KPD_ColumnGroup, Local_u8ColumnPinArr[Local_ColCounter]);
    32c2:	8a 89       	ldd	r24, Y+18	; 0x12
    32c4:	28 2f       	mov	r18, r24
    32c6:	30 e0       	ldi	r19, 0x00	; 0
    32c8:	ce 01       	movw	r24, r28
    32ca:	48 96       	adiw	r24, 0x18	; 24
    32cc:	fc 01       	movw	r30, r24
    32ce:	e2 0f       	add	r30, r18
    32d0:	f3 1f       	adc	r31, r19
    32d2:	90 81       	ld	r25, Z
    32d4:	84 e0       	ldi	r24, 0x04	; 4
    32d6:	69 2f       	mov	r22, r25
    32d8:	0e 94 99 0c 	call	0x1932	; 0x1932 <DIO_u8GetPinVal>
    32dc:	8f 87       	std	Y+15, r24	; 0x0f

			/*Check if the Key is Pressed*/
			if(Local_PinState == 0)
    32de:	8f 85       	ldd	r24, Y+15	; 0x0f
    32e0:	88 23       	and	r24, r24
    32e2:	09 f0       	breq	.+2      	; 0x32e6 <KPD_u8ReadButton+0x86>
    32e4:	96 c0       	rjmp	.+300    	; 0x3412 <KPD_u8ReadButton+0x1b2>
    32e6:	80 e0       	ldi	r24, 0x00	; 0
    32e8:	90 e0       	ldi	r25, 0x00	; 0
    32ea:	aa e7       	ldi	r26, 0x7A	; 122
    32ec:	b3 e4       	ldi	r27, 0x43	; 67
    32ee:	8b 87       	std	Y+11, r24	; 0x0b
    32f0:	9c 87       	std	Y+12, r25	; 0x0c
    32f2:	ad 87       	std	Y+13, r26	; 0x0d
    32f4:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    32f6:	6b 85       	ldd	r22, Y+11	; 0x0b
    32f8:	7c 85       	ldd	r23, Y+12	; 0x0c
    32fa:	8d 85       	ldd	r24, Y+13	; 0x0d
    32fc:	9e 85       	ldd	r25, Y+14	; 0x0e
    32fe:	20 e0       	ldi	r18, 0x00	; 0
    3300:	30 e8       	ldi	r19, 0x80	; 128
    3302:	4b e3       	ldi	r20, 0x3B	; 59
    3304:	55 e4       	ldi	r21, 0x45	; 69
    3306:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    330a:	dc 01       	movw	r26, r24
    330c:	cb 01       	movw	r24, r22
    330e:	8f 83       	std	Y+7, r24	; 0x07
    3310:	98 87       	std	Y+8, r25	; 0x08
    3312:	a9 87       	std	Y+9, r26	; 0x09
    3314:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3316:	6f 81       	ldd	r22, Y+7	; 0x07
    3318:	78 85       	ldd	r23, Y+8	; 0x08
    331a:	89 85       	ldd	r24, Y+9	; 0x09
    331c:	9a 85       	ldd	r25, Y+10	; 0x0a
    331e:	20 e0       	ldi	r18, 0x00	; 0
    3320:	30 e0       	ldi	r19, 0x00	; 0
    3322:	40 e8       	ldi	r20, 0x80	; 128
    3324:	5f e3       	ldi	r21, 0x3F	; 63
    3326:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    332a:	88 23       	and	r24, r24
    332c:	2c f4       	brge	.+10     	; 0x3338 <KPD_u8ReadButton+0xd8>
		__ticks = 1;
    332e:	81 e0       	ldi	r24, 0x01	; 1
    3330:	90 e0       	ldi	r25, 0x00	; 0
    3332:	9e 83       	std	Y+6, r25	; 0x06
    3334:	8d 83       	std	Y+5, r24	; 0x05
    3336:	3f c0       	rjmp	.+126    	; 0x33b6 <KPD_u8ReadButton+0x156>
	else if (__tmp > 65535)
    3338:	6f 81       	ldd	r22, Y+7	; 0x07
    333a:	78 85       	ldd	r23, Y+8	; 0x08
    333c:	89 85       	ldd	r24, Y+9	; 0x09
    333e:	9a 85       	ldd	r25, Y+10	; 0x0a
    3340:	20 e0       	ldi	r18, 0x00	; 0
    3342:	3f ef       	ldi	r19, 0xFF	; 255
    3344:	4f e7       	ldi	r20, 0x7F	; 127
    3346:	57 e4       	ldi	r21, 0x47	; 71
    3348:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    334c:	18 16       	cp	r1, r24
    334e:	4c f5       	brge	.+82     	; 0x33a2 <KPD_u8ReadButton+0x142>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3350:	6b 85       	ldd	r22, Y+11	; 0x0b
    3352:	7c 85       	ldd	r23, Y+12	; 0x0c
    3354:	8d 85       	ldd	r24, Y+13	; 0x0d
    3356:	9e 85       	ldd	r25, Y+14	; 0x0e
    3358:	20 e0       	ldi	r18, 0x00	; 0
    335a:	30 e0       	ldi	r19, 0x00	; 0
    335c:	40 e2       	ldi	r20, 0x20	; 32
    335e:	51 e4       	ldi	r21, 0x41	; 65
    3360:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3364:	dc 01       	movw	r26, r24
    3366:	cb 01       	movw	r24, r22
    3368:	bc 01       	movw	r22, r24
    336a:	cd 01       	movw	r24, r26
    336c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3370:	dc 01       	movw	r26, r24
    3372:	cb 01       	movw	r24, r22
    3374:	9e 83       	std	Y+6, r25	; 0x06
    3376:	8d 83       	std	Y+5, r24	; 0x05
    3378:	0f c0       	rjmp	.+30     	; 0x3398 <KPD_u8ReadButton+0x138>
    337a:	8c e2       	ldi	r24, 0x2C	; 44
    337c:	91 e0       	ldi	r25, 0x01	; 1
    337e:	9c 83       	std	Y+4, r25	; 0x04
    3380:	8b 83       	std	Y+3, r24	; 0x03
    3382:	8b 81       	ldd	r24, Y+3	; 0x03
    3384:	9c 81       	ldd	r25, Y+4	; 0x04
    3386:	01 97       	sbiw	r24, 0x01	; 1
    3388:	f1 f7       	brne	.-4      	; 0x3386 <KPD_u8ReadButton+0x126>
    338a:	9c 83       	std	Y+4, r25	; 0x04
    338c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    338e:	8d 81       	ldd	r24, Y+5	; 0x05
    3390:	9e 81       	ldd	r25, Y+6	; 0x06
    3392:	01 97       	sbiw	r24, 0x01	; 1
    3394:	9e 83       	std	Y+6, r25	; 0x06
    3396:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3398:	8d 81       	ldd	r24, Y+5	; 0x05
    339a:	9e 81       	ldd	r25, Y+6	; 0x06
    339c:	00 97       	sbiw	r24, 0x00	; 0
    339e:	69 f7       	brne	.-38     	; 0x337a <KPD_u8ReadButton+0x11a>
    33a0:	14 c0       	rjmp	.+40     	; 0x33ca <KPD_u8ReadButton+0x16a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    33a2:	6f 81       	ldd	r22, Y+7	; 0x07
    33a4:	78 85       	ldd	r23, Y+8	; 0x08
    33a6:	89 85       	ldd	r24, Y+9	; 0x09
    33a8:	9a 85       	ldd	r25, Y+10	; 0x0a
    33aa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    33ae:	dc 01       	movw	r26, r24
    33b0:	cb 01       	movw	r24, r22
    33b2:	9e 83       	std	Y+6, r25	; 0x06
    33b4:	8d 83       	std	Y+5, r24	; 0x05
    33b6:	8d 81       	ldd	r24, Y+5	; 0x05
    33b8:	9e 81       	ldd	r25, Y+6	; 0x06
    33ba:	9a 83       	std	Y+2, r25	; 0x02
    33bc:	89 83       	std	Y+1, r24	; 0x01
    33be:	89 81       	ldd	r24, Y+1	; 0x01
    33c0:	9a 81       	ldd	r25, Y+2	; 0x02
    33c2:	01 97       	sbiw	r24, 0x01	; 1
    33c4:	f1 f7       	brne	.-4      	; 0x33c2 <KPD_u8ReadButton+0x162>
    33c6:	9a 83       	std	Y+2, r25	; 0x02
    33c8:	89 83       	std	Y+1, r24	; 0x01
			{
				//Debouncing delay
				_delay_ms(250);

				/*Pulling until the button is released*/
				while (DIO_u8GetPinVal(KPD_ColumnGroup, Local_u8ColumnPinArr[Local_ColCounter]) == 0);
    33ca:	8a 89       	ldd	r24, Y+18	; 0x12
    33cc:	28 2f       	mov	r18, r24
    33ce:	30 e0       	ldi	r19, 0x00	; 0
    33d0:	ce 01       	movw	r24, r28
    33d2:	48 96       	adiw	r24, 0x18	; 24
    33d4:	fc 01       	movw	r30, r24
    33d6:	e2 0f       	add	r30, r18
    33d8:	f3 1f       	adc	r31, r19
    33da:	90 81       	ld	r25, Z
    33dc:	84 e0       	ldi	r24, 0x04	; 4
    33de:	69 2f       	mov	r22, r25
    33e0:	0e 94 99 0c 	call	0x1932	; 0x1932 <DIO_u8GetPinVal>
    33e4:	88 23       	and	r24, r24
    33e6:	89 f3       	breq	.-30     	; 0x33ca <KPD_u8ReadButton+0x16a>

				local_u8Flag = 1;
    33e8:	81 e0       	ldi	r24, 0x01	; 1
    33ea:	88 8b       	std	Y+16, r24	; 0x10

				Local_Return = KPD_Values[Local_RowCounter][Local_ColCounter];
    33ec:	89 89       	ldd	r24, Y+17	; 0x11
    33ee:	48 2f       	mov	r20, r24
    33f0:	50 e0       	ldi	r21, 0x00	; 0
    33f2:	8a 89       	ldd	r24, Y+18	; 0x12
    33f4:	28 2f       	mov	r18, r24
    33f6:	30 e0       	ldi	r19, 0x00	; 0
    33f8:	ca 01       	movw	r24, r20
    33fa:	88 0f       	add	r24, r24
    33fc:	99 1f       	adc	r25, r25
    33fe:	88 0f       	add	r24, r24
    3400:	99 1f       	adc	r25, r25
    3402:	82 0f       	add	r24, r18
    3404:	93 1f       	adc	r25, r19
    3406:	fc 01       	movw	r30, r24
    3408:	e7 58       	subi	r30, 0x87	; 135
    340a:	fe 4f       	sbci	r31, 0xFE	; 254
    340c:	80 81       	ld	r24, Z
    340e:	8b 8b       	std	Y+19, r24	; 0x13
    3410:	07 c0       	rjmp	.+14     	; 0x3420 <KPD_u8ReadButton+0x1c0>
	{
		/*set the Row as low (GND) --> Activate*/
		DIO_VoidSetPinVal(KPD_RowGroup, Local_u8RowPinArr[Local_RowCounter], DIO_LOW);

		/*Loop to read the Rows*/
		for(Local_ColCounter = ColumnStart; Local_ColCounter <= ColumnEnd; Local_ColCounter++)
    3412:	8a 89       	ldd	r24, Y+18	; 0x12
    3414:	8f 5f       	subi	r24, 0xFF	; 255
    3416:	8a 8b       	std	Y+18, r24	; 0x12
    3418:	8a 89       	ldd	r24, Y+18	; 0x12
    341a:	84 30       	cpi	r24, 0x04	; 4
    341c:	08 f4       	brcc	.+2      	; 0x3420 <KPD_u8ReadButton+0x1c0>
    341e:	51 cf       	rjmp	.-350    	; 0x32c2 <KPD_u8ReadButton+0x62>
				Local_Return = KPD_Values[Local_RowCounter][Local_ColCounter];

				break;
			}
		}
		DIO_VoidSetPinVal(KPD_RowGroup, Local_u8RowPinArr[Local_RowCounter], DIO_HIGH);
    3420:	89 89       	ldd	r24, Y+17	; 0x11
    3422:	28 2f       	mov	r18, r24
    3424:	30 e0       	ldi	r19, 0x00	; 0
    3426:	ce 01       	movw	r24, r28
    3428:	44 96       	adiw	r24, 0x14	; 20
    342a:	fc 01       	movw	r30, r24
    342c:	e2 0f       	add	r30, r18
    342e:	f3 1f       	adc	r31, r19
    3430:	90 81       	ld	r25, Z
    3432:	83 e0       	ldi	r24, 0x03	; 3
    3434:	69 2f       	mov	r22, r25
    3436:	41 e0       	ldi	r20, 0x01	; 1
    3438:	0e 94 97 0a 	call	0x152e	; 0x152e <DIO_VoidSetPinVal>
		if (local_u8Flag == 1)
    343c:	88 89       	ldd	r24, Y+16	; 0x10
    343e:	81 30       	cpi	r24, 0x01	; 1
    3440:	39 f0       	breq	.+14     	; 0x3450 <KPD_u8ReadButton+0x1f0>
	u8 Local_u8RowPinArr[ROW] = {KPD_Row1, KPD_Row2, KPD_Row3, KPD_Row4};
	u8 Local_u8ColumnPinArr[Column] = {KPD_Column1, KPD_Column2, KPD_Column3, KPD_Column4};


	/*Loop to Get the Pressed Button*/
	for (Local_RowCounter = ROWStart ; Local_RowCounter <= ROWEnd ; Local_RowCounter++)
    3442:	89 89       	ldd	r24, Y+17	; 0x11
    3444:	8f 5f       	subi	r24, 0xFF	; 255
    3446:	89 8b       	std	Y+17, r24	; 0x11
    3448:	89 89       	ldd	r24, Y+17	; 0x11
    344a:	84 30       	cpi	r24, 0x04	; 4
    344c:	08 f4       	brcc	.+2      	; 0x3450 <KPD_u8ReadButton+0x1f0>
    344e:	29 cf       	rjmp	.-430    	; 0x32a2 <KPD_u8ReadButton+0x42>
		if (local_u8Flag == 1)
		{
			break;
		}
	}
	return Local_Return;
    3450:	8b 89       	ldd	r24, Y+19	; 0x13
}
    3452:	6b 96       	adiw	r28, 0x1b	; 27
    3454:	0f b6       	in	r0, 0x3f	; 63
    3456:	f8 94       	cli
    3458:	de bf       	out	0x3e, r29	; 62
    345a:	0f be       	out	0x3f, r0	; 63
    345c:	cd bf       	out	0x3d, r28	; 61
    345e:	cf 91       	pop	r28
    3460:	df 91       	pop	r29
    3462:	08 95       	ret

00003464 <Fun1>:
volatile u8 Flag1 = 0;
volatile u8 Flag2 = 0;

/********** Function to raise a Flag1 when EXT0 ISR occurs ***********/
void Fun1 (void)
{
    3464:	df 93       	push	r29
    3466:	cf 93       	push	r28
    3468:	cd b7       	in	r28, 0x3d	; 61
    346a:	de b7       	in	r29, 0x3e	; 62
	Flag1 = 1;
    346c:	81 e0       	ldi	r24, 0x01	; 1
    346e:	80 93 94 01 	sts	0x0194, r24
}
    3472:	cf 91       	pop	r28
    3474:	df 91       	pop	r29
    3476:	08 95       	ret

00003478 <Fun2>:

/********** Function to raise a Flag2 when ADC ISR occurs ************/

void Fun2 (void)
{
    3478:	df 93       	push	r29
    347a:	cf 93       	push	r28
    347c:	cd b7       	in	r28, 0x3d	; 61
    347e:	de b7       	in	r29, 0x3e	; 62
	Flag2 = 1;
    3480:	81 e0       	ldi	r24, 0x01	; 1
    3482:	80 93 95 01 	sts	0x0195, r24
}
    3486:	cf 91       	pop	r28
    3488:	df 91       	pop	r29
    348a:	08 95       	ret

0000348c <main>:

/**********************************************************************/

void main(void)
{
    348c:	df 93       	push	r29
    348e:	cf 93       	push	r28
    3490:	cd b7       	in	r28, 0x3d	; 61
    3492:	de b7       	in	r29, 0x3e	; 62
    3494:	a6 97       	sbiw	r28, 0x26	; 38
    3496:	0f b6       	in	r0, 0x3f	; 63
    3498:	f8 94       	cli
    349a:	de bf       	out	0x3e, r29	; 62
    349c:	0f be       	out	0x3f, r0	; 63
    349e:	cd bf       	out	0x3d, r28	; 61
	u16 ADC_Data;
	LCD_Void4BitsInit();
    34a0:	0e 94 8b 16 	call	0x2d16	; 0x2d16 <LCD_Void4BitsInit>

	/* Initialize EXT0 that will auto trigger ADC to start Conversion  */
	EXT0_CallBackFunction(Fun1);
    34a4:	82 e3       	ldi	r24, 0x32	; 50
    34a6:	9a e1       	ldi	r25, 0x1A	; 26
    34a8:	0e 94 4c 08 	call	0x1098	; 0x1098 <EXT0_CallBackFunction>
	EXTI0_VoidInit();
    34ac:	0e 94 33 07 	call	0xe66	; 0xe66 <EXTI0_VoidInit>

	/* Initialize ADC at Channel 0 with AutoTrigger Source = EXT_NO_0 */
	ADC_voidChannelSelect(CHANNEL_0);
    34b0:	80 e0       	ldi	r24, 0x00	; 0
    34b2:	0e 94 4e 0d 	call	0x1a9c	; 0x1a9c <ADC_voidChannelSelect>
	ADC_voidInit();
    34b6:	0e 94 21 0d 	call	0x1a42	; 0x1a42 <ADC_voidInit>
	ADC_voidSetCallBack(&ADC_Data,Fun2);
    34ba:	ce 01       	movw	r24, r28
    34bc:	85 96       	adiw	r24, 0x25	; 37
    34be:	2c e3       	ldi	r18, 0x3C	; 60
    34c0:	3a e1       	ldi	r19, 0x1A	; 26
    34c2:	b9 01       	movw	r22, r18
    34c4:	0e 94 54 0e 	call	0x1ca8	; 0x1ca8 <ADC_voidSetCallBack>

	/* Enable Global Interrupt */
	GIE_VoidEnable();
    34c8:	0e 94 17 07 	call	0xe2e	; 0xe2e <GIE_VoidEnable>

	while(1)
	{
		/* Check if Flag 1 is raised -> if Flag1 = 1, EXT0 ISR occurred  */
		if(Flag1 == 1)
    34cc:	80 91 94 01 	lds	r24, 0x0194
    34d0:	81 30       	cpi	r24, 0x01	; 1
    34d2:	09 f0       	breq	.+2      	; 0x34d6 <main+0x4a>
    34d4:	b5 c0       	rjmp	.+362    	; 0x3640 <main+0x1b4>
		{
			Flag1 = 0;
    34d6:	10 92 94 01 	sts	0x0194, r1

			/* Display the Temperature on LCD with indicator to Fun 1 */
			LCD_VoidStartFrom(0,0);
    34da:	80 e0       	ldi	r24, 0x00	; 0
    34dc:	60 e0       	ldi	r22, 0x00	; 0
    34de:	0e 94 ee 17 	call	0x2fdc	; 0x2fdc <LCD_VoidStartFrom>
			LCD_VoidSendString("Fun 1 ");
    34e2:	80 e6       	ldi	r24, 0x60	; 96
    34e4:	90 e0       	ldi	r25, 0x00	; 0
    34e6:	0e 94 40 17 	call	0x2e80	; 0x2e80 <LCD_VoidSendString>
			f32 celsius = ADC_Data * 4.88;
    34ea:	8d a1       	ldd	r24, Y+37	; 0x25
    34ec:	9e a1       	ldd	r25, Y+38	; 0x26
    34ee:	cc 01       	movw	r24, r24
    34f0:	a0 e0       	ldi	r26, 0x00	; 0
    34f2:	b0 e0       	ldi	r27, 0x00	; 0
    34f4:	bc 01       	movw	r22, r24
    34f6:	cd 01       	movw	r24, r26
    34f8:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    34fc:	dc 01       	movw	r26, r24
    34fe:	cb 01       	movw	r24, r22
    3500:	bc 01       	movw	r22, r24
    3502:	cd 01       	movw	r24, r26
    3504:	26 ef       	ldi	r18, 0xF6	; 246
    3506:	38 e2       	ldi	r19, 0x28	; 40
    3508:	4c e9       	ldi	r20, 0x9C	; 156
    350a:	50 e4       	ldi	r21, 0x40	; 64
    350c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3510:	dc 01       	movw	r26, r24
    3512:	cb 01       	movw	r24, r22
    3514:	89 a3       	std	Y+33, r24	; 0x21
    3516:	9a a3       	std	Y+34, r25	; 0x22
    3518:	ab a3       	std	Y+35, r26	; 0x23
    351a:	bc a3       	std	Y+36, r27	; 0x24
			celsius = (celsius / 10);
    351c:	69 a1       	ldd	r22, Y+33	; 0x21
    351e:	7a a1       	ldd	r23, Y+34	; 0x22
    3520:	8b a1       	ldd	r24, Y+35	; 0x23
    3522:	9c a1       	ldd	r25, Y+36	; 0x24
    3524:	20 e0       	ldi	r18, 0x00	; 0
    3526:	30 e0       	ldi	r19, 0x00	; 0
    3528:	40 e2       	ldi	r20, 0x20	; 32
    352a:	51 e4       	ldi	r21, 0x41	; 65
    352c:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    3530:	dc 01       	movw	r26, r24
    3532:	cb 01       	movw	r24, r22
    3534:	89 a3       	std	Y+33, r24	; 0x21
    3536:	9a a3       	std	Y+34, r25	; 0x22
    3538:	ab a3       	std	Y+35, r26	; 0x23
    353a:	bc a3       	std	Y+36, r27	; 0x24
			HLCD_voidDisplayNumber(celsius);
    353c:	69 a1       	ldd	r22, Y+33	; 0x21
    353e:	7a a1       	ldd	r23, Y+34	; 0x22
    3540:	8b a1       	ldd	r24, Y+35	; 0x23
    3542:	9c a1       	ldd	r25, Y+36	; 0x24
    3544:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3548:	dc 01       	movw	r26, r24
    354a:	cb 01       	movw	r24, r22
    354c:	bc 01       	movw	r22, r24
    354e:	cd 01       	movw	r24, r26
    3550:	0e 94 3b 18 	call	0x3076	; 0x3076 <HLCD_voidDisplayNumber>
			LCD_VoidSendString(" C");
    3554:	87 e6       	ldi	r24, 0x67	; 103
    3556:	90 e0       	ldi	r25, 0x00	; 0
    3558:	0e 94 40 17 	call	0x2e80	; 0x2e80 <LCD_VoidSendString>
    355c:	80 e0       	ldi	r24, 0x00	; 0
    355e:	90 e0       	ldi	r25, 0x00	; 0
    3560:	aa e7       	ldi	r26, 0x7A	; 122
    3562:	b4 e4       	ldi	r27, 0x44	; 68
    3564:	89 8f       	std	Y+25, r24	; 0x19
    3566:	9a 8f       	std	Y+26, r25	; 0x1a
    3568:	ab 8f       	std	Y+27, r26	; 0x1b
    356a:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    356c:	69 8d       	ldd	r22, Y+25	; 0x19
    356e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3570:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3572:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3574:	20 e0       	ldi	r18, 0x00	; 0
    3576:	30 e0       	ldi	r19, 0x00	; 0
    3578:	4a ef       	ldi	r20, 0xFA	; 250
    357a:	54 e4       	ldi	r21, 0x44	; 68
    357c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3580:	dc 01       	movw	r26, r24
    3582:	cb 01       	movw	r24, r22
    3584:	8d 8b       	std	Y+21, r24	; 0x15
    3586:	9e 8b       	std	Y+22, r25	; 0x16
    3588:	af 8b       	std	Y+23, r26	; 0x17
    358a:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    358c:	6d 89       	ldd	r22, Y+21	; 0x15
    358e:	7e 89       	ldd	r23, Y+22	; 0x16
    3590:	8f 89       	ldd	r24, Y+23	; 0x17
    3592:	98 8d       	ldd	r25, Y+24	; 0x18
    3594:	20 e0       	ldi	r18, 0x00	; 0
    3596:	30 e0       	ldi	r19, 0x00	; 0
    3598:	40 e8       	ldi	r20, 0x80	; 128
    359a:	5f e3       	ldi	r21, 0x3F	; 63
    359c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    35a0:	88 23       	and	r24, r24
    35a2:	2c f4       	brge	.+10     	; 0x35ae <main+0x122>
		__ticks = 1;
    35a4:	81 e0       	ldi	r24, 0x01	; 1
    35a6:	90 e0       	ldi	r25, 0x00	; 0
    35a8:	9c 8b       	std	Y+20, r25	; 0x14
    35aa:	8b 8b       	std	Y+19, r24	; 0x13
    35ac:	3f c0       	rjmp	.+126    	; 0x362c <main+0x1a0>
	else if (__tmp > 65535)
    35ae:	6d 89       	ldd	r22, Y+21	; 0x15
    35b0:	7e 89       	ldd	r23, Y+22	; 0x16
    35b2:	8f 89       	ldd	r24, Y+23	; 0x17
    35b4:	98 8d       	ldd	r25, Y+24	; 0x18
    35b6:	20 e0       	ldi	r18, 0x00	; 0
    35b8:	3f ef       	ldi	r19, 0xFF	; 255
    35ba:	4f e7       	ldi	r20, 0x7F	; 127
    35bc:	57 e4       	ldi	r21, 0x47	; 71
    35be:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    35c2:	18 16       	cp	r1, r24
    35c4:	4c f5       	brge	.+82     	; 0x3618 <main+0x18c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    35c6:	69 8d       	ldd	r22, Y+25	; 0x19
    35c8:	7a 8d       	ldd	r23, Y+26	; 0x1a
    35ca:	8b 8d       	ldd	r24, Y+27	; 0x1b
    35cc:	9c 8d       	ldd	r25, Y+28	; 0x1c
    35ce:	20 e0       	ldi	r18, 0x00	; 0
    35d0:	30 e0       	ldi	r19, 0x00	; 0
    35d2:	40 e2       	ldi	r20, 0x20	; 32
    35d4:	51 e4       	ldi	r21, 0x41	; 65
    35d6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    35da:	dc 01       	movw	r26, r24
    35dc:	cb 01       	movw	r24, r22
    35de:	bc 01       	movw	r22, r24
    35e0:	cd 01       	movw	r24, r26
    35e2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    35e6:	dc 01       	movw	r26, r24
    35e8:	cb 01       	movw	r24, r22
    35ea:	9c 8b       	std	Y+20, r25	; 0x14
    35ec:	8b 8b       	std	Y+19, r24	; 0x13
    35ee:	0f c0       	rjmp	.+30     	; 0x360e <main+0x182>
    35f0:	88 ec       	ldi	r24, 0xC8	; 200
    35f2:	90 e0       	ldi	r25, 0x00	; 0
    35f4:	9a 8b       	std	Y+18, r25	; 0x12
    35f6:	89 8b       	std	Y+17, r24	; 0x11
    35f8:	89 89       	ldd	r24, Y+17	; 0x11
    35fa:	9a 89       	ldd	r25, Y+18	; 0x12
    35fc:	01 97       	sbiw	r24, 0x01	; 1
    35fe:	f1 f7       	brne	.-4      	; 0x35fc <main+0x170>
    3600:	9a 8b       	std	Y+18, r25	; 0x12
    3602:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3604:	8b 89       	ldd	r24, Y+19	; 0x13
    3606:	9c 89       	ldd	r25, Y+20	; 0x14
    3608:	01 97       	sbiw	r24, 0x01	; 1
    360a:	9c 8b       	std	Y+20, r25	; 0x14
    360c:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    360e:	8b 89       	ldd	r24, Y+19	; 0x13
    3610:	9c 89       	ldd	r25, Y+20	; 0x14
    3612:	00 97       	sbiw	r24, 0x00	; 0
    3614:	69 f7       	brne	.-38     	; 0x35f0 <main+0x164>
    3616:	14 c0       	rjmp	.+40     	; 0x3640 <main+0x1b4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3618:	6d 89       	ldd	r22, Y+21	; 0x15
    361a:	7e 89       	ldd	r23, Y+22	; 0x16
    361c:	8f 89       	ldd	r24, Y+23	; 0x17
    361e:	98 8d       	ldd	r25, Y+24	; 0x18
    3620:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3624:	dc 01       	movw	r26, r24
    3626:	cb 01       	movw	r24, r22
    3628:	9c 8b       	std	Y+20, r25	; 0x14
    362a:	8b 8b       	std	Y+19, r24	; 0x13
    362c:	8b 89       	ldd	r24, Y+19	; 0x13
    362e:	9c 89       	ldd	r25, Y+20	; 0x14
    3630:	98 8b       	std	Y+16, r25	; 0x10
    3632:	8f 87       	std	Y+15, r24	; 0x0f
    3634:	8f 85       	ldd	r24, Y+15	; 0x0f
    3636:	98 89       	ldd	r25, Y+16	; 0x10
    3638:	01 97       	sbiw	r24, 0x01	; 1
    363a:	f1 f7       	brne	.-4      	; 0x3638 <main+0x1ac>
    363c:	98 8b       	std	Y+16, r25	; 0x10
    363e:	8f 87       	std	Y+15, r24	; 0x0f
			_delay_ms(1000);
		}

		/* Check if Flag 2 is raised -> if Flag2 = 1, ADC ISR occurred means
		 * that EXT0 ISR occurs and triggered ADC and ADC conversion complete */
		if(Flag2 == 1)
    3640:	80 91 95 01 	lds	r24, 0x0195
    3644:	81 30       	cpi	r24, 0x01	; 1
    3646:	09 f0       	breq	.+2      	; 0x364a <main+0x1be>
    3648:	41 cf       	rjmp	.-382    	; 0x34cc <main+0x40>
		{
			Flag2 = 0;
    364a:	10 92 95 01 	sts	0x0195, r1

			/* Display the Temperature on LCD with indicator to Fun 2 */
			LCD_VoidStartFrom(0,0);
    364e:	80 e0       	ldi	r24, 0x00	; 0
    3650:	60 e0       	ldi	r22, 0x00	; 0
    3652:	0e 94 ee 17 	call	0x2fdc	; 0x2fdc <LCD_VoidStartFrom>
			LCD_VoidSendString("Fun 2 ");
    3656:	8a e6       	ldi	r24, 0x6A	; 106
    3658:	90 e0       	ldi	r25, 0x00	; 0
    365a:	0e 94 40 17 	call	0x2e80	; 0x2e80 <LCD_VoidSendString>
			f32 celsius = ADC_Data * 4.88;
    365e:	8d a1       	ldd	r24, Y+37	; 0x25
    3660:	9e a1       	ldd	r25, Y+38	; 0x26
    3662:	cc 01       	movw	r24, r24
    3664:	a0 e0       	ldi	r26, 0x00	; 0
    3666:	b0 e0       	ldi	r27, 0x00	; 0
    3668:	bc 01       	movw	r22, r24
    366a:	cd 01       	movw	r24, r26
    366c:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    3670:	dc 01       	movw	r26, r24
    3672:	cb 01       	movw	r24, r22
    3674:	bc 01       	movw	r22, r24
    3676:	cd 01       	movw	r24, r26
    3678:	26 ef       	ldi	r18, 0xF6	; 246
    367a:	38 e2       	ldi	r19, 0x28	; 40
    367c:	4c e9       	ldi	r20, 0x9C	; 156
    367e:	50 e4       	ldi	r21, 0x40	; 64
    3680:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3684:	dc 01       	movw	r26, r24
    3686:	cb 01       	movw	r24, r22
    3688:	8d 8f       	std	Y+29, r24	; 0x1d
    368a:	9e 8f       	std	Y+30, r25	; 0x1e
    368c:	af 8f       	std	Y+31, r26	; 0x1f
    368e:	b8 a3       	std	Y+32, r27	; 0x20
			celsius = (celsius / 10);
    3690:	6d 8d       	ldd	r22, Y+29	; 0x1d
    3692:	7e 8d       	ldd	r23, Y+30	; 0x1e
    3694:	8f 8d       	ldd	r24, Y+31	; 0x1f
    3696:	98 a1       	ldd	r25, Y+32	; 0x20
    3698:	20 e0       	ldi	r18, 0x00	; 0
    369a:	30 e0       	ldi	r19, 0x00	; 0
    369c:	40 e2       	ldi	r20, 0x20	; 32
    369e:	51 e4       	ldi	r21, 0x41	; 65
    36a0:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    36a4:	dc 01       	movw	r26, r24
    36a6:	cb 01       	movw	r24, r22
    36a8:	8d 8f       	std	Y+29, r24	; 0x1d
    36aa:	9e 8f       	std	Y+30, r25	; 0x1e
    36ac:	af 8f       	std	Y+31, r26	; 0x1f
    36ae:	b8 a3       	std	Y+32, r27	; 0x20
			HLCD_voidDisplayNumber(celsius);
    36b0:	6d 8d       	ldd	r22, Y+29	; 0x1d
    36b2:	7e 8d       	ldd	r23, Y+30	; 0x1e
    36b4:	8f 8d       	ldd	r24, Y+31	; 0x1f
    36b6:	98 a1       	ldd	r25, Y+32	; 0x20
    36b8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    36bc:	dc 01       	movw	r26, r24
    36be:	cb 01       	movw	r24, r22
    36c0:	bc 01       	movw	r22, r24
    36c2:	cd 01       	movw	r24, r26
    36c4:	0e 94 3b 18 	call	0x3076	; 0x3076 <HLCD_voidDisplayNumber>
			LCD_VoidSendString(" C");
    36c8:	87 e6       	ldi	r24, 0x67	; 103
    36ca:	90 e0       	ldi	r25, 0x00	; 0
    36cc:	0e 94 40 17 	call	0x2e80	; 0x2e80 <LCD_VoidSendString>
    36d0:	80 e0       	ldi	r24, 0x00	; 0
    36d2:	90 e0       	ldi	r25, 0x00	; 0
    36d4:	aa e7       	ldi	r26, 0x7A	; 122
    36d6:	b4 e4       	ldi	r27, 0x44	; 68
    36d8:	8b 87       	std	Y+11, r24	; 0x0b
    36da:	9c 87       	std	Y+12, r25	; 0x0c
    36dc:	ad 87       	std	Y+13, r26	; 0x0d
    36de:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    36e0:	6b 85       	ldd	r22, Y+11	; 0x0b
    36e2:	7c 85       	ldd	r23, Y+12	; 0x0c
    36e4:	8d 85       	ldd	r24, Y+13	; 0x0d
    36e6:	9e 85       	ldd	r25, Y+14	; 0x0e
    36e8:	20 e0       	ldi	r18, 0x00	; 0
    36ea:	30 e0       	ldi	r19, 0x00	; 0
    36ec:	4a ef       	ldi	r20, 0xFA	; 250
    36ee:	54 e4       	ldi	r21, 0x44	; 68
    36f0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    36f4:	dc 01       	movw	r26, r24
    36f6:	cb 01       	movw	r24, r22
    36f8:	8f 83       	std	Y+7, r24	; 0x07
    36fa:	98 87       	std	Y+8, r25	; 0x08
    36fc:	a9 87       	std	Y+9, r26	; 0x09
    36fe:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3700:	6f 81       	ldd	r22, Y+7	; 0x07
    3702:	78 85       	ldd	r23, Y+8	; 0x08
    3704:	89 85       	ldd	r24, Y+9	; 0x09
    3706:	9a 85       	ldd	r25, Y+10	; 0x0a
    3708:	20 e0       	ldi	r18, 0x00	; 0
    370a:	30 e0       	ldi	r19, 0x00	; 0
    370c:	40 e8       	ldi	r20, 0x80	; 128
    370e:	5f e3       	ldi	r21, 0x3F	; 63
    3710:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3714:	88 23       	and	r24, r24
    3716:	2c f4       	brge	.+10     	; 0x3722 <main+0x296>
		__ticks = 1;
    3718:	81 e0       	ldi	r24, 0x01	; 1
    371a:	90 e0       	ldi	r25, 0x00	; 0
    371c:	9e 83       	std	Y+6, r25	; 0x06
    371e:	8d 83       	std	Y+5, r24	; 0x05
    3720:	3f c0       	rjmp	.+126    	; 0x37a0 <main+0x314>
	else if (__tmp > 65535)
    3722:	6f 81       	ldd	r22, Y+7	; 0x07
    3724:	78 85       	ldd	r23, Y+8	; 0x08
    3726:	89 85       	ldd	r24, Y+9	; 0x09
    3728:	9a 85       	ldd	r25, Y+10	; 0x0a
    372a:	20 e0       	ldi	r18, 0x00	; 0
    372c:	3f ef       	ldi	r19, 0xFF	; 255
    372e:	4f e7       	ldi	r20, 0x7F	; 127
    3730:	57 e4       	ldi	r21, 0x47	; 71
    3732:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3736:	18 16       	cp	r1, r24
    3738:	4c f5       	brge	.+82     	; 0x378c <main+0x300>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    373a:	6b 85       	ldd	r22, Y+11	; 0x0b
    373c:	7c 85       	ldd	r23, Y+12	; 0x0c
    373e:	8d 85       	ldd	r24, Y+13	; 0x0d
    3740:	9e 85       	ldd	r25, Y+14	; 0x0e
    3742:	20 e0       	ldi	r18, 0x00	; 0
    3744:	30 e0       	ldi	r19, 0x00	; 0
    3746:	40 e2       	ldi	r20, 0x20	; 32
    3748:	51 e4       	ldi	r21, 0x41	; 65
    374a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    374e:	dc 01       	movw	r26, r24
    3750:	cb 01       	movw	r24, r22
    3752:	bc 01       	movw	r22, r24
    3754:	cd 01       	movw	r24, r26
    3756:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    375a:	dc 01       	movw	r26, r24
    375c:	cb 01       	movw	r24, r22
    375e:	9e 83       	std	Y+6, r25	; 0x06
    3760:	8d 83       	std	Y+5, r24	; 0x05
    3762:	0f c0       	rjmp	.+30     	; 0x3782 <main+0x2f6>
    3764:	88 ec       	ldi	r24, 0xC8	; 200
    3766:	90 e0       	ldi	r25, 0x00	; 0
    3768:	9c 83       	std	Y+4, r25	; 0x04
    376a:	8b 83       	std	Y+3, r24	; 0x03
    376c:	8b 81       	ldd	r24, Y+3	; 0x03
    376e:	9c 81       	ldd	r25, Y+4	; 0x04
    3770:	01 97       	sbiw	r24, 0x01	; 1
    3772:	f1 f7       	brne	.-4      	; 0x3770 <main+0x2e4>
    3774:	9c 83       	std	Y+4, r25	; 0x04
    3776:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3778:	8d 81       	ldd	r24, Y+5	; 0x05
    377a:	9e 81       	ldd	r25, Y+6	; 0x06
    377c:	01 97       	sbiw	r24, 0x01	; 1
    377e:	9e 83       	std	Y+6, r25	; 0x06
    3780:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3782:	8d 81       	ldd	r24, Y+5	; 0x05
    3784:	9e 81       	ldd	r25, Y+6	; 0x06
    3786:	00 97       	sbiw	r24, 0x00	; 0
    3788:	69 f7       	brne	.-38     	; 0x3764 <main+0x2d8>
    378a:	a0 ce       	rjmp	.-704    	; 0x34cc <main+0x40>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    378c:	6f 81       	ldd	r22, Y+7	; 0x07
    378e:	78 85       	ldd	r23, Y+8	; 0x08
    3790:	89 85       	ldd	r24, Y+9	; 0x09
    3792:	9a 85       	ldd	r25, Y+10	; 0x0a
    3794:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3798:	dc 01       	movw	r26, r24
    379a:	cb 01       	movw	r24, r22
    379c:	9e 83       	std	Y+6, r25	; 0x06
    379e:	8d 83       	std	Y+5, r24	; 0x05
    37a0:	8d 81       	ldd	r24, Y+5	; 0x05
    37a2:	9e 81       	ldd	r25, Y+6	; 0x06
    37a4:	9a 83       	std	Y+2, r25	; 0x02
    37a6:	89 83       	std	Y+1, r24	; 0x01
    37a8:	89 81       	ldd	r24, Y+1	; 0x01
    37aa:	9a 81       	ldd	r25, Y+2	; 0x02
    37ac:	01 97       	sbiw	r24, 0x01	; 1
    37ae:	f1 f7       	brne	.-4      	; 0x37ac <main+0x320>
    37b0:	9a 83       	std	Y+2, r25	; 0x02
    37b2:	89 83       	std	Y+1, r24	; 0x01
    37b4:	8b ce       	rjmp	.-746    	; 0x34cc <main+0x40>

000037b6 <__mulsi3>:
    37b6:	62 9f       	mul	r22, r18
    37b8:	d0 01       	movw	r26, r0
    37ba:	73 9f       	mul	r23, r19
    37bc:	f0 01       	movw	r30, r0
    37be:	82 9f       	mul	r24, r18
    37c0:	e0 0d       	add	r30, r0
    37c2:	f1 1d       	adc	r31, r1
    37c4:	64 9f       	mul	r22, r20
    37c6:	e0 0d       	add	r30, r0
    37c8:	f1 1d       	adc	r31, r1
    37ca:	92 9f       	mul	r25, r18
    37cc:	f0 0d       	add	r31, r0
    37ce:	83 9f       	mul	r24, r19
    37d0:	f0 0d       	add	r31, r0
    37d2:	74 9f       	mul	r23, r20
    37d4:	f0 0d       	add	r31, r0
    37d6:	65 9f       	mul	r22, r21
    37d8:	f0 0d       	add	r31, r0
    37da:	99 27       	eor	r25, r25
    37dc:	72 9f       	mul	r23, r18
    37de:	b0 0d       	add	r27, r0
    37e0:	e1 1d       	adc	r30, r1
    37e2:	f9 1f       	adc	r31, r25
    37e4:	63 9f       	mul	r22, r19
    37e6:	b0 0d       	add	r27, r0
    37e8:	e1 1d       	adc	r30, r1
    37ea:	f9 1f       	adc	r31, r25
    37ec:	bd 01       	movw	r22, r26
    37ee:	cf 01       	movw	r24, r30
    37f0:	11 24       	eor	r1, r1
    37f2:	08 95       	ret

000037f4 <__udivmodsi4>:
    37f4:	a1 e2       	ldi	r26, 0x21	; 33
    37f6:	1a 2e       	mov	r1, r26
    37f8:	aa 1b       	sub	r26, r26
    37fa:	bb 1b       	sub	r27, r27
    37fc:	fd 01       	movw	r30, r26
    37fe:	0d c0       	rjmp	.+26     	; 0x381a <__udivmodsi4_ep>

00003800 <__udivmodsi4_loop>:
    3800:	aa 1f       	adc	r26, r26
    3802:	bb 1f       	adc	r27, r27
    3804:	ee 1f       	adc	r30, r30
    3806:	ff 1f       	adc	r31, r31
    3808:	a2 17       	cp	r26, r18
    380a:	b3 07       	cpc	r27, r19
    380c:	e4 07       	cpc	r30, r20
    380e:	f5 07       	cpc	r31, r21
    3810:	20 f0       	brcs	.+8      	; 0x381a <__udivmodsi4_ep>
    3812:	a2 1b       	sub	r26, r18
    3814:	b3 0b       	sbc	r27, r19
    3816:	e4 0b       	sbc	r30, r20
    3818:	f5 0b       	sbc	r31, r21

0000381a <__udivmodsi4_ep>:
    381a:	66 1f       	adc	r22, r22
    381c:	77 1f       	adc	r23, r23
    381e:	88 1f       	adc	r24, r24
    3820:	99 1f       	adc	r25, r25
    3822:	1a 94       	dec	r1
    3824:	69 f7       	brne	.-38     	; 0x3800 <__udivmodsi4_loop>
    3826:	60 95       	com	r22
    3828:	70 95       	com	r23
    382a:	80 95       	com	r24
    382c:	90 95       	com	r25
    382e:	9b 01       	movw	r18, r22
    3830:	ac 01       	movw	r20, r24
    3832:	bd 01       	movw	r22, r26
    3834:	cf 01       	movw	r24, r30
    3836:	08 95       	ret

00003838 <__prologue_saves__>:
    3838:	2f 92       	push	r2
    383a:	3f 92       	push	r3
    383c:	4f 92       	push	r4
    383e:	5f 92       	push	r5
    3840:	6f 92       	push	r6
    3842:	7f 92       	push	r7
    3844:	8f 92       	push	r8
    3846:	9f 92       	push	r9
    3848:	af 92       	push	r10
    384a:	bf 92       	push	r11
    384c:	cf 92       	push	r12
    384e:	df 92       	push	r13
    3850:	ef 92       	push	r14
    3852:	ff 92       	push	r15
    3854:	0f 93       	push	r16
    3856:	1f 93       	push	r17
    3858:	cf 93       	push	r28
    385a:	df 93       	push	r29
    385c:	cd b7       	in	r28, 0x3d	; 61
    385e:	de b7       	in	r29, 0x3e	; 62
    3860:	ca 1b       	sub	r28, r26
    3862:	db 0b       	sbc	r29, r27
    3864:	0f b6       	in	r0, 0x3f	; 63
    3866:	f8 94       	cli
    3868:	de bf       	out	0x3e, r29	; 62
    386a:	0f be       	out	0x3f, r0	; 63
    386c:	cd bf       	out	0x3d, r28	; 61
    386e:	09 94       	ijmp

00003870 <__epilogue_restores__>:
    3870:	2a 88       	ldd	r2, Y+18	; 0x12
    3872:	39 88       	ldd	r3, Y+17	; 0x11
    3874:	48 88       	ldd	r4, Y+16	; 0x10
    3876:	5f 84       	ldd	r5, Y+15	; 0x0f
    3878:	6e 84       	ldd	r6, Y+14	; 0x0e
    387a:	7d 84       	ldd	r7, Y+13	; 0x0d
    387c:	8c 84       	ldd	r8, Y+12	; 0x0c
    387e:	9b 84       	ldd	r9, Y+11	; 0x0b
    3880:	aa 84       	ldd	r10, Y+10	; 0x0a
    3882:	b9 84       	ldd	r11, Y+9	; 0x09
    3884:	c8 84       	ldd	r12, Y+8	; 0x08
    3886:	df 80       	ldd	r13, Y+7	; 0x07
    3888:	ee 80       	ldd	r14, Y+6	; 0x06
    388a:	fd 80       	ldd	r15, Y+5	; 0x05
    388c:	0c 81       	ldd	r16, Y+4	; 0x04
    388e:	1b 81       	ldd	r17, Y+3	; 0x03
    3890:	aa 81       	ldd	r26, Y+2	; 0x02
    3892:	b9 81       	ldd	r27, Y+1	; 0x01
    3894:	ce 0f       	add	r28, r30
    3896:	d1 1d       	adc	r29, r1
    3898:	0f b6       	in	r0, 0x3f	; 63
    389a:	f8 94       	cli
    389c:	de bf       	out	0x3e, r29	; 62
    389e:	0f be       	out	0x3f, r0	; 63
    38a0:	cd bf       	out	0x3d, r28	; 61
    38a2:	ed 01       	movw	r28, r26
    38a4:	08 95       	ret

000038a6 <_exit>:
    38a6:	f8 94       	cli

000038a8 <__stop_program>:
    38a8:	ff cf       	rjmp	.-2      	; 0x38a8 <__stop_program>
